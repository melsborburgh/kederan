{
    "docs": [
        {
            "location": "/", 
            "text": "APEX Office Print (AOP) - User Manual\n\n\nRelease 18.2 October 2018\n\n\nProvided by:\n\n\n\n\n1 About AOP\n\n\n1.1 Goal\n\n\nAPEX Office Print makes printing and exporting (docx, xlsx, pptx, pdf, html, md) in Oracle Application Express (APEX) or just in PL/SQL a lot easier.\n\n\nMake a template in Office, HTML or Markdown, choose data from your database and merge them into one. You can easily print PDFs, Office documents, HTML or Markdown in no time. It saves you time and effort by creating templates in which you can easily integrate your data.\n\n\nAPEX Office Print (AOP) is a product of APEX R\nD, located in Leuven, Belgium.\n\n\nWe are an experienced partner that helps you facilitate, improve and accelerate your business through new and innovative solutions. Built on in-depth technical expertise, our company provides custom-made IT services for managing business data and processes.\n\n\n1.2 AOP Main Features\n\n\nAPEX Office Print focusses on following:\n\n\n\n\n\n\nSimple Printing\n\n    It is fast, easy and saves you money. It's the only solution on the market that is fully integrated with APEX. For example you can print or export your Interactive Reports and Grids data in a second.\n\n\n\n\n\n\nQuick and Easy Setup\n\n    Simply Import the APEX Plug-in in your application\n\n\n\n\n\n\nAny Data Type Support\n\n    Text, images, barcodes, formulas\u2026. it is easy to merge your data with any template you create\n\n\n\n\n\n\nScalable and Secure\n\n    APEX Office Print is a scalable and secure product that fits your every printing requirement.\n\n\n\n\n\n\nPL/SQL API support\n\n    It gives you ability to run and retrieve reports from AOP server directly from your PL/SQL code.\n\n\n\n\n\n\nOptimized for Performance\n\n    Great design with finest details to enhance your business productivity.\n\n\n\n\n\n\nFlexible\n\n    APEX Office Print is a print server allowing you to create templates in Word, Excel, and PowerPoint for any type of data.\n\n\n\n\n\n\n1.3 AOP Architecture\n\n\n\n\nIt's the database (APEX Plug-in, PL/SQL API, REST WebService) that is doing a request to the AOP Server (either on-premise or our cloud). The template together with the data is send in JSON format to the AOP Server.\nThe browser doesn't need to have access to the AOP server.\n\n\n1.4 How it works (overview)\n\n\n\n\n\n\n1.5 How it works (technical)\n\n\nThe APEX Office Print package consists of a server component, an Oracle APEX plug-in and PL/SQL API.\n\n\nThe server part returns generated documents upon receiving HTTP POST requests. These requests require a structured JSON file that for example can be inferred from a SQL database. The data from the database in combination with a template will generate relevant output files.\n\n\nThe Oracle Application Express (APEX) plug-in will generate the HTTP POST requests that the server part understands. The plug-in makes it easy to select a template, your data source and the output format straight from within your APEX application.\n\n\nThe PL/SQL API allows to print directly from the Oracle database. The PL/SQL API fits perfectly if you need to setup automatic printing through a job or do a mail merge.\n\n\nA sample application comes with the download, so you see plenty of use cases in action.\n\n\n1.6  Cloud vs On-Premise\n\n\nThere are two type of versions to buy:\n\n\n\n\na cloud version, which will send the requests to APEX Office Print in the cloud\n\n\nan on-premise version, which includes the server component of APEX Office Print. It's an executable you run on your own server and in the APEX Plug-in you reference your own local version of APEX Office Print. In this case nothing is sent to the AOP cloud.\n\n\n\n\n1.7 License\n\n\nThis is commercial software; you need to obtain a valid license in order to use this software and plug-in in your application. For the on-premise version a license is required per server (MAC address) you are running APEX Office Print of or you can go for an Enterprise License which is not tight to the MAC address.\n\n\nPlease visit our website \nhttps://www.apexofficeprint.com/\n for the different packages.\n\n\nYou can even sign up for a FREE Cloud account.\n\n\n1.8 Signup and Download\n\n\n\n\n\n\nOpen \nhttps://www.apexofficeprint.com/\n\n\n\n\n\n\nClick on the \"Sign Up\" button\n\n\n\n\n\n\n\n\nEnter your details\n\n\n\n\n\n\n\n\nYou'll receive an email with a confirmation link, please click that\n\n\n\n\n\n\nAt the same time you're logged into your AOP Dashboard. Select \nDownloads\n\n\n\n\n\n\n\n\nChoose the package you want and click to download it\n\n\n\n\n\n\nImportant \u2013 API key number activation\n\n\nIn your AOP dashboard your unique \nAPI key number\n can be found under the Account Info region on the home page. This number will need to be added to your Plug-in settings in order for it to work. For more information on how to do this check the \nAPEX Plugin Section\n.\n\n\n1.9 Quick Install Guide\n\n\n\n\n\n\nUnzip the file you downloaded from \nhttps://www.apexofficeprint.com\n\n\n\n\n\n\nRun aop_db_pkg.sql (in the \"db\"-directory) in your Oracle Schema (SQL Workshop -\n SQL Scripts -\n Upload -\n Select file and hit Upload)\n\n\n\n\n\n\nImport dynamic_action_plugin_be_apexrnd_aop_da.sql and process_type_plugin_be_apexrnd_aop.sql (in the \"plugin\"-directory) in Shared Components \n Plug-ins\n\n\n\n\n\n\nOn the page you want to use AOP, add the \"APEX Office Print\" Dynamic Action or Process\n\n\n\n\n\n\n1.10 Quick Upgrade Guide\n\n\nWhen you already have an older version of AOP installed.\n\n\n\n\n\n\nUnzip the file you downloaded from \nhttps://www.apexofficeprint.com\n\n\n\n\n\n\nRun aop_db_pkg.sql (in the \"db\"-directory) in your Oracle Schema (SQL Workshop -\n SQL Scripts -\n Upload -\n Select file and hit Upload)\n\n\n\n\n\n\nImport dynamic_action_plugin_be_apexrnd_aop_da.sql and process_type_plugin_be_apexrnd_aop.sql (in the \"plugin\"-directory) in Shared Components \n Plug-ins\n\n\n\n\n\n\nOptional: run aop_db_sample_pkg.sql (in the \"db\"-directory) in your Oracle Schema (SQL Workshop -\n SQL Scripts -\n Upload -\n Select file and hit Upload), which will create some sample PL/SQL Scripts. We also recommend to install the latest AOP Sample App.\n\n\n\n\n\n\nFor on-premises versions of AOP, on the server stop AOP, copy the server directory and restart AOP with the new executable.\n\n\n\n\n\n\n2 AOP APEX Sample Application\n\n\n2.1 Prerequisites\n\n\nAPEX Office Print requires Oracle APEX 5.0.4 or higher.\nInteractive Grid support is included in Oracle APEX 5.1 and above.\nRemote Databases and Web Sources are support in Oracle APEX 18.1 and above.\n\n\nNote that the higher the APEX version, the more samples the AOP Sample App will include. We recommend looking at the latest version of the AOP Sample App, even if you are not yet on the latest version of APEX. Many examples will work in previous versions of APEX too, but they don't necessarily exist in that version of the AOP Sample App.\n\n\nIn order to run the AOP Sample Application an Oracle APEX Packaged application called Sample Database Application has to be installed first. The reason is that the source and templates are using data from the tables (demo_orders, demo_order_items, demo_product_info, \u2026.) which are installed by the packaged application.\n\n\n\n\nFollow these steps to install the packaged application in your workspace:\n\n\n\n\nAccess your target Workspace\n\n\nSelect the Application Builder\n\n\n\n\nSelect Create\n\n\n\n\n\n\n\n\nSelect Packaged Application\n\n\n\n\n\n\n\n\nSelect Sample Database Application and click Install Application button\n\n\n\n\n\n\n\n\nSelect to use existing Application ID\n    \nNote: When you selected Auto Reassign Application ID you need to make sure that you change the values of aop_api_pkg that uses APP_ID and AOP_URL as global variables.\n\n\n\n\nSelect to install Supporting Objects\n\n\nFollow the wizard to complete the installation.\n\n\n\n\n2.2 Import the AOP Sample Application\n\n\n\n\nAccess your target Workspace\n\n\nSelect the Application Builder\n\n\nSelect Import and select the file in apex/version/aop_sample_apex_app.sql\n\n\nFollow the wizard to finish the import\n\n\nThe AOP Sample Application will also install all supporting objects, so after the import you can simply start using the application.\n\n\n\n\n2.3 Trying the AOP Sample Application\n\n\nThe APEX application that comes with AOP shows different examples of how APEX Office Print can be used inside an application.\n\n\n\n\nBy inspecting elements of these pages you can quickly learn how to use AOP Plug-in.\n\n\nNote that the AOP Sample Application for APEX 5.0, 5.1 and 18.1 are different. The higher the APEX version, the more features you will find in the AOP Sample App.\n\n\n2.3.1 AOP Sample Application for APEX 5.0\n\n\n\n\nAOP Sample application consist out of 19 parts:\n\n\n\n\n\n\n\n\n\nSample Print\n\n\nThis page contains different buttons all linked to different AOP processes and dynamic actions that show different use cases of the AOP plug-in.\n\n\n\n\n\n\n\n\nTop Features\n\n\nThis section highlights some of the key differentiators of APEX Office Print compared to other print solutions.\n\n\n\n\n\n\n\n\nDynamic Print\n\n\nDynamically you can select your template in Word, Excel or PowerPoint and output depending on the customer you selected.\n\n\n\n\n\n\n\n\nReports Print\n\n\nThis section shows examples where a classic and interactive report and grid is used as the source of the data. There is also an example to print labels.\nYou can even use a combination of multiple classic and interactive reports as your data source. This feature is one of the most impressive of AOP and not found in any other tool.\n\n\n\n\n\n\n\n\nChart Print\n\n\nThis section shows examples how to print charts: Line, Bar, Column, Pie, Radar, Area, ... The charts are native Office charts, so they can even be adapted after creation in Word, Excel and Powerpoint.\n\n\n\n\n\n\n\n\nRich Text Editor\n\n\nYou can also write your markup in a Rich Text Editor and AOP will understand and translate the markup (bold, color, etc.) into native Word markup. In your template you need to put an underscore in front of the tag name e.g. {_htmlcontent}\n\n\n\n\n\n\n\n\nImages\n\n\nAPEX Office Print is able to print images in different formats. This screen shows an example how to configure it. In order to show images, you base64 encode those and put a % in your tag e.g. {%image}\n\n\n\n\n\n\n\n\nQR and Barcodes\n\n\nAPEX Office Print is able to print different Bar- and QR codes. This screen shows an example how to configure it.\n\n\n\n\n\n\n\n\nInline PDF\n\n\nIf you want to show the PDF inline in a modal dialog or in a certain div (region), this page shows exactly how to do that. The value of the tag data-aop-inline-pdf should be the name of dynamic action that calls AOP.\n\n\n\n\n\n\n\n\nComplex Print\n\n\nThe Complex Print section shows different use cases for Word, Excel and Powerpoint. There are different templates that show how to create more complex layouts. There are also some examples that show some specific features like how to use line breaks in your data or how to download two documents at the same time.\n\n\n\n\n\n\n\n\nMailings Print\n\n\nWord has a feature to create labels via the mailings option. This screen shows an example with some specific Avery size labels.\n\n\n\n\n\n\n\n\nEmail Print\n\n\nThis examples shows how you can call a procedure and send an email as attachment. There is also an option to send the email but also downloading the file.\n\n\n\n\n\n\n\n\nPL/SQL API Sample\n\n\nHere you can see AOP PL/SQL API in action. It shows how to retrieve a document from AOP server and store it in custom table. This is extremely useful when you want to schedule your print jobs and send automated emails.\n\n\n\n\n\n\n\n\nScheduled Print\n\n\nYou can schedule a job to print every day, week, month etc. a specific report by using dbms_scheduler and the AOP PL/SQL API.\n\n\n\n\n\n\n\n\nBatch Print\n\n\nIf you want to print documents in batch, this page shows you three ways of doing it.\n\n\nFirst one will generate one document with the pages in here.\nSecond will generate multiple documents.\nAnd last option will generate multiple documents but present it back as a zip file.\n\n\n\n\n\n\n\n\nTemplate and Data Types\n\n\nThis page gives an overview and example of the different template and data types that are possible in the APEX Office Print (AOP) Plug-in and API.\nThe template type defines where your template in docx, xlsx or pptx is defined (table, filesystem, url, APEX, ...). The data type defines where the data can be found to be merged with the template (SQL, PL/SQL, JSON, REST, ...).\n\n\n\n\n\n\n\n\nAOP Usage\n\n\nThis page gives an overview of the pages where and how the APEX Office Print (AOP) Plug-in is used.\n\n\n\n\n\n\n\n\nAutomated Test\n\n\nYou can automatically test all your documents in this screen and see if all of your defined templates and data sources merged correctly. This option is especially useful after an upgrade of AOP or Office.\n\n\n\n\n\n\n\n\nTemplates\n\n\nHere you can upload your templates into a custom table.\n\n\nThe idea here is that in your own application, you allow people to create or update their own templates and upload them to the application without the need for developer to code other documents.\n\n\n\n\n\n\n\n\n2.3.2 AOP Sample Application for APEX 5.1\n\n\nFor Oracle Application Express (APEX) 5.1 we wanted to take the AOP Sample App to another level and include more insight how AOP is working. We know reading documentation isn't the most fun, so we put a lot of information into the sample app, so by navigating through it you learn about AOP.\n\n\n\n\nThe different parts of the sample app:\n\n\n\n\n\n\nStart\n walks you step-by-step how you can get AOP working in your own application.\n\n\n\n\n\n\n\n\nTour\n shows the different techniques you can use and goes in more detail when to use which plug-in, the PL/SQL API or do a manual REST request.\n\n\n\n\n\n\n\n\nExamples\n shows different use cases of AOP, so you can see exactly behind the scenes how AOP is used.\n\n\n\n\n\n\n\n\nDoc\n is a link to the latest version of our online documentation.\n\n\n\n\n\n\nMore\n is a link to our website where you find the release history, FAQ, Tutorials etc.\n\n\n\n\n\n\nSupport\n will open your default email client so you can write us.\n\n\n\n\n\n\n2.3.3 AOP Sample Application for APEX 18.x\n\n\nFor Oracle Application Express (APEX) 18.1 and above we recreated the AOP Sample App from scratch. We really recommend going through this sample application. This app showcases the different features AOP has, both specific for APEX as what many people are looking for in a reporting solution. Where possible we added extra information so you have a thorough understanding how AOP works and how to create what you dream of.\n\n\n\n\nThe different parts of the sample app:\n\n\n\n\n\n\nInstallation\n walks you step-by-step how you can get AOP working in your own application.\n\n\n\n\n\n\n\n\nArchitecture\n shows the flow of the different components and techniques you can use and goes in more detail when to use which plug-in, the PL/SQL API or do a manual REST request.\n\n\n\n\n\n\n\n\nAPEX Features\n shows the integration of AOP with specific APEX features like Interactive Reports, Interactive Grid and Calendar.\n\n\n\n\n\n\n\n\nExamples\n shows different possibilities of AOP, so you can see exactly behind the scenes how AOP is used.\n\n\n\n\n\n\n\n\nUse Cases\n show different use cases people requested or had issues with (coming soon).\n\n\n\n\n\n\nDebugging\n includes how to debug and test AOP.\n\n\n\n\n\n\n\n\nUser Manual\n is a link to the latest version of our online documentation.\n\n\n\n\n\n\nSupport\n will open your default email client so you can write us.\n\n\n\n\n\n\nAdministration\n of the application as generated by APEX.\n\n\n\n\n\n\n3 APEX Plug-in\n\n\n3.1 Pre-requisites\n\n\nThe APEX Office Print APEX plug-in requires Oracle APEX 5.0.4 or higher.\n\n\nThe AOP plug-ins are relying on a PL/SQL package (aop_api_pkg which is a synonym for aop_api18_pkg) that needs to be compiled first.\n \n\n\nTo make the package available, go into SQL Plus, SQLcl, SQL Developer or SQL Workshop and run the SQL Script aop_db_pkg.sql which you find in the db directory of the zip you downloaded.\n\n\nAlternatively you can run the install.sql file which will install some additional packages which show case how to use AOP from PL/SQL.\n\n\nIf you imported the AOP Sample App and ran the the Supporting Objects, the packages are automatically installed.\n\n\n3.2 Import and plug-in Attributes\n\n\n\nFollow these steps to import the plug-in in your application:\n\n\n\n\nAccess your target Workspace\n\n\nSelect the Application Builder\n\n\nSelect the Application where you wish to import the plug-in \n (plug-ins belong to an application, not a workspace)\n\n\nAccess \nShared Components \n Plug-Ins\n\n\nClick \nImport \n\n\nBrowse and locate the installer files in apex/version/process_type_plugin_be_apexrnd_aop.sql)\n\n\nComplete the wizard.\n\n\nDo the same for the dynamic action plug-in in apex/version/dynamic_action_plugin_be_apexrnd_aop.sql)\n\n\n\n\nFollow these steps to finish your Plug-in installation by \nadding your Plug-in API key\n:\n\n\n\n\nLogin into \nhttps://www.apexofficeprint.com\n\n\nCopy your API key from the Dashboard\n\n\nAccess your target APEX Workspace\n\n\nSelect the Application Builder\n\n\nSelect the Application where you wish to import the plug-in (plug-ins belong to an application, not a workspace)\n\n\nAccess \nShared Components \n Component Settings\n\n\nHere select APEX Office Print (AOP) [Plug-in]\n\n\n\n\nAdd you API key that you copied in step 2\n\n\n\n\n\n\n\n\nClick Apply\n\n\n\n\nInstallation is now completed\n\n\n\n\nInstallation note:\nTo use AOP PL/SQL API you may need to configure your ACL (Access Control List) settings to allow access to:\n\n\nhttp(s)://api.apexofficeprint.com\n\n\nFor more details please refer to Oracle APEX installation guide:\n\nfor \nAPEX 5.0\n or for \nAPEX 5.1\n\nor for \nAPEX 18.1\n\n\nIn case you want to update some plug-in settings, you find the plug-in settings in Shared Components \n Component Settings \n APEX Office Print (AOP) [Plug-in]\n\n\n\n\nYou can change the AOP URL, AOP Failover URL (and Procedure which is being called on failover), API Key, Debug and specify a package where those settings are specified.\nSince AOP 3.5 you can also specify a Log package which will be called on every request, so you can monitor directly from your Oracle database if prints are successful.\nIf you use the on-premise version of AOP you can also change the Converter.\n\n\nTo generate a PDF, APEX Office Print is using an external converter. By default LibreOffice is used (available on all platforms), but this can be changed to MS Office (Windows only).\n\n\n3.3 How to use the AOP Plug-in\n\n\nSimply add a new process called AOP (plug-in) on your APEX page once you completed steps in 3.2.\n\n\n\n\n3.4 Quick Start Demo\n\n\nOnce the plug-in has been imported into your APEX 5 application navigate to the Sample Database Application \u2013 Page 4.\n\n\n1) Create a new button called PRINT and place it right of the RESET button.\n\n\n2) Create a new process (APEX 5.0) or dynamic action (APEX 5.1) called AOP and select as type AOP [Plug-in]\n\n\n3) Set the Data Type option of the plug-in to SQL and paste following select in the Data Source. Please note the use of cursor \ndata\n. The tags that you use in the template should be inside this \ndata\n cursor.\n\n\n```sql\nselect\n'file1' as \"filename\",\ncursor(\n    select\n    c.cust_first_name as \"cust_first_name\",\n    c.cust_last_name as \"cust_last_name\",\n    c.cust_city as \"cust_city\",\n    cursor(\n        select\n        o.order_total as \"order_total\",\n        'Order ' || rownum as \"order_name\",\n        cursor(\n            select\n            p.product_name as \"product_name\",\n            i.quantity as \"quantity\",\n            i.unit_price as \"unit_price\",\n            APEX_WEB_SERVICE.BLOB2CLOBBASE64(p.product_image) as \"image\"\n            from\n            demo_order_items i, demo_product_info p\n            where\n            o.order_id = i.order_id\n            and i.product_id = p.product_id\n                ) \"product\"\n        from\n        demo_orders o\n        where\n        c.customer_id = o.customer_id\n            ) \"orders\"\n    from\n    demo_customers c\n    where\n    customer_id = 1\n        ) as \"data\"\nfrom dual\n```\n\n\n\n4) As Output Type select docx.\n\n\n5) Add as Condition for the process set only to run when button clicked PRINT.\n\n\n6) Hit Save and Run the page.\n\n\nWhen clicking on the Print button you should now get your first Word document.\n   This document represents a starting template based on your data. You'll see all tags that you can use and some more explanations how to use expressions and certain features of AOP.\n   You can now create your template in MS Word (or Excel or Powerpoint) and use the tags in your template. Follow the next steps to do this.\n\n\n7) Create your template in Word and use the tags that came in the first document you got.\n\n\n8) Go to Shared Components \n Static Application Files and upload your template\n\n\n9) Go back to your page and select the AOP process\n\n\n10) Change the Template Type to \"Static Application Files\"\n\n\n11) In Template Source enter your document you uploaded in step 8 e.g. my_template.docx\n\n\n12) Run your page again\n\n\nWhen clicking on the Print button you should now get your Word document based on your template with the tags replaced by the data coming from the database.\n\n\n3.5 Plug-in options\n\n\nSince AOP v2.3 there are two plug-ins included: a process type plug-in and a dynamic action plug-in. If you are using APEX 5.1, the Dynamic Action plug-in will always work, whereas the Process plug-in only works if the \u201cReload on Submit\u201d attribute (of the page) is set to \u201cAlways\u201d (note this attribute is new in 5.1). This is due to a change how APEX 5.1 is handling Page Processing. If you would import an APEX 5.0 app in 5.1 by default it\u2019s set to Always reload on submit, but if you create a brand new app in 5.1 it\u2019s set to \u201cOnly for Success\u201d and then the process plug-in is not working.\n\n\nThere are different configuration options that can be used in AOP.\n\n\nIn subsections to follow you can find more details for each of them.\n\n\n3.5.1 Template Type\n\n\nIt stands for what will the source of your templates be.\n\n\nAOP Plug-in allows you to:\n\n\n\n\n\n\nUse AOP default templates\n\n\n\n\n\n\nUse static files kept on a server or as Application/Workspace files\n(acting as as global templates)\n\n\n\n\n\n\nDynamically define your templates\n\n\n\n\n\n\nAOP Template\n\n\nWill generate a Word document with a starting template based on the data\n(JSON) that is submitted.\n\n\nStatic Application Files\n\n\nWill reference files you find in Shared Components \n Static\nApplication Files\n\n\nStatic Workspace Files\n\n\nWill reference files you find in Shared Components \n Static Workspace\nFiles\n\n\nSQL\n\n\nQuery that returns two columns: template_type and file (in this order)\n\n\n\n\ntemplate_type can be: docx,xlsx,pptx\n\n\nwhile file column supports: clob base64 of the blob (hint: use apex_web_service.blob2clobbase64 to convert blob to clob).\n\n\n\n\nPL/SQL Function (returning SQL)\n\n\nReturn a select statement as with SQL.\n\n\nPL/SQL Function (returning JSON)\n\n\nReturn JSON object with following format:\n\n\n{\n\nfile\n:\nclob base64 data\n,\n\ntemplate_type\n:\ndocx,xlsx,pptx\n\n}\n\n\n\n\nFilename (with path relative to AOP server)\n\n\nEnter the path and filename of the template which is stored on the same\nserver AOP is running at.\n\n\nURL (returning file)\n\n\nEnter the url to your template in docx, xlsx or pptx.\n\n\n3.5.2 Template Source\n\n\nAll types except the default AOP Template type will allow you to configure this setting. It can represent a name of your file or contain code for your SQL and PL/SQL.\n\n\n\n\nSome Template Source examples can be found here:\n\n\nStatic Application Files\n\n\naop_simple_letter.docx\n\n\nStatic Workspace Files\n\n\naop_simple_letter.docx\n\n\nSQL\n\n\nselect\n  a.TEMPLATE_TYPE as template_type,\n  apex_web_service.blob2clobbase64(a.TEMPLATE_BLOB) as file\n from aop_template a\nwhere id = 1\n\n\n\n\nPL/SQL Function (returning SQL)\n\n\ndeclare\n  l_return clob;\nbegin\n  l_return := q'[\n    select\n      a.TEMPLATE_TYPE as template_type,\n      apex_web_service.blob2clobbase64(a.TEMPLATE_BLOB) as file\n     from aop_template a\n    where id = 1\n  ]';\n  return l_return;\nend;\n\n\n\n\nPL/SQL Function (returning JSON)\n\n\ndeclare\n  l_return clob;\n\nbegin\n  l_return := '{ \nfile\n: \n, \ntemplate_type\n: \ndocx\n }';\n  return l_return;\nend;\n\ndeclare\n  l_return clob;\n  l_template clob;\n  l_template_type aop_template.template_type%type;\n\nbegin\n  select template_type, apex_web_service.blob2clobbase64(template_blob) template\n    into l_template_type, l_template\n    from aop_template\n   where id = :p4_template;\n\n  l_return := '{ \nfile\n: \n' || replace(l_template,'\n', '\\u0022') || '\n,'\n           || ' \ntemplate_type\n: \n' || replace(l_template_type,'\n', '\\u0022')\n           || '\n }';\n  return l_return;\nend;\n\n\n\n\nYou can use this technique to load html as template. Please have  a look at page 114 of the sample application. \n\n\nFilename (with path relative to AOP server)\n\n\naop_template.docx\n\n\nNote: Filename supports Substitutions like Application Items, Page Items and System Variables\n\n\nURL (returning file)\n\n\nhttp://apexofficeprint.com/templates/aop_template_d01.docx\n\n\n3.5.3 Data Type\n\n\nData Type states what kind of data source you will be using.\n\n\nAvailable options include:\n\n\nSQL\n\n\nSelect statement in which you can use cursor to do nested records. Use \"\" as alias column names to force lower case column names. \nThe data you select should be inside the data cursor. AOP plug-in expects two columns: filename and data.\n\n\nselect\n    'file1' as \nfilename\n,\n    cursor\n    (\n        ***Your select statement***\n    ) as \ndata\n\nfrom dual\n\n\n\n\nPL/SQL Function (returning SQL)\n\n\nReturn a select statement as with SQL.\n\n\nPL/SQL Function (returning JSON)\n\n\nReturn JSON defined in URL example above.\n\n\nURL (returning JSON)\n\n\nSource should point to URL that returns JSON object with following format: { \"filename\": \"file1\", \"data\":[{...}] } If the URL is using an APEX ORDS REST call it will automatically be wrapped with additional JSON: {\"items\":[...]} All of this will be handled for you by AOP Plug-in.\n\n\nRegion(s): Classic and/or Interactive Report(s) and/or Interactive Grid(s) and/or Charts\n\n\nOne or more classic and/or interactive reports and/or interactive grids will be used as the source for your data. The Dynamic Action plug-in also has the possibility to take a screenshot of for example a JET chart or any other div (svg/canvas).\n\n\nNote that you can use bind variables like :PX_ITEM as well in your SQL-statement. You find examples when you click on Help in the APEX Plug-in when you're on the Data Source field\n\n\n3.5.4 Data Source\n\n\nDepends on selected Data Type and it can be:\n\n\nSQL\n\n\nselect\n  'file1' as \nfilename\n,\n  cursor(\n    select\n      c.cust_first_name as \ncust_first_name\n,\n      c.cust_last_name as \ncust_last_name\n,\n      c.cust_city as \ncust_city\n,\n      cursor(\n        select\n          o.order_total as \norder_total\n,\n          'Order ' || rownum as \norder_name\n,\n          cursor(\n            select\n              p.product_name as \nproduct_name\n,\n              i.quantity as \nquantity\n,\n              i.unit_price as \nunit_price\n,\n              APEX_WEB_SERVICE.BLOB2CLOBBASE64(p.product_image) as \nimage\n\n            from\n              demo_order_items i, demo_product_info p\n            where\n              o.order_id = i.order_id\n              and i.product_id = p.product_id\n                ) \nproduct\n\n        from\n          demo_orders o\n        where\n          c.customer_id = o.customer_id\n            ) \norders\n\n    from\n      demo_customers c\n    where\n      customer_id = :P4_CUSTOMER_ID\n        ) as \ndata\n\nfrom dual\n\n\n\n\nBe sure to put the the returned data inside the \ndata\n cursor.\n\n\nselect\n  'file1' as \nfilename\n,\n  cursor(\n      ***Your Select Statement***\n  )\n   as \ndata\n\nfrom dual\n\n\n\n\nPL/SQL Function (returning SQL)\n\n\nThe returned SQL should contain the data inside data cursor like above.\n\n\ndeclare\n  l_return clob;\nbegin\n  l_return := q'[\n    select\n      'file1' as \nfilename\n,\n      cursor(\n        select\n          c.cust_first_name as \ncust_first_name\n,\n          c.cust_last_name as \ncust_last_name\n,\n          c.cust_city as \ncust_city\n,\n          cursor(\n            select\n              o.order_total as \norder_total\n,\n              'Order ' || rownum as \norder_name\n,\n              cursor(\n                select\n                  p.product_name as \nproduct_name\n,\n                  i.quantity as \nquantity\n,\n                  i.unit_price as \nunit_price\n,\n                  APEX_WEB_SERVICE.BLOB2CLOBBASE64(p.product_image) as \nimage\n\n                from\n                  demo_order_items i, demo_product_info p\n                where\n                  o.order_id = i.order_id\n                  and i.product_id = p.product_id\n                    ) \nproduct\n\n            from\n              demo_orders o\n            where\n              c.customer_id = o.customer_id\n                ) \norders\n\n        from\n          demo_customers c\n        where\n          customer_id = :P4_CUSTOMER_ID\n            ) as \ndata\n\n    from dual\n  ]';\n  return l_return;\nend;\n\n\n\n\nPL/SQL Function (returning JSON)\n\n\nNote how the JSON contains the data object with the actual data inside it.\n\n\ndeclare\n  l_cursor sys_refcursor;\n  l_return clob;\nbegin\n  apex_json.initialize_clob_output(dbms_lob.call, true, 2) ;\n  open l_cursor for\n    select 'file1' as \nfilename\n,\n      cursor\n        (select\n         c.cust_first_name as \ncust_first_name\n,\n         c.cust_last_name as \ncust_last_name\n ,\n         c.cust_city as \ncust_city\n ,\n         cursor\n           (select\n              o.order_total as \norder_total\n,\n              'Order ' || rownum as \norder_name\n ,\n              cursor\n              (select\n                 p.product_name as \nproduct_name\n,\n                 i.quantity as \nquantity\n ,\n                 i.unit_price as \nunit_price\n ,\n                 apex_web_service.blob2clobbase64(p.product_image) as \nimage\n\n               from\n                 demo_order_items i,\n                 demo_product_info p\n               where\n                 o.order_id = i.order_id\n                 and i.product_id = p.product_id\n               ) \nproduct\n\n            from\n              demo_orders o\n            where\n              c.customer_id = o.customer_id\n                and rownum \n 2\n           )\norders\n\n         from\n           demo_customers c\n         where\n           customer_id = :P4_CUSTOMER_ID\n        ) as \ndata\n\n    from dual;\n  apex_json.write(l_cursor);\n  l_return := apex_json.get_clob_output;\n  return l_return;\n end;\n\n\n\n\nURL with ORDS RESTful Web Service\n\n\nFor this you need to create a new Webservice following these steps:\n\n\n\n\n\n\nOpen SQL Workshop -\n RESTful services.\n\n\nClick Create button and follow the wizard. For RESTful Services Module set\n\n\n\n\nName can be of your preference.\n\n\n\n\n\n\nFor Resource Template enter:\n\n\n\n\n\n\n\n\nFor Resource Handler enter:\n\n\n\n\nThe statement we used in this example is:\n\n\n\n\n\n\nselect\n  file1' as \nfilename\n,\n  cursor(\n    select\n      c.cust_first_name,\n      c.cust_last_name,\n      c.cust_city,\n      cursor(\n        select\n          o.order_total,\n          'Order ' || rownum as order_name,\n          cursor(\n            select\n              p.product_name,\n              i.quantity,\n              i.unit_price,\n              APEX_WEB_SERVICE.BLOB2CLOBBASE64(p.product_image) as image\n            from\n              demo_order_items i,\n              demo_product_info p\n            where\n              o.order_id = i.order_id\n              and i.product_id = p.product_id\n                ) product\n        from\n          demo_orders o\n        where\n          c.customer_id = o.customer_id\n          and rownum \n 2\n            ) orders\n    from\n      demo_customers c\n    where\n      customer_id = :id\n        ) as \ndata\n\nfrom dual\n\n\n\n\n4.Finally click Create Module button.\n\n\nNote: For Resource Handler: GET setting after you created your RESTful service you may need to change Requires Secure Access setting from default Yes to No.\n\n\nClassic and/or Interactive Report(s) and/or Interactive Grid(s)\n\n\nnot defined in Data Source but in Region Static ID(s) (see 3.5.5)\n\n\n3.5.5 Region Static ID(s)\n\n\nDefine one or more Static Id(s) of the report region (Classic or Interactive Report or Interactive Grid). Static ids should be separated by a comma. e.g. classic1,ir1,ir2\nYou can set the Static ID of the region in the region attributes.\nYou can call a specific Interactive Report by adding a pipe next to it e.g. ir1|my_saved_report.\n\n\n3.5.6 Special\n\n\nSpecific features of APEX Office Print which become available when the data type is SQL or Classic and/or Interactive Report(s)\n\n\nAvailable options include:\n\n\nTreat all numbers as strings\n\nThere's a limitation in APEX with the cursor() statement in SQL that it doesn't remember which datatype the column is in. So when doing to_char(0.9,'990D00') it will return 0.9 as number instead of as string '0.90'. To resolve this, enable this checkbox and concatenate your number with '!FMT!' e.g. '!FMT!'||to_char(35, '990D00') - !FMT! stands for format.\n\n\nAlternatively if you format your number with the currency sign to_char(35,'FML990D00') Oracle will recognise it as a string and you don't need to use this checkbox.\n\n\nReport as Labels\n\nCheck this box in case you want to use the Classic or Interactive Report data source but print them as Labels (using the Mailings feature in Word). * this option is deprecated since AOP 3.0 as AOP understands labels depending the template.\n\n\nIR/IG: Show Filters on top\n\nWhen there're filters applied to the Interactive Report/Grid, this checkbox will print them above the report.\n\n\nIR/IG: Show Highlights on top\n\nWhen there're highlights applied to the Interactive Report/Grid, this checkbox will print them above the report.\n\n\nIR/IG: Show header with filter (Excel)\n\nWhen checked AOP will make the header of the Interactive Report/Grid in Excel a filter.\n\n\nIR/IG: Use Saved Report instead of Report in Session\n\nIf you want to make sure you always call a specific Interactive Report/Grid, without taking into account what the person is doing with it, you can check this box and the named (saved) Interactive Report will be taken. e.g. ir1|my_saved_report would be in your source.\n\n\nIR/IG: Repeat header on every page\n\nWhen the table spans multiple pages, the header row will be repeated on every page.\n\n\n3.5.7 Output Filename (only in the Process Plug-in)\n\n\nThe filename can be a hard coded string or reference an APEX item. It does not need to include the file extension. If a file extension is defined that is different than the output type selected, a new file extension will be appended to the filename.\nSee further how to specify the output filename in the Dynamic Action plug-in (Init PL/SQL Code).\n\n\nFilename examples\n\n\nStatic: my_file\n\n\nAPEX Item: \nP1_FILENAME.\n\n\n3.5.8 Init PL/SQL Code (only in the Dynamic Action Plug-in)\n\n\nYou can define global variables of the aop_api_pkg in this area.\n\n\nFor example you can set the output filename or a font:\n\n\naop_api_pkg.g_output_filename      := 'output';\naop_api_pkg.g_output_filename      := v('P1_FILENAME');\naop_api_pkg.g_rpt_header_font_size := '12';\n\n\n\n\n3.5.9 Output Type\n\n\nAvailable options include:\n\n\n\n\nWord (docx)\n\n\nExcel (xlsx)\n\n\nPowerpoint (pptx)\n\n\nPDF (pdf)\n\n\nHTML (html)\n\n\nMarkdown (md)\n\n\nWord (rtf)\n\n\nDefined by APEX Item\n\n\n\n\n3.5.10 Output To\n\n\nAvailable options include:\n\n\nBrowser\n\n\nThe browser will download the file to your Downloads folder.\n\n\nProcedure\n\n\nThis option will call a procedure in a specific format e.g. send_email_prc. This option is useful in case you do not need the file on your own hard drive, but for example you want to mail the document automatically. In that case you can create a procedure that adds the generated document as an attachment to your apex_mail.send.\n\n\nIn the database the procedure needs to have following parameters:\n\n\nprocedure send_email_prc(\n    p_output_blob in blob,\n    p_output_filename in varchar2,\n    p_output_mime_type in varchar2)\n\n\n\nProcedure and Browser\n\n\nThis option allows you to call a procedure first and next download the file to your hard drive. An example is when you first want to store the generated document in a table before letting the browser to download it.\n\n\nInline Region (pdf/html/md only)\n\n\nIf you want to output a PDF in a certain region or as a pop-up modal dialog, use this option. See section: 2.3.1.9 for more info.\n\n\nDirectory (on AOP Server)\n\n\nSave the file to a directory specified with g_output_directory. The default directory on the AOP Server is outputfiles. If you point this to a directory on a shared server or to a directory known by Google Drive or Dropbox, you can easily generate and share documents. Note that the AOP server should enable this option by using the \n--enable_save\n argument. It goes without saying that this option is not available while using cloud subscription.\n\n\n4 PL/SQL API\n\n\n4.1 Pre-requisites\n\n\nAPEX 5.0.4 or higher needs to be installed in the database as the PL/SQL API uses some packages that come with APEX e.g. apex_json\n\n\n4.2 Install in the Database\n\n\nGo into SQL Plus, SQLcl, SQL Developer or SQL Workshop and make sure following packages exist aop_api18_pkg and aop_plsql18_pkg and the synonyms aop_api_pkg and aop_plsql_pkg. As part of the installation those packages should have been compiled.\n\n\n4.3 How to use\n\n\nYou can call AOP straight from PL/SQL. APEX Office Print comes with two different ways of calling AOP; one package is aop_api_pkg which is also used behind the scenes in the APEX Plug-in and the other on is aop_plsql_pkg.\naop_plsql_pkg is especially useful when you just want to do the call to the AOP server component or cloud.\n\n\nNext to the above two packages we also provide two additional packages that show how to do the pl/sql calls. See the packages aop_sample18_pkg and aop_test18_pkg.\n\n\n4.4 Parameters\n\n\naop_api_pkg\n\n\nGlobal variables which can be set\n\n\n-- Logger\ng_logger_enabled            boolean := true;        -- In case you use Logger (https://github.com/OraOpenSource/Logger), you can compile this package to enable Logger output:\n                                                    -- SQL\n ALTER PACKAGE aop_api18_pkg COMPILE PLSQL_CCFLAGS = 'logger_on:TRUE'; \n                                                    -- When compiled and this global variable is set to true, debug will be written to logger too\n-- Call to AOP\ng_aop_url                   varchar2(100) := null;  -- AOP Server url\ng_api_key                   varchar2(50)  := null;  -- AOP API Key; only needed when AOP Cloud is used (http(s)://www.apexofficeprint.com/api)\ng_failover_aop_url          varchar2(100) := null;  -- AOP Server url in case of failure of AOP url\ng_failover_procedure        varchar2(200) := null;  -- When the failover url is used, the procedure specified in this variable will be called\ng_output_converter          varchar2(50)  := null;  -- Set the converter to go to PDF (or other format different from template) e.g. officetopdf or libreoffice\ng_proxy_override            varchar2(300) := null;  -- null=proxy defined in the application attributes\ng_transfer_timeout          number(6)     := 1800;  -- default of APEX is 180\ng_wallet_path               varchar2(300) := null;  -- null=defined in Manage Instance \n Instance Settings\ng_wallet_pwd                varchar2(300) := null;  -- null=defined in Manage Instance \n Instance Settings\ng_output_filename           varchar2(100) := null;  -- output\ng_cloud_provider            varchar2(30)  := null;  -- dropbox, gdrive, onedrive, aws_s3\ng_cloud_location            varchar2(300) := null;  -- directory in dropbox, gdrive, onedrive, aws_s3 (with bucket)\ng_cloud_access_token        varchar2(500) := null;  -- access token for dropbox, gdrive, onedrive, aws_s3 (needs json)\ng_language                  varchar2(2)   := 'en';  -- Language can be: en, fr, nl, de, used for the translation of filters applied etc. (translation build-in AOP)\ng_app_language              varchar2(20)  := null;  -- Language specified in the APEX app (primary language, translated language), when left to null, apex_util.get_session_lang is being used\ng_logging                   clob          := '';    -- ability to add your own logging: e.g. \"request_id\":\"123\", \"request_app\":\"APEX\", \"request_user\":\"RND\"\ng_debug                     varchar2(10)  := null;  -- set to 'Local' when only the JSON needs to be generated, 'Remote' for remore debug\ng_debug_procedure           varchar2(4000):= null;  -- when debug in APEX is turned on, next to the normal APEX debug, this procedure will be called\n                                                    --   e.g. to write to your own debug table. The definition of the procedure needs to be the same as aop_debug\n-- APEX Page Items\ng_apex_items                varchar2(4000):= null;  -- colon separated list of APEX items e.g. P1_X:P1_Y, which can be referenced in a template using {Pxx_ITEM}                                                    \n-- Layout for IR \ng_rpt_header_font_name      varchar2(50)  := '';    -- Arial - see https://www.microsoft.com/typography/Fonts/product.aspx?PID=163\ng_rpt_header_font_size      varchar2(3)   := '';    -- 14\ng_rpt_header_font_color     varchar2(50)  := '';    -- #071626\ng_rpt_header_back_color     varchar2(50)  := '';    -- #FAFAFA\ng_rpt_header_border_width   varchar2(50)  := '';    -- 1 ; '0' = no border\ng_rpt_header_border_color   varchar2(50)  := '';    -- #000000\ng_rpt_data_font_name        varchar2(50)  := '';    -- Arial - see https://www.microsoft.com/typography/Fonts/product.aspx?PID=163\ng_rpt_data_font_size        varchar2(3)   := '';    -- 14\ng_rpt_data_font_color       varchar2(50)  := '';    -- #000000\ng_rpt_data_back_color       varchar2(50)  := '';    -- #FFFFFF\ng_rpt_data_border_width     varchar2(50)  := '';    -- 1 ; '0' = no border\ng_rpt_data_border_color     varchar2(50)  := '';    -- #000000\ng_rpt_data_alt_row_color    varchar2(50)  := '';    -- #FFFFFF for no alt row color, use same color as g_rpt_data_back_color\n/* see also Printing attributes in Interactive Report */\n-- Settings for Calendar\ng_cal_type                  varchar2(10)  := 'month'; -- can be month (default), week, day, list\ng_start_date                date          := null;    -- start date of calendar\ng_end_date                  date          := null;    -- end date of calendar\ng_weekdays                  varchar2(300) := null;    -- translation for weekdays e.g. Monday:Tuesday:Wednesday etc.\ng_months                    varchar2(300) := null;    -- translation for months   e.g. January:February etc.  \ng_color_days_sql            varchar2(4000):= null;    -- color the background of certain days. \n                                                    --   e.g. select 1 as \"id\", sysdate as \"date\", 'FF8800' as \"color\" from dual\n-- HTML template to Word/PDF\ng_orientation               varchar2(50)  := '';      -- empty is portrait, other option is 'landscape'\n-- Call to URL data source\ng_url_username              varchar2(300) := null;\ng_url_password              varchar2(300) := null;\ng_url_proxy_override        varchar2(300) := null;\ng_url_transfer_timeout      number        := 180;\ng_url_body                  clob          := empty_clob();\ng_url_body_blob             blob          := empty_blob();\ng_url_parm_name             apex_application_global.vc_arr2; --:= empty_vc_arr;\ng_url_parm_value            apex_application_global.vc_arr2; --:= empty_vc_arr;\ng_url_wallet_path           varchar2(300) := null;\ng_url_wallet_pwd            varchar2(300) := null;\ng_url_https_host            varchar2(300) := null;    -- parameter for apex_web_service, not used, please apply APEX patch if issues\n-- Web Source Module (APEX \n= 18.1)\ng_web_source_first_row      pls_integer   := null;    -- parameter for apex_exec.open_web_source_query\ng_web_source_max_rows       pls_integer   := null;    -- parameter for apex_exec.open_web_source_query\ng_web_source_total_row_cnt  boolean       := false;   -- parameter for apex_exec.open_web_source_query\n-- REST Enabled SQL (APEX \n= 18.1)\ng_rest_sql_auto_bind_items  boolean       := true;    -- parameter for apex_exec.open_remote_sql_query\ng_rest_sql_first_row        pls_integer   := null;    -- parameter for apex_exec.open_remote_sql_query\ng_rest_sql_max_rows         pls_integer   := null;    -- parameter for apex_exec.open_remote_sql_query\ng_rest_sql_total_row_cnt    boolean       := false;   -- parameter for apex_exec.open_remote_sql_query\ng_rest_sql_total_row_limit  pls_integer   := null;    -- parameter for apex_exec.open_remote_sql_query\n-- IP Printer support\ng_ip_printer_location       varchar2(300) := null;\ng_ip_printer_version        varchar2(300) := '1';\ng_ip_printer_requester      varchar2(300) := nvl(apex_application.g_user, USER);\ng_ip_printer_job_name       varchar2(300) := 'AOP';\ng_ip_printer_return_output  varchar2(5)   := null;   -- null or 'Yes' or 'true'\n-- Convert characterset\ng_convert                   varchar2(1)   := c_n;    -- set to Y (c_y) if you want to convert the JSON that is send over; necessary for Arabic support\ng_convert_source_charset    varchar2(20)  := null;   -- default of database \ng_convert_target_charset    varchar2(20)  := 'AL32UTF8';  \n-- Output\ng_output_directory          varchar2(200) := '.';    -- set output directory on AOP Server\n                                                    -- if . is specified the files are saved in the default directory: outputfiles\ng_output_split              varchar2(5)   := null;   -- split file: one file per page: true/false\n\n-- Files\ng_prepend_files_sql         clob := null;    -- format: select filename, mime_type, [file_blob, file_base64, url_call_from_db, url_call_from_aop, file_on_aop_server]\ng_append_files_sql          clob := null;    --           from my_table\n\n-- Sub-Templates\ng_sub_templates_sql         clob := null;    -- format: select filename, mime_type, [file_blob, file_base64, url_call_from_db, url_call_from_aop, file_on_aop_server] from my_table\n\n-- Password protected PDF\ng_output_read_password      varchar2(200) := null;  -- protect PDF to read\ng_output_modify_password    varchar2(200) := null;  -- protect PDF to write (modify)\ng_output_pwd_protection_flag number(4)    := null;  -- optional; default is 4.\n\n\n\nFunction call\n\n\nfunction plsql_call_to_aop(\n  p_data_type             in varchar2 default c_source_type_sql,\n  p_data_source           in clob,\n  p_template_type         in varchar2 default c_source_type_apex,\n  p_template_source       in clob,\n  p_output_type           in varchar2,\n  p_output_filename       in out nocopy varchar2,\n  p_output_type_item_name in varchar2 default null,\n  p_output_to             in varchar2 default null,\n  p_procedure             in varchar2 default null,\n  p_binds                 in wwv_flow_plugin_util.t_bind_list default c_binds,\n  p_special               in varchar2 default null,\n  p_aop_remote_debug      in varchar2 default 'No',\n  p_output_converter      in varchar2 default null,\n  p_aop_url               in varchar2,\n  p_api_key               in varchar2,\n  p_app_id                in number default null,\n  p_page_id               in number default null,\n  p_user_name             in varchar2 default null,\n  p_init_code             in clob default 'null;',\n  p_output_encoding       in varchar2 default c_output_encoding_raw,\n  p_failover_aop_url      in varchar2 default null,\n  p_failover_procedure    in varchar2 default null,\n  p_log_procedure         in varchar2 default null,\n  p_prepend_files_sql     in clob     default null,\n  p_append_files_sql      in clob     default null,\n  p_sub_templates_sql     in clob     default null)\n  return blob;\n\n\n\nNote that some other procedures and functions are available in the package which could be helpful.\n\n\naop_plsql_pkg\n\n\nfunction make_aop_request(\n  p_aop_url          in varchar2 default g_aop_url,\n  p_api_key          in varchar2 default g_api_key,\n  p_json             in clob,\n  p_template         in blob,\n  p_output_encoding  in varchar2 default 'raw', -- change to raw to have binary, change to base64 to have base64 encoded\n  p_output_type      in varchar2 default null,\n  p_output_filename  in varchar2 default 'output',\n  p_aop_remote_debug in varchar2 default 'No')\n  return blob;\n\n\n\n4.5 Example\n\n\nExample with \naop_api_pkg\n\n\ndeclare\n  l_binds           wwv_flow_plugin_util.t_bind_list;\n  l_return          blob;\n  l_output_filename varchar2(100) := 'output';\nbegin\n  -- define bind variables\n  l_binds(1).name := 'p_id';\n  l_binds(1).value := '1';\n\n  l_return := aop_api_pkg.plsql_call_to_aop (\n                p_data_type       =\n 'SQL',\n                p_data_source     =\n q'[\n                  select\n                    'file1' as \"filename\",\n                    cursor(\n                      select\n                        c.cust_first_name as \"cust_first_name\",\n                        c.cust_last_name as \"cust_last_name\",\n                        c.cust_city as \"cust_city\",\n                        cursor(select o.order_total as \"order_total\",\n                                      'Order ' || rownum as \"order_name\",\n                                  cursor(select p.product_name as \"product_name\",\n                                                i.quantity as \"quantity\",\n                                                i.unit_price as \"unit_price\", APEX_WEB_SERVICE.BLOB2CLOBBASE64(p.product_image) as \"image\"\n                                           from demo_order_items i, demo_product_info p\n                                          where o.order_id = i.order_id\n                                            and i.product_id = p.product_id\n                                        ) \"product\"\n                                 from demo_orders o\n                                where c.customer_id = o.customer_id\n                              ) \"orders\"\n                      from demo_customers c\n                      where customer_id = :p_id\n                    ) as \"data\"\n                  from dual\n                ]',\n                p_template_type   =\n 'SQL',\n                p_template_source =\n q'[\n                   select template_type, template_blob\n                    from aop_template\n                   where id = 1\n                ]',\n                p_output_type     =\n 'docx',\n                p_output_filename =\n l_output_filename,\n                p_binds           =\n l_binds,\n                p_aop_url         =\n 'http://api.apexofficeprint.com/',\n                p_api_key         =\n '1C511A58ECC73874E0530100007FD01A',\n                p_app_id          =\n 232);\nend;\n\n\n\nExample with \naop_plsql_pkg\n\n\ndeclare\n  l_template        blob;\n  l_output_file     blob;\nbegin\n  select template_blob\n    into l_template\n    from aop_template\n   where id = 1;\n\n  l_output_file := aop_plsql_pkg.make_aop_request(\n                     p_json        =\n '[{ \"filename\": \"file1\", \"data\": [{ \"cust_first_name\": \"APEX Office Print\" }] }]',\n                     p_template    =\n l_template,\n                     p_output_type =\n 'docx',\n                     p_aop_remote_debug =\n 'Yes');\nend;\n\n\n\nIn \naop_sample18_pkg\n you find the above examples and you can run them with following command:\n\n\nbegin\n    aop_sample18_pkg.call_aop_plsql_pkg;\n    aop_sample18_pkg.call_aop_api_pkg;\nend;\n\n\n\nNote that there are more examples in the \naop_sample18_pkg\n, so it's worthwhile to check it out.\n\n\n4.6 PL/SQL API Documentation\n\n\nThe complete reference can be found in the \nAOP PL/SQL API documentation\n.\n\n\n5 Manual (REST) call\n\n\n5.1 Overview\n\n\nBehind the scenes the APEX plug-in is creating a JSON file that will be sent to the AOP server. Below you find more details about the JSON structure that is used. By understanding this JSON structure you can manually interact with the AOP server in case you wanted to code in PL/SQL or other languages.\n\n\n5.2 JSON File\n\n\nThe JSON file is a file that follows the standard JSON structure (\nhttp://json.org/\n).\n\n\nThis JSON file contains an JSON object meaning it starts with { and ends with }. This JSON object contains four compulsory JSON objects namely \"template\", \"output\", \"files\", \"api_key\" and a few optional object \"version\", \"logging\", \"apex_version\", \"aop_remote_debug\" and \"ipp\". The purpose of each object will now be explained.\n\n\n5.2.1 \"version\" object\n\n\nThis object contains the version of AOP JSON format used. The current version is 18.1 and backwards compatible thus optional. This will be used for future upgrades and if the newer version is not backwards compatible.\n\n\n5.2.2 \"template\" object\n\n\nThis object has the necessary information about the template. It contains:\n\n\n\n\n\n\n\n\nJSON\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\n\"file\"\n\n\nThis contains the template to be used, encoded in base64.\n\n\n\n\n\n\n\"filename\"\n\n\nThis option is for on-premise users. The template defined by this object will be used for processing. Note that the filename either contains a relative path from where the server is running from (or the folder/directory containing application) or an absolute path.\n\n\n\n\n\n\n\"template_type\"\n\n\nThis states what kind of template is being used. It must be either \"docx\", \"pptx\", \"xlsx\", \"html\" or \"md\".\n\n\n\n\n\n\n\"html_template_content\"\n\n\nSince AOP 3.4 it is possible to just pass html as template. This is equivalent as using {_html} tag in word to create the template which is then again passed to the AOP with the data for rendering.\n\n\n\n\n\n\n\"orientation\"\n\n\nnothing or \"landscape\". If landscape is provided then the html template content will be rendered in a landscape A4 word template. Taken only into account when html_template_content is provided.\n\n\n\n\n\n\nIf \"file\" and \"filename\" objects are not present in the \"template\" object then the server will respond with a custom template file of \"template_type\" made from this given JSON file. Currently only Word, Excel and Powerpoint template generation is supported.\n\n\n\n\n\n\n\n\n\n\n5.2.3 \"output\" object\n\n\nThis object has the necessary information for producing an output file from the given JSON file. It contains:\n\n\n\n\n\n\n\n\nJSON\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\n\"output_type\"\n\n\nThis states what kind of output file type is required. It can be either the same as template_type (\"docx\", \"pptx\", \"xlsx\", \"html\", \"md\"), \"pdf\" or any other output file supported by libreoffice/openoffice. Special output type: \"onepagepdf\", this will cause the ouptut to be converted to pdf and all the pages will be merged into one single page.  Default: the same as template_type.\n\n\n\n\n\n\n\"output_encoding\"\n\n\nThis states what kind of output encoding is wished for the output file. It must be either \"raw\" or \"base64\".\n\n\n\n\n\n\n\"output_converter\"\n\n\nThis states which software should be used to convert to pdf. The ApexOfficePrint server usages LibreOffice. On premise users may use MS Office but will need to do some configuration first. Available values: \"officetopdf\" (Windows only) or \"libreoffice\" (Windows, Linux, OSX) or anyother custom defined converters in aop_config.json file (see setting up AOP) if you are using On Premise Version.\n\n\n\n\n\n\n\"output_directory\"\n\n\nIf save on disk is enabled, then the document will be saved on the path resulted by combining this given path with the specified directory.\n\n\n\n\n\n\n\"output_modify_password\"\n\n\nRequires output pdf, the password needed to modify the pdf. Optional. Read password, if given, will be used if this field is empty.\n\n\n\n\n\n\n\"output_read_password\"\n\n\nRequires output pdf, the password needed to open the pdf. Optional.\n\n\n\n\n\n\n\"output_password_protection_flag\"\n\n\nRequires output pdf,  bit field explained in the PDF specs in table 3.20 in section 3.5.2, should be given in decimal \nmore info\n. Optional. Default (4).\n\n\n\n\n\n\n\n\n5.2.3 \"api_key\"\n\n\nThe value of this key is the api key given by ApexOfficePrint. Only applicable for service users.\n\n\n5.2.4 \"file\" array\n\n\nThis array contains the data that will be used for the given template.\nIf this array contains more than one object then the output files, which are generated using the same template for each item, will be returned in a zip file. This array contains JSON objects with following fields:\n\n\n\n\n\n\n\n\nJSON\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\n\"filename\"\n\n\nThis field contains the name of the output file.\n\n\n\n\n\n\n\"data\"\n\n\nThis array (containing one object) or object contains the data that will be replaced in the template.\n\n\n\n\n\n\n\n\nExample showing a basic JSON file which should be populated with data:\n\n\n{\n    \ntemplate\n: {\n           \nfilename\n               :\ntemplate.docx\n,\n           \ntemplate_type\n          :\ndocx\n\n    },\n    \noutput\n: {\n           \noutput_encoding\n        :\nraw\n,\n           \noutput_type\n            :\ndocx\n,\n           \noutput_directory\n       :\n.\n\n    },\n    \nfiles\n: [{\n             \nfilename\n             :\nfile1\n,\n             \ndata\n                 : [{...}]\n    }]\n}\n\n\n\n\n5.2.5 \"logging\" object\n\n\nWhen AOP is started with --enable_printlog, it will create a file on the server called server_printjob.log.\nYou can add additional logging information next to the one AOP is logging by default, by adding additional keys and values in the logging object.\n\n\nFor example:\n\n\n    \nlogging\n: {\n        \ntemplate_filename\n: \nAOP template\n,\n        \noutput_filename\n: \noutput.docx\n\n    }\n\n\n\n\n5.2.6 \"ipp\" object\n\n\nAOP supports to print directly to an IP Printer by using this setting. If your IPP printer supports pdf files, your documents will be converter to pdf and sent to IPP printer. If your printer does not support PDF and supports Postscript then the pdf generated is converter to pdf using pdftops. You need download xpdf tools from: https://www.xpdfreader.com/download.html. Make sure that the binary pdftops is on PATH variable. You can download executables from apexofficeprint.com to check whether or not your IPP printer supports PDF/postscript.\nThe structure is:\n\n\nipp\n: {\n        \nlocation\n: \nhttp://10.0.14.223:631/\n,\n        \nversion\n: \n1.1\n,\n        \nrequester\n: \nYOUR NAME\n,\n        \njob_name\n: \nAOP\n\n    }\n\n\n\n\n6 Templates\n\n\nThe templates are standard office files in which tags will be replaced by structured data from the JSON file. These tags are quite standardized for either \n.docx\n, \n.pptx\n or \n.xlsx\n, however there are some subtle differences. They are all able to handle \nJavaScript angular expressions\n, on which some of the basics will follow.\n\n\n6.0 Tag Overview\n\n\nIn the table below is an overview of the available tags and their support in Word, Excel and PowerPoint respectively. For more information on each tag, see the sections that follow.\n\n\n\n\n\n\n\n\nTag\n\n\nWord\n\n\nExcel\n\n\nPowerPoint\n\n\nHTML\n\n\nMarkdown\n\n\nTxt\n\n\n\n\n\n\n\n\n\n\n{data_string}\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\n{data_string_with_cell_markup$}\n\n\nYes\n\n\nYes\n\n\nNo\n\n\nNo\n\n\nNo\n\n\nN.A\n\n\n\n\n\n\n{-labels}\n\n\nYes\n\n\nN.A\n\n\nN.A\n\n\nN.A\n\n\nN.A\n\n\nN.A\n\n\n\n\n\n\n{_htmlcontent}\n\n\nYes\n\n\nNo\n\n\nNo\n\n\nYes (by default)\n\n\nYes (by default)\n\n\nN.A\n\n\n\n\n\n\n{!slide_loop}\n\n\nN.A\n\n\nN.A\n\n\nYes\n\n\nN.A\n\n\nN.A\n\n\nN.A\n\n\n\n\n\n\n{!excelsheet_loop}\n\n\nN.A\n\n\nYes\n\n\nN.A\n\n\nN.A\n\n\nN.A\n\n\nN.A\n\n\n\n\n\n\n{#data_loop} \u2026 {/data_loop}\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\n{:data_loop_horizontal} \u2026 {/data_loop_horizontal}\n\n\nYes\n\n\nYes\n\n\nNo\n\n\nNo\n\n\nNo\n\n\nNo\n\n\n\n\n\n\n{=table_row_loop} \u2026 {/table_row_loop}\n\n\nN.A\n\n\nN.A\n\n\nYes\n\n\nN.A\n\n\nN.A\n\n\nN.A\n\n\n\n\n\n\n{%imageKey}\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nN.A\n\n\n\n\n\n\n{\nbarcode}\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nN.A\n\n\n\n\n\n\n{\nqrcode}\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nN.A\n\n\n\n\n\n\n{$chart}\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nNo\n\n\nNo\n\n\nN.A\n\n\n\n\n\n\n{\ninteractive_report}\n\n\nYes\n\n\nYes\n\n\nNo\n\n\nNo\n\n\nNo\n\n\nN.A\n\n\n\n\n\n\n{\ninteractive_grid\n}\n\n\nYes\n\n\nYes\n\n\nNo\n\n\nNo\n\n\nNo\n\n\nN.A\n\n\n\n\n\n\n{\nrightToLeft}\n\n\nYes\n\n\nNot Necessary\n\n\nNot Necessary\n\n\nNot Necessary\n\n\nNot Necessary\n\n\nN.A\n\n\n\n\n\n\n{+footnote}\n\n\nYes\n\n\nNo\n\n\nNo\n\n\nNo\n\n\nNo\n\n\nN.A\n\n\n\n\n\n\n{*hyperlink}\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nNot Necessary\n\n\nNot Necessary\n\n\nN.A\n\n\n\n\n\n\n{~}\n\n\nYes\n\n\nN.A\n\n\nN.A\n\n\nN.A\n\n\nN.A\n\n\nN.A\n\n\n\n\n\n\n\n\nNote: tags can't start with a number and should start with an alphabetical character (a-z,A-Z)\n\n\n6.1 Word (docx) template\n\n\nThese templates can contain the following tags:\n\n\n6.1.1 {data_string} tags\n\n\nThis tag, \n{data_string},\n will be replaced by the value of the key \n\"data_string\"\n in the JSON file.\n\n\n6.1.1.1 Data string example\n\n\nGiven the JSON file with following content:\n\n\n    {\n        \ntemplate\n: {\n               \nfilename\n               :\ntemplate.docx\n,\n               \ntemplate_type\n          :\ndocx\n\n        },\n        \noutput\n: {\n               \noutput_encoding\n        :\nraw\n,\n               \noutput_type\n            :\ndocx\n\n        },\n        \nfiles\n: [{\n                 \nfilename\n             :\noutput\n,\n                 \ndata\n: [{\n                         \nfirst_name\n   :\nDemoName\n,\n                         \nlast_name\n    :\nDemoLastName\n,\n                         \ncity\n         :\nDemoCity\n\n                  }]\n        }]\n    }\n\n\n\n\nand template.docx with following content:\n\n\n                                             {last_name} {first_name}\n                                             {city}\n\n\n\nwill result in:\n\n\n                                              DemoLastName DemoName\n                                              DemoCity\n\n\n\nSince the template and the output objects from the json will not change, these will be omitted from the examples given below.\n\n\n6.1.2 {%imagekey} tags\n\n\nThis tag is the same as {data_string} but instead getting replaced by a string this tag is replaced by an image that is placed in the value of key \"imagekey\" after base64 encoding. Note that imagekey is just a variable. An image tag is represented by \"%\" after curly bracket.\nYou can also specify a fixed width and the height by adding following values \"imagekey_width\" and \"imagekey_height\". If you want to scale your image proportionally you can use the \"imagekey_max_width\" and \"imagekey_max_height\" tags. An example is created in the AOP Sample Application which shows how it works. The imagekey is pic, so we can use pic_max_width for example.\nThe given data can be a base64 encoded image or a URL pointing to an image(the url must have image extension) or a ftp server image. \n\n\n6.1.2.1 Image tag example\n\n\nReplace /...code..../ for the base64 encoded string of the image\n\n\n    {\n        ...\n        \nfiles\n:[{\n                 \nfilename\n        :\noutput\n,\n            \ndata\n:[{\n                  \nproduct_name\n   :\nWallet\n,\n                  \nprice\n          :\n$500.00\n,\n                  \npic\n            :\n/...code..../\n,\n                  \npic_max_width\n  : 100,\n                  \npic_max_height\n : 100\n            }]\n        }]\n    }\n\n\n\n\nwith template:\n\n\n\n\n\n\n\n\nProduct\n\n\nImage\n\n\nPrice\n\n\n\n\n\n\n\n\n\n\n{product_name}\n\n\n{%pic}\n\n\n{price}\n\n\n\n\n\n\n\n\nwill result in:\n\n\n\n\n\n\nTip: in case you want to make your images equal in size, you can use PL/SQL to resize your images. Here's an example to put the size of the image to a maximum of 200px.\n\n\ndeclare\n  l_img blob;\nbegin\n  select image\n    into l_img\n    from my_table\n   where id = 1 for update;\n  ordsys.ordimage.process(l, 'maxscale=200 200');\n  update my_table\n     set image = l\n   where id = 1;\nend;\n\n\n\n\n6.1.3 {|barcode} / {|qrcode} tags\n\n\nThis tag will be replaced by the barcode or QR code created using the data of the key named \n\"barcode\"\n or \n\"qrcode\"\n. Notice that these are also variable. Barcode or qrcode tags are represented by | after\ncurly bracket. If this tag is found in the document there must be additional supporting keys containing the options for these tags. These options are:\n\n\n\n\n\n\nkey_type, e.g. \"barcode_type\" if the key used is \"barcode\".\n   This field contains the type of barcode required.\n   The options are:\n    \ncodabar\n    code128\n    code128a\n    code128b\n    code128c\n    code39\n    ean13\n    ean2\n    ean5\n    ean8\n    itf\n    itf14\n    msi\n    msi10\n    msi1010\n    msi11\n    msi1110\n    pharmacode\n    upc\n    upce\n\n\n\n\n\n\nkey_height, e.g. \"barcode_height\" if the key used is \"barcode\".\n   This field contains the height for the generated image.\n   Default is 200 for QR, 50 for the rest.\n\n\n\n\n\n\nkey_width, e.g. \"barcode_width\" if they key used is \"barcode\".\n   This field contains the width for the generated image.\n   Default is 200.\n\n\n\n\n\n\nkey_errorcorrectlevel (only for QR code), e.g. \"qrcode_errorcorrectlevel\" if the key used is \"qrcode\". This field contains the level of which the QR code should be recoverable.\n   The options are:\n   \"L\" (up to 7% damage)\n   \"M\" (up to 15% damage)\n   \"Q\" (up to 25% damage)\n   \"H\" (up to 30% damage)\n   Extra info: \nhttp://www.qrcode.com/en/about/error_correction.html\n\n\n\n\n\n\nkey_cellsize (only for QR code), e.g.  \"qrcode_cellsize\". This field contains the dot size of a module.\n   Default is 4.\n   Extra info: \nhttp://www.qrcode.com/en/howto/cell.html\n\n\n\n\n\n\n6.1.3.1 Barcode tag example\n\n\nGiven the JSON file:\n\n\n    {\n        ...\n        \nfiles\n:[{\n                 \nfilename\n           :\noutput\n,\n            \ndata\n:[{\n                  \nproduct_name\n      :\nWallet\n,\n                  \nproduct_code\n      :\n1896547832148\n,\n                  \nproduct_code_type\n :\nean13\n,\n                  \nproduct_link\n      :\nhttps://www.google.be/search?q=wallet\n,\n                  \nproduct_link_type\n :\nqrcode\n\n            }]\n        }]\n    }\n\n\n\n\nand template as:\n\n\n\n\nwill result in:\n\n\n\n\n\n\nFor barcodes, instead of doing the above, you could also choose to install a barcode font, for example \nFree 3of9\n or \nhttp://www.dafont.com/3of9-barcode.font\n. Barcode fonts are more performant than images. See the other section for more information about language and font support.\n\n\n6.1.4 {$chart} tags\n\n\nThis tag will be replaced by chart created using the data of the key named \n\"chart\"\n. Notice that this key is a variable. Charts are represented by $ after curly bracket. If this tag is found in the document the chart object in the json must follow certain structure. Firstly an optional object with key \n\"options\"\n to determine the options for the chart. The default options are:\n\n\n    defaultOptions = {\n            width: 5486400 / 9525, // width of the chart\n            height: 3200400 / 9525, // height of the chart\n            grid: true, // if a grid should be shown\n            border: true, // if a border should be shown\n            title: false,\n            legend: {\n                showLegend: true, // if the legend should be shown\n                position: 'r'  // 'l' for left, 'r' right, 'b' bottom, 't' top\n            },\n            axis: {\n                x: {\n                    orientation: 'minMax', // or \nmaxMin\n\n                    min: undefined, // a specific number\n                    max: undefined, // a specific number\n                    type: undefined, // or \ndate\n\n                    date: { //date options\n                        format: 'unix',\n                        code: 'mm/yy',\n                        unit: 'months',\n                        step: '1'\n                    },\n                    showValues: true //options to disable showing the values in axis\n\n                },\n                y: {\n                    orientation: 'minMax',\n                    mix: undefined,\n                    max: undefined,\n                    showValues: true // options to disable showing the values in axis\n                 },\n                y2: { //If using multiple charts and axis on the right side\n                orientation: 'minMax',\n                mix: undefined,\n                max: undefined,\n                showValues: true // options to disable showing the values in axis\n                }\n            }\n        }\n\n\n\n\nSecondly the type of chart should be determined by \"type\" key. The generation of following types of charts is supported:\n\n\n6.1.4.1 Line\n\n\nThis is a normal chart where the data's are connected with lines. Multiple lines can be generated.  The chart key should contain lines array inside with the data of the lines that should be generated and the name of the line. E.g.:\n\n\n    \nchart\n: {\n            \nlines\n: [\n                {\n                    \ndata\n: [\n                        {\n                            \nx\n: \nday 1\n,\n                            \ny\n: \n4.3\n\n                        },\n                        {\n                            \nx\n: \nday 2\n,\n                            \ny\n: \n2.5\n\n                        },\n                        {s\n                            \nx\n: \nday 3\n,\n                            \ny\n: \n3.5\n\n                        }\n                    ],\n                    \nname\n: \nline 1\n,\n                    \nsmooth\n: true, //Can be false\n                    \nsymbol\n: \nsquare\n // can be diamond triangle\n                },\n                {\n                    \ndata\n: [\n                        {\n                            \nx\n: \nday 1\n,\n                            \ny\n: \n2.4\n\n                        },\n                        {\n                            \nx\n: \nday 2\n,\n                            \ny\n: \n4.4\n\n                        },\n                        {\n                            \nx\n: \nday 3\n,\n                            \ny\n: \n1.8\n\n                        }\n                    ],\n                    \nname\n: \nline 2\n\n                }\n            ],\n            \ntype\n: \nline\n\n        }\n\n\n\n\nwill result in :\n\n\n\n\n6.1.4.2 bar\n\n\nIn order to generate the bar chart, the chart object should then contains array names bars. This array contains the objects with data about the bar and the name of the bar. For example, given the following:\n\n\n    ...\n    \nchart\n: {\n        \nbars\n: [\n            {\n                \ndata\n: [\n                    {\n                        \nx\n: \nday 1\n,\n                        \ny\n: \n4.3\n\n                    },\n                    {\n                        \nx\n: \nday 2\n,\n                        \ny\n: \n2.5\n\n                    },\n                    {\n                        \nx\n: \nday 3\n,\n                        \ny\n: \n3.5\n\n                    }\n                ],\n                \nname\n: \nbar 1\n\n            },\n            {\n                \ndata\n: [\n                    {\n                        \nx\n: \nday 1\n,\n                        \ny\n: \n2.4\n\n                    },\n                    {\n                        \nx\n: \nday 2\n,\n                        \ny\n: \n4.4\n\n                    },\n                    {\n                        \nx\n: \nday 3\n,\n                        \ny\n: \n1.8\n\n                    }\n                ],\n                \nname\n: \nbar 2\n\n            }\n        ],\n        \ntype\n: \nbar\n\n    }\n    ...\n\n\n\n\nwill result in:\n\n\n\n\nSingle bar chart is generated as follows:\n\n\n    ...\n    \nchart\n: {\n        \nbars\n: [\n            {\n                \ndata\n: [\n                    {\n                        \nx\n: \nday 1\n,\n                        \ny\n: \n4.3\n\n                    },\n                    {\n                        \nx\n: \nday 2\n,\n                        \ny\n: \n2.5\n\n                    },\n                    {\n                        \nx\n: \nday 3\n,\n                        \ny\n: \n3.5\n\n                    }\n                ],\n                \nname\n: \nbar 1\n\n            }\n        ],\n        \ntype\n: \nbar\n\n    }\n    ...\n\n\n\n\nwill result in:\n\n\n\n\n6.1.4.3 barStacked\n\n\nThis is like bar chart but the bars from same category will be stacked. For example, given the following:\n\n\n    ...\n    \nchart\n: {\n        \nbars\n: [\n            {\n                \ndata\n: [\n                    {\n                        \nx\n: \nday 1\n,\n                        \ny\n: \n4.3\n\n                    },\n                    {\n                        \nx\n: \nday 2\n,\n                        \ny\n: \n2.5\n\n                    },\n                    {\n                        \nx\n: \nday 3\n,\n                        \ny\n: \n3.5\n\n                    }\n                ],\n                \nname\n: \nbar 1\n\n            },\n            {\n                \ndata\n: [\n                    {\n                        \nx\n: \nday 1\n,\n                        \ny\n: \n2.4\n\n                    },\n                    {\n                        \nx\n: \nday 2\n,\n                        \ny\n: \n4.4\n\n                    },\n                    {\n                        \nx\n: \nday 3\n,\n                        \ny\n: \n1.8\n\n                    }\n                ],\n                \nname\n: \nbar 2\n\n            }\n        ],\n        \ntype\n: \nbarStacked\n\n    }\n    ...\n\n\n\n\nwill result in:\n\n\n\n\n6.1.4.4 barStackedPercent\n\n\nThis is like bar stacked chart but the x axis will be in expressed in percentage.\nFor example, given the following:\n\n\n    ...\n    \nchart\n: {\n        \nbars\n: [\n            {\n                \ndata\n: [\n                    {\n                        \nx\n: \nday 1\n,\n                        \ny\n: \n4.3\n\n                    },\n                    {\n                        \nx\n: \nday 2\n,\n                        \ny\n: \n2.5\n\n                    },\n                    {\n                        \nx\n: \nday 3\n,\n                        \ny\n: \n3.5\n\n                    }\n                ],\n                \nname\n: \nbar 1\n\n            },\n            {\n                \ndata\n: [\n                    {\n                        \nx\n: \nday 1\n,\n                        \ny\n: \n2.4\n\n                    },\n                    {\n                        \nx\n: \nday 2\n,\n                        \ny\n: \n4.4\n\n                    },\n                    {\n                        \nx\n: \nday 3\n,\n                        \ny\n: \n1.8\n\n                    }\n                ],\n                \nname\n: \nbar 2\n\n            }\n        ],\n        \ntype\n: \nbarStacked\n\n    }\n    ...\n\n\n\n\nwill result in:\n\n\n\n\n6.1.4.5 column\n\n\nThis will produce a normal column chart. The chart object should then contain an array named columns with objects containing the data and name of the column. E.g.:\n\n\n        \nchart\n: {\n            \ncolumns\n: [\n                {\n                    \ndata\n: [\n                        {\n                            \nx\n: \nday 1\n,\n                            \ny\n: \n4.3\n\n                        },\n                        {\n                            \nx\n: \nday 2\n,\n                            \ny\n: \n2.5\n\n                        },\n                        {\n                            \nx\n: \nday 3\n,\n                            \ny\n: \n3.5\n\n                        }\n                    ],\n                    \nname\n: \ncolumn 1\n\n                },\n                {\n                    \ndata\n: [\n                        {\n                            \nx\n: \nday 1\n,\n                            \ny\n: \n2.4\n\n                        },\n                        {\n                            \nx\n: \nday 2\n,\n                            \ny\n: \n4.4\n\n                        },\n                        {\n                            \nx\n: \nday 3\n,\n                            \ny\n: \n1.8\n\n                        }\n                    ],\n                    \nname\n: \ncolumn 2\n\n                }\n            ],\n            \ntype\n: \ncolumn\n\n        }\n\n\n\n\nwill result in:\n\n\n\n\nA single column chart can be generated by following json:\n\n\n        \nchart\n: {\n            \ncolumns\n: [\n                {\n                    \ndata\n: [\n                        {\n                            \nx\n: \nday 1\n,\n                            \ny\n: \n4.3\n\n                        },\n                        {\n                            \nx\n: \nday 2\n,\n                            \ny\n: \n2.5\n\n                        },\n                        {\n                            \nx\n: \nday 3\n,\n                            \ny\n: \n3.5\n\n                        }\n                    ],\n                    \nname\n: \ncolumn 1\n\n                }\n            ],\n            \ntype\n: \ncolumn\n\n        }\n\n\n\n\nwill result in:\n\n\n\n\n6.1.4.6 columnStacked\n\n\nThis will produce a column stacked chart. The chart object should then contain an array named columns with objects containing the data and the name of the column. E.g:\n\n\n        \nchart\n: {\n            \ncolumns\n: [\n                {\n                    \ndata\n: [\n                        {\n                            \nx\n: \nday 1\n,\n                            \ny\n: \n4.3\n\n                        },\n                        {\n                            \nx\n: \nday 2\n,\n                            \ny\n: \n2.5\n\n                        },\n                        {\n                            \nx\n: \nday 3\n,\n                            \ny\n: \n3.5\n\n                        }\n                    ],\n                    \nname\n: \ncolumn 1\n\n                },\n                {\n                    \ndata\n: [\n                        {\n                            \nx\n: \nday 1\n,\n                            \ny\n: \n2.4\n\n                        },\n                        {\n                            \nx\n: \nday 2\n,\n                            \ny\n: \n4.4\n\n                        },\n                        {\n                            \nx\n: \nday 3\n,\n                            \ny\n: \n1.8\n\n                        }\n                    ],\n                    \nname\n: \ncolumn 2\n\n                }\n            ],\n            \ntype\n: \ncolumnStacked\n\n        }\n\n\n\n\nwill result in:\n\n\n\n\n6.1.4.7 columnStackedPercent\n\n\nThis will product a column stacked percent chart. The chart object should then contain an array named columns with objects containing the data and the name of the column.  E.g:\n\n\n        \nchart\n: {\n            \ncolumns\n: [\n                {\n                    \ndata\n: [\n                        {\n                            \nx\n: \nday 1\n,\n                            \ny\n: \n4.3\n\n                        },\n                        {\n                            \nx\n: \nday 2\n,\n                            \ny\n: \n2.5\n\n                        },\n                        {\n                            \nx\n: \nday 3\n,\n                            \ny\n: \n3.5\n\n                        }\n                    ],\n                    \nname\n: \ncolumn 1\n\n                },\n                {\n                    \ndata\n: [\n                        {\n                            \nx\n: \nday 1\n,\n                            \ny\n: \n2.4\n\n                        },\n                        {\n                            \nx\n: \nday 2\n,\n                            \ny\n: \n4.4\n\n                        },\n                        {\n                            \nx\n: \nday 3\n,\n                            \ny\n: \n1.8\n\n                        }\n                    ],\n                    \nname\n: \ncolumn 2\n\n                }\n            ],\n            \ntype\n: \ncolumnStackedPercent\n\n        }\n\n\n\n\nwill result in:\n\n\n\n\n6.1.4.8 pie\n\n\nThis will produce a pie chart. The chart object should then contain an array named pies with one element containing the data and name of the pie chart. E.g:\n\n\n        \nchart\n: {\n            \npies\n: [\n                {\n                    \ndata\n: [\n                        {\n                            \nx\n: \nOrder 1\n,\n                            \ny\n: 1890\n                        },\n                        {\n                            \nx\n: \nOrder 2\n,\n                            \ny\n: 2380\n                        },\n                        {\n                            \nx\n: \nOrder 3\n,\n                            \ny\n: 1640\n                        },\n                        {\n                            \nx\n: \nOrder 4\n,\n                            \ny\n: 1090\n                        },\n                        {\n                            \nx\n: \nOrder 5\n,\n                            \ny\n: 950\n                        },\n                        {\n                            \nx\n: \nOrder 6\n,\n                            \ny\n: 1515\n                        },\n                        {\n                            \nx\n: \nOrder 7\n,\n                            \ny\n: 905\n                        },\n                        {\n                            \nx\n: \nOrder 8\n,\n                            \ny\n: 1060\n                        },\n                        {\n                            \nx\n: \nOrder 9\n,\n                            \ny\n: 730\n                        },\n                        {\n                            \nx\n: \nOrder 10\n,\n                            \ny\n: 870\n                        }\n                    ],\n                    \nname\n: \npie 1\n\n                }\n            ],\n            \ntype\n: \npie\n\n        }\n\n\n\n\nwill result in:\n\n\n\n\n6.1.4.9 radar\n\n\nThis will produce a radar chart. The chart object should then contain an array named radars with one element containing the data and name of the radar chart. E.g:\n\n\n        \nchart\n: {\n            \nradars\n: [\n                {\n                    \ndata\n: [\n                        {\n                            \nx\n: \nOrder 1\n,\n                            \ny\n: 1240\n                        },\n                        {\n                            \nx\n: \nOrder 2\n,\n                            \ny\n: 380\n                        },\n                        {\n                            \nx\n: \nOrder 3\n,\n                            \ny\n: 840\n                        },\n                        {\n                            \nx\n: \nOrder 4\n,\n                            \ny\n: 490\n                        },\n                        {\n                            \nx\n: \nOrder 5\n,\n                            \ny\n: 1230\n                        }\n                    ],\n                    \nname\n: \nradar 1\n\n                }\n            ],\n            \ntype\n: \nradar\n\n        }\n\n\n\n\nwill result in:\n\n\n\n\n6.1.4.10 area\n\n\nThis will produce an area chart. The chart object should then contain an array named areas with one element containing the data and name of the area chart. E.g:\n\n\n    \nchart\n: {\n        \nareas\n: [\n            {\n                \ndata\n: [\n                    {\n                        \nx\n: \nday 1\n,\n                        \ny\n: \n4.3\n\n                    },\n                    {\n                        \nx\n: \nday 2\n,\n                        \ny\n: \n2.5\n\n                    },\n                    {\n                        \nx\n: \nday 3\n,\n                        \ny\n: \n3.5\n\n                    }\n                ],\n                \nname\n: \narea 1\n\n            },\n            {\n                \ndata\n: [\n                    {\n                        \nx\n: \nday 1\n,\n                        \ny\n: \n2.4\n\n                    },\n                    {\n                        \nx\n: \nday 2\n,\n                        \ny\n: \n4.4\n\n                    },\n                    {\n                        \nx\n: \nday 3\n,\n                        \ny\n: \n1.8\n\n                    }\n                ],\n                \nname\n: \narea 2\n\n            }\n        ],\n        \ntype\n: \narea\n\n    }\n\n\n\n\nwill result in:\n\n\n\n\n6.1.4.11 scatter\n\n\nThis will produce an scatter chart. The chart object should then contain an array named scatters with one element containing the data and name of the scatter chart. Similar to previous charts however the x axis should contain only numbers.\n\n\n6.1.4.13 bubble\n\n\nThis will produce an bubble chart. The chart object should then contain an array named bubbles with one element containing the data and name of the bubble chart. It is similar to previous charts however, the data should can now contain size value to determine the size of a bubble. Example JSON:\n\n\n{\n    \nchart\n: {\n        \nbubbles\n: [\n            {\n                \ndata\n: [\n                    {\n                        \nx\n: \nday 1\n,\n                        \ny\n: \n4.3\n,\n                        \nsize\n:\n1\n\n                    },\n                    {\n                        \nx\n: \nday 2\n,\n                        \ny\n: \n2.5\n,\n                        \nsize\n:\n3\n\n                    },\n                    {\n                        \nx\n: \nday 3\n,\n                        \ny\n: \n3.5\n,\n                        \nsize\n:\n2\n\n                    }\n                ],\n                \nname\n: \nBubble series 1\n\n            },\n            {\n                \ndata\n: [\n                    {\n                        \nx\n: \nday 1\n,\n                        \ny\n: \n2.4\n,\n                        \nsize\n:\n4\n\n                    },\n                    {\n                        \nx\n: \nday 2\n,\n                        \ny\n: \n4.4\n,\n                        \nsize\n:\n5\n\n                    },\n                    {\n                        \nx\n: \nday 3\n,\n                        \ny\n: \n1.8\n,\n                        \nsize\n:\n1\n\n                    }\n                ],\n                \nname\n: \nBubble series 2\n\n            }\n        ],\n        \ntype\n: \nbubble\n\n    }\n}\n\n\n\n\nwill result in:\n\n\n\n\n6.1.4.14 stock\n\n\nThis will produce an stock chart. The chart object should then contain an array named stocks with one element containing the data and name of the stock chart. Here instead of y value: volume, open, close, high and low value should be given. The format of the x axis can also be given.\nThe x axis contains the date starting using 1900 notation, i.e 1 will represent January 1 1900 \nmore info\n.\n\n\nExample:\n\n\n {\n          \nchart\n: {\n            \nstocks\n: [\n              {\n                \ndata\n: [\n                  {\n                    \nx\n: \n1\n,\n                    \nvolume\n: \n70\n,\n                    \nopen\n: \n44\n,\n                    \nhigh\n: \n55\n,\n                    \nlow\n: \n11\n,\n                    \nclose\n: \n25\n\n                  },\n                  {\n                    \nx\n: \n2\n,\n                    \nvolume\n: \n120\n,\n                    \nopen\n: \n25\n,\n                    \nhigh\n: \n57\n,\n                    \nlow\n: \n12\n,\n                    \nclose\n: \n38\n\n                  },\n                  {\n                    \nx\n: \n3\n,\n                    \nvolume\n: \n150\n,\n                    \nopen\n: \n38\n,\n                    \nhigh\n: \n57\n,\n                    \nlow\n: \n13\n,\n                    \nclose\n: \n50\n\n                  },\n                  {\n                    \nx\n: \n4\n,\n                    \nvolume\n: \n135\n,\n                    \nopen\n: \n50\n,\n                    \nhigh\n: \n58\n,\n                    \nlow\n: \n11\n,\n                    \nclose\n: \n35\n\n                  },\n                  {\n                    \nx\n: \n5\n,\n                    \nvolume\n: \n148\n,\n                    \nopen\n: \n34\n,\n                    \nhigh\n: \n58\n,\n                    \nlow\n: \n25\n,\n                    \nclose\n: \n43\n\n                  }\n                ],\n                \nname\n: \ns\n\n              }\n            ],\n            \ntype\n: \nstock\n,\n            \noptions\n:{\n              \naxis\n:{\n                \nx\n:{\n                  \ndate\n:{\n                    \nunit\n:\ndays\n,\n                    \nstep\n:1,\n                    \ncode\n:\ndd\n\n                  }\n                }\n              }\n            }\n          },\n          \nname\n: \nStocks\n\n        }\n\n\n\n\nwill result in:\n\n\n\n\n6.1.4.11 Combining Charts\n\n\nIt is possible to combine multiple charts. For example a column and a line chart. If a second value axis is wished on the right side then the values should be given as y2 instead of y. The type should be \"multiple\" and the chart should contain a multiples array which contains the different charts defined previously. It is possible to combine more than 2 types of chart but there can only be two value axis. An example is given below:\n\n\n    \nchart\n: {\n        \nmultiples\n: [\n            {\n                \ncolumns\n: [\n                    {\n                        \ndata\n: [\n                            {\n                                \nx\n: \nday 1\n,\n                                \ny\n: \n4.3\n\n                            },\n                            {\n                                \nx\n: \nday 2\n,\n                                \ny\n: \n2.5\n\n                            },\n                            {\n                                \nx\n: \nday 3\n,\n                                \ny\n: \n3.5\n\n                            }\n                        ],\n                        \nname\n: \nbar 1\n\n                    },\n                    {\n                        \ndata\n: [\n                            {\n                                \nx\n: \nday 1\n,\n                                \ny\n: \n2.4\n\n                            },\n                            {\n                                \nx\n: \nday 2\n,\n                                \ny\n: \n4.4\n\n                            },\n                            {\n                                \nx\n: \nday 3\n,\n                                \ny\n: \n1.8\n\n                            }\n                        ],\n                        \nname\n: \nbar 2\n\n                    }\n                ],\n                \ntype\n: \ncolumn\n\n            },\n            {\n                \nlines\n: [\n                    {\n                        \ndata\n: [\n                            {\n                                \nx\n: \nday 1\n,\n                                \ny2\n: \n43\n\n                            },\n                            {\n                                \nx\n: \nday 2\n,\n                                \ny2\n: \n25\n\n                            },\n                            {\n                                \nx\n: \nday 3\n,\n                                \ny2\n: \n35\n\n                            }\n                        ],\n                        \nname\n: \nline 1\n\n                    },\n                    {\n                        \ndata\n: [\n                            {\n                                \nx\n: \nday 1\n,\n                                \ny2\n: \n24\n\n                            },\n                            {\n                                \nx\n: \nday 2\n,\n                                \ny2\n: \n44\n\n                            },\n                            {\n                                \nx\n: \nday 3\n,\n                                \ny2\n: \n18\n\n                            }\n                        ],\n                        \nname\n: \nline 2\n\n                    }\n                ],\n                \ntype\n: \nline\n\n            }\n        ],\n        \noptions\n: {\n            \nborder\n: true,\n            \ngrid\n: true,\n            \nheight\n: 700,\n            \nlegend\n: {\n                \nposition\n: \nr\n,\n                \nshowLegend\n: true\n            },\n            \ntitle\n: false,\n            \nwidth\n: 500\n        },\n        \ntype\n: \nmultiple\n\n    }\n\n\n\n\n\nwill result in:\n\n\n\n\nThe following SQL can be used:\n\n\nselect\n    'file1' as \nfilename\n,\n    cursor(select  \n             cursor(select\n                      c.cust_first_name || ' ' || c.cust_last_name as \ncustomer\n,\n                      c.cust_city                                  as \ncity\n    ,\n                      o.order_total                                as \ntotal\n   ,\n                      o.order_timestamp                            as \ntimestamp\n\n                      from demo_customers c, demo_orders o\n                     where c.customer_id = o.customer_id\n                     order by c.cust_first_name || ' ' || c.cust_last_name\n             ) as \nreport\n,\n             cursor(select\n                      'multiple' as \ntype\n,\n                      'My Combo: Column with Line Chart' as \nname\n,   \n                      cursor(select\n                               576     as \nwidth\n ,\n                               336     as \nheight\n,\n                               'Title' as \ntitle\n ,\n                               'true'  as \ngrid\n,\n                               'true'  as \nborder\n,\n                               cursor(select\n                                 'true' as \nshowLegend\n,\n                                 'r' as \nposition\n\n                                 from dual\n                               ) as \nlegend\n\n                             from dual\n                      ) as \noptions\n,\n                      cursor(select\n                               tp as \ntype\n,\n                               cursor(select\n                                 nm as \nname\n,\n                                 cursor(select to_char(o.order_timestamp, 'MON RRRR') \nlabel\n, \n                                               to_char(o.order_timestamp, 'MON RRRR') \nx\n,\n                                               sum (decode(p.category,nm,oi.quantity * oi.unit_price,0)) \ny\n\n                                          from demo_product_info p, demo_order_items oi, demo_orders o\n                                         where oi.product_id = p.product_id\n                                           and o.order_id = oi.order_id\n                                         group by to_char(o.order_timestamp, 'MON RRRR'), to_char(o.order_timestamp, 'RRRR MM')\n                                         order by to_char(o.order_timestamp, 'RRRR MM')\n                                 ) as \ndata\n\n                                 from (select 'Mens' nm from dual union all select 'Womens' nm from dual )\n                                 where tp = 'column'\n                               ) as \ncolumns\n,\n                               cursor(select\n                                 nm as \nname\n,\n                                 cursor(select to_char(o.order_timestamp, 'MON RRRR') \nlabel\n, \n                                               to_char(o.order_timestamp, 'MON RRRR') \nx\n,\n                                               sum (decode(p.category,nm,oi.quantity * oi.unit_price,0)) \ny\n\n                                          from demo_product_info p, demo_order_items oi, demo_orders o\n                                         where oi.product_id = p.product_id\n                                           and o.order_id = oi.order_id\n                                         group by to_char(o.order_timestamp, 'MON RRRR'), to_char(o.order_timestamp, 'RRRR MM')\n                                         order by to_char(o.order_timestamp, 'RRRR MM')\n                                 ) as \ndata\n\n                                 from (select 'Accessories' nm from dual)\n                                 where tp = 'line'\n                               ) as \nlines\n\n                             from (select 'column' tp from dual   union all   select 'line' tp from dual)\n                       ) as \nmultiples\n\n                     from dual\n             ) as \nchart\n\n           from dual\n    ) as \ndata\n\n  from dual\n  ```\n\n### 6.1.5 D3 (Data Driven Documents) images\n\nWith Word/Excel/PowerPoint documents, it's possible to let AOP execute some JavaScript code to generate a D3 image.\n\nGiven the JSON file with following content:\n\n```json\n{\n    ...\n    \nfiles\n: [{\n            \nfilename\n: \noutput\n,\n            \ndata\n: {\n                \ntest\n: \nCODE\n\n            }\n    }]\n}\n\n\n\n\nWith as (JSON-encoded) code:\n\n\n// Based on https://bl.ocks.org/mbostock/7f5f22524bd1d824dd53c535eda0187f\nconst d3 = require('d3');\nconst D3Node = require('d3-node')\nconst d3n = new D3Node()\n\nconst svg = d3n.createSVG(512, 512);\nconst [width, height] = [512, 512];\nconst margin = { top: 20, right: 30, bottom: 30, left: 40 };\n\nvar x = d3.scaleLog().domain([2e-1, 5e0])\n  .rangeRound([margin.left, width - margin.right]);\nvar y = d3.scaleLog().domain([3e2, 2e4])\n  .rangeRound([height - margin.bottom, margin.top]);\nvar color = d3.scaleSequential(d3.interpolateYlGnBu).domain([0, 1.8]); // Points per square pixel.\n\nsvg.append(\ng\n)\n  .attr(\ntransform\n, \ntranslate(0,\n + (height - margin.bottom) + \n)\n)\n  .call(d3.axisBottom(x).ticks(null, \n.1f\n))\n  .select(\n.tick:last-of-type text\n)\n  .select(function () { return this.parentNode.appendChild(this.cloneNode()); })\n  .attr(\ny\n, -3).attr(\ndy\n, null)\n  .attr(\nfont-weight\n, \nbold\n).text(\nCarats\n);\n\nsvg.append(\ng\n)\n  .attr(\ntransform\n, \ntranslate(\n + margin.left + \n,0)\n)\n  .call(d3.axisLeft(y).ticks(null, \n.1s\n))\n  .select(\n.tick:last-of-type text\n)\n  .select(function () { return this.parentNode.appendChild(this.cloneNode()); })\n  .attr(\nx\n, 3).attr(\ntext-anchor\n, \nstart\n)\n  .attr(\nfont-weight\n, \nbold\n).text(\nPrice (USD)\n);\n\nd3.tsv(\nhttps://bl.ocks.org/mbostock/raw/7f5f22524bd1d824dd53c535eda0187f/diamonds.tsv\n, d =\n ({ carat: +d.carat, price: +d.price }), (error, diamonds) =\n {\n  if (error) throw error;\n  if (diamonds[0] instanceof Error) throw diamonds[0];\n  svg.insert(\ng\n, \ng\n).attr(\nfill\n, \nnone\n)\n    .attr(\nstroke\n, \n#000\n).attr(\nstroke-width\n, 0.5)\n    .attr(\nstroke-linejoin\n, \nround\n).selectAll(\npath\n)\n    .data(d3.contourDensity()\n      .x(d =\n x(d.carat)).y(d =\n y(d.price))\n      .size([width, height]).bandwidth(10)\n      (diamonds))\n    .enter().append(\npath\n)\n    .attr(\nfill\n, d =\n color(d.value))\n    .attr(\nd\n, d3.geoPath());\n  finish(d3n);\n});\n\n\n\n\nAnd a Word document containing \n{?d3 test}\n would produce the following result:\n\n\n\nShould a field \n\"test_data\": [1,2,3]\n be present in the JSON (at the same place as \n\"test\": \"CODE\"\n), then the code will have access to the global \ndata\n which would be \n[1,2,3]\n, or whatever \n\"test_data\"\n is. String, booleans, nunbers and objects are also possible.\n\n\n6.1.5.1 Code structure\n\n\nThis is how the code is supposed to be organized:\n\n\n// Import D3\nconst d3 = require('d3');\n// Import D3-Node\nconst D3Node = require('d3-node');\n// Instantiate a new D3Node, which will provide the SVG and will be required to finish\nconst d3n = new D3Node();\n// Create a SVG (instead of selecting one from the (here non-existing) document)\nconst svg = d3n.createSVG(512, 512); // Different sizes are possible\n// Start working on the SVG\nsvg.append('g').text('Test');\n//  etc\n// We can access the _data field if it was given:\nsvg.append('g').text(data ? data.toString() : 'No data passed!');\n// When the SVG is finished, call the global finish() with the used D3Node object\nfinish(d3n);\n// We can also call the global fail() (or throw an error) should something fail:\nfail(new Error('We are missing something!'));\n\n\n\n\n6.1.5.2 Specifications and limitations\n\n\n\n\nThe d3 library is version 4.12.0\n\n\nd3-contour and d3-scale-chromatic (along with all default 4.12.0 submodules) are preloaded, e.g. \nd3.contour()\n is available\n\n\nThe code is run in an async environment, meaning \nawait\n is available\n\n\nThe code has to either have a return statement with a D3Node object, or call finish() with one\n\n\nAfter the code has succesfully finished, the SVG will be extracted from the D3Node, converted to PNG and pasted in the Word/Excel/...\n\n\nES2015, ES2016 and ES2017 are supported, run inside a Node environment\n\n\nOnly d3 libraries (including sub-libraries like d3-polygon) can be returned by require()\n\n\nd3-request can only use http:// and https:// URLs\n\n\nThere are time limitations, e.g. the whole script will time out after 30s, even when it's still fetching data over HTTP(S)\n\n\nAll errors are caught and will cause the whole PrintJob to fail. The stacktrace will be shown\n\n\n\n\n6.1.6 {#data_loop} \u2026 {/data_loop} tags\n\n\nUsing the opening tag \n{#data_loop}\n and closing tag \n{/data_loop}\n, we can loop inside the JSON array named \"data_loop\", meaning the items that are inside the tags will be repeated for each array element. Again like in image tag \"data_loop\" is a variable. A loop tag is represented by \"#\" after the curly bracket.\n\n\n6.1.6.1 General Data loop example\n\n\nGiven the JSON file with following content:\n\n\n    {\n        ...\n        \nfiles\n:[{\n               \nfilename\n           :\noutput\n,\n                \ndata\n:[{\n                       \npeople\n:[{\n                              \nfirst_name\n :\nDemoName1\n,\n                              \nlast_name\n  :\nDemoLastName1\n,\n                              \ncity\n       :\nDemoCity1\n},\n                       {\n                              \nfirst_name\n :\nDemoName2\n,\n                              \nlast_name\n  :\nDemoLastName2\n,\n                              \ncity\n       :\nDemoCity2\n},\n                       {\n                              \nfirst_name\n :\nDemoName3\n,\n                              \nlast_name\n  :\nDemoLastName3\n,\n                              \ncity\n       :\nDemoCity3\n}\n                       ]\n                }]\n        }]\n    }\n\n\n\n\nand template.docx with following content:\n\n\nThe name of the employees are:\n{#people}{first_name}{last_name} from city {city}.\n{/people}\n\n\nwill result in:\n\n\nThe name of the employees are:\nDemoName1 DemoLastName1 from City DemoCity1.\nDemoName2 DemoLastName2 from City DemoCity2.\nDemoName3 DemoLastName3 from City DemoCity3.\n\n\n6.1.6.2 Loops in table example\n\n\nUsing the previous data, if the template is changed to:\n\n\n\n\nthe result will then be:\n\n\n\n\n6.1.6.3 Loops with numbering example\n\n\nUsing the previous data, if the template is changed to:\n\n\n\n\nthe result will be:\n\n\n\n\n6.1.6.4 Loops in bullets\n\n\nThe same can be done with bullets:\n\n\n\n\nwill result in:\n\n\n\n\n6.1.6.5 Math operations during a loop\n\n\nNumeric operations inside a loop are supported by using the \n|\n operator. The following operations are supported: \n\n \n|sum\n, calculates the total sum of a numeric property during a loop.\n\n \n|avg\n, calculates the total average of a numeric property during a loop.\n\n \n|min\n, returns the minimum numeric value of a property during a loop.\n\n \n|max\n, returns the maximum numeric value of a property during a loop.\n\n\nThe following template is given: \n\n\n\n\nResults in: \n\n\n\n\n6.1.7 Horizontal Tabular Looping\n\n\nSince verion 18.1 AOP also supports horizontal tabular looping using the {:horizontal_loop} ... {/horizontal_loop} tags. However this tag can be used to repead only one row. Following is an example on how this could be used:\n\n\n\n6.1.8 Simple angular like expressions\n\n\nSimple angular like expressions are also supported that can perform simple mathematical operations.\n\n\nA full list of Angular expression can be found at \nhttps://docs.angularjs.org/guide/expression\n.\n\n\n6.1.8.1 Simple Expressions\n\n\nExpressions like \n{num1 + num2}\n will print the sum of num1 and num2.\nDivision, multiplication, addition and subtraction are allowed.\n\n\nIf the given key has a boolean value then you can use \n{#boolean key}\u2026{/boolean key}\n to print the content inside tags if the value of boolean key is \ntrue\n. For negation \n{^boolean key}\u2026{/boolean key}\n is used. The content inside these tags will be printed if the boolean key has \nfalse\n as value or if boolean key does not exists or if boolean key is an empty array.\n\n\n6.1.8.2 String/Number Comparison\n\n\nYou can also check the value of keys with \n{#key=='value'}\u2026{/key=='value'}\n. The content inside the tags will be only printed if the value of the key is equal to \"value\". Note here in \n{#key=='value'}\n, that straight single quotes are used!\n\n\nThe numbers can also be compared in the same way as strings \n{#key\n;50}\u2026{/key\n;50}\n.The content inside the tags will be only printed if the value of the key is greater than 50. The following operators are supported: \n, \n, \n=, \n=, ==, !=\n\n\n6.1.8.3 Conditional and Comparison operator\n\n\nAnother way to compare variables is as follows: \n{key == 'value' ? key2 : key3}\n. This way other keys/variables can also be inserted. This will print out value of key2 if the expression is true and key3 if the expression is false.\n\n\nPossible conditional operators are:\n\n\n\n\nEqual: == (equal to) or === (equal value and equal type)\n\n\nNot Equal: != or !== (not equal value or not equal type)\n\n\nAnd: \n\n\nOr: ||\n\n\nGreater than: \n\n\nLess than: \n\n\nGreater than or equal: \n=\n\n\nLess than or equal: \n=\n\n\n\n\n6.1.8.4 Conditional example\n\n\nFor the JSON given in example below {currency == 'EUR' ? '\u20ac'+price : price+'$'} prints \u20ac50 if true and 50$ if false and given price variable is 50.\n\n\nGiven the JSON file with following content:\n\n\n    {\n        ...\n                 \ndata\n:[{\n                       \nproduct\n:[{\n                              \nproduct_name\n :\nBusiness Shirt\n,\n                              \nquantity\n     :3,\n                              \nunit_price\n   :50,\n                              \nonstock\n      :true,\n                              \ncur\n          :\nEUR\n\n                       },\n                       {\n                              \nproduct_name\n :\nTrousers\n,\n                              \nquantity\n     :3,\n                              \nunit_price\n   :80,\n                              \nonstock\n      :false,\n                              \ncur\n          :\nUSD\n\n                       },\n                       {\n                              \nproduct_name\n :\nJacket\n,\n                              \nquantity\n     :3,\n                              \nunit_price\n   :15,\n                              \nonstock\n      :true,\n                              \ncur\n          :\nUSD\n\n                       },\n                       {\n                              \nproduct_name\n :\nBlouse\n,\n                              \nquantity\n     :3,\n                              \nunit_price\n   :60,\n                              \nonstock\n      :false,\n                              \ncur\n          :\nEUR\n\n                       }]\n                }]\n    }\n\n\n\n\nand template with following content:\n\n\n\n\nwill result in:\n\n\n\n\nAngular expressions can also be used inside floating texts. Below an example where the images are put inside floating textbox and are shown under condition.\n\n\n\n\n6.1.9 Labels printing\n\n\nAOP\n also provides a way to print the labels in word document. To do so you can create a document with labels from going to Mailings options and then to Labels. Fill in the tags in address field and choose the type of label by clicking in Label option. A document can then be generated by clicking New document.\nCurrently however if labels are getting printed then we expect the document only containing labels and no other information, and that the tag keys are not used more than once.\nGiven the JSON file:\n\n\n    ...\n        \ndata\n: {\n            \nlabels\n: [\n                {\n                    \ncity\n: \ncity1\n,\n                    \nfirst_name\n: \nfirstname1\n,\n                    \nlast_name\n: \nlastname1\n,\n                    \ntitle\n: \nMr.\n,\n                    \ntracking_number_text\n: \nTN49775377172\n,\n                    \ntracking_number\n: \nTN49775377172\n,\n                    \ntracking_number_type\n: \ncode128\n,\n                    \nzip_code\n: 6981\n                },\n                ...\n                {\n                    \ncity\n: \ncity12\n,\n                    \nfirst_name\n: \nfirstname12\n,\n                    \nlast_name\n: \nlastname12\n,\n                    \ntitle\n: \nMr.\n,\n                    \ntracking_number_text\n: \nTN49709864775\n,\n                    \ntracking_number\n: \nTN49709864775\n,\n                    \ntracking_number_type\n: \ncode128\n,\n                    \nzip_code\n: 9740\n                }\n            ]\n        }\n    ...\n\n\n\n\nand template:\n\n\n\n\nwill produce:\n\n\n\n\nNote that in the first cell you need to add the {labels} tag. See also the Sample app.\n\n\n6.1.10 HTML tag\n\n\nHTML tags can also be converted to Word. The tag that has to be used is \n{_key}\n, thus underscore followed by the key which has HTML content in JSON. The tags that are currently supported are:\n\n\nbr /\n                     : in order to introduce breaks (newline)\n\np\n .. \n/p\n                : represents a paragraph\n\nstrong\n .. \n/strong\n      : bold text\n\nb\n .. \n/b\n                : bold text\n\ns\n .. \n/s\n                : strike through\n\nu\n .. \n/u\n                : underline\n\nem\n .. \n/em\n              : italics\n\nh1\n .. \n/h1\n              : heading 1\n\nh2\n .. \n/h2\n              : heading 2\n\nh3\n .. \n/h3\n              : heading 3\n\nh4\n .. \n/h4\n              : heading 4\n\nh5\n .. \n/h5\n              : heading 5\n\nh6\n .. \n/h6\n              : heading 6\n\nsub\n .. \n/sub\n            : subscript\n\nsup\n .. \n/sup\n            : superscript\n\nol\n .. \n/ol\n              : ordered list\n\nul\n .. \n/ul\n              : unordered list\n\nli\n .. \n/li\n              : list item\n\ntable\n .. \n/table\n        : table (including th, tr, td)\n\ncaption\n .. \n/caption\n    : caption\n\nimg\n                      : image\n\npre\n .. \n/pre\n            : preformatted text\n\n\nspan style=\"..\"\n..\n/span\n : text between the span will have the style defined, background-color, color, font-size and font-family are supported.\n\n\n\nEg:\nGiven the following key inside data:\n\n\n    \nhtmlcontent\n: \np\nThis is text coming from the database / session in HTML format.\n    \nbr /\nIt supports:\n    \n/p\n\n    \nol\n\n    \nli\nLists\n/li\n\n    \nli\nstrong\nBold\n/strong\n/li\n\n    \nli\nem\nItalic\n/em\n/li\n\n    \nli\nu\nUnderline\n/u\n/li\n\n    \nli\ns\nStrikethrough\n/s\n/li\n\n    \nli\nSub\nsub\nscript\n/sub\n/li\n\n    \nli\nsup\nSuper\n/sup\nscript\n/li\n\n    \nli\nspan style=\ncolor:#FF0000\nText Color\n/span\n/li\n\n    \nli\nspan style=\nbackground-color:#FFFF00\nBackground Text Color\n/span\n\n    \n/li\n\n    \n/ol\n\n\n    \nh1\nHeading 1\n/h1\n\n    \nh2\nHeading 2\n/h2\n\n    \nh3\nHeading 3\n/h3\n\n    \nh4\nHeading 4\n/h4\n\n    \np\nNormalt text with\nspan style=\nfont-family:comic sans ms,cursive\n Font Change\n/span\n/p\n\n    \np\nspan style=\nfont-family:courier new,courier,monospace\nCode font\n/span\n\n    \n/p\n\n\n\n\n\nand the template:\n\n\n\n\nwill produce:\n\n\n\n\n6.1.11 Interactive Report (IR) tag\n\n\n{\ninteractive} will be replaced in the given template by the interactive report that has been selected in APEX.\nOther than the simple interactive report, there are three other options that can be selected: Control Break, Group By, Pivot. Those will be illustrated below.\nKeep in mind that the tag that gets replaced is {\ninteractive}, no matter which of the above options is selected in APEX.\nFor a concrete example, see section 11.\n\n\nControl Break:\n\nBy clicking on Actions and selecting Control Break, one or more columns can be selected on which the table should be broken. For the purpose of illustration, assume we select Quantity.\n\n\n\n\nThis splits the table up into partitions based on the value of the selected column. Thus rows sharing the same value for Quantity, will be grouped together into the same partition.\nThe resulting table can be seen below:\n\n\n\n\nAs a final note, this option also supports the application of aggregates on the table data.\n\n\nGroup By:\n\nBy clicking on Actions and selecting Group By, one or more columns can be selected on which the table data should be grouped by. For the purpose of illustration, assume we select Quantity. Furthermore, one or more functions can be applied on the table data. In this example, we request the sum of the unit price for every group.\n\n\n\n\nThe result is a new table with one column for every selected column on which the data should be grouped by, and one column for every selected function to be applied on the group data.\n\n\nThe resulting table can be seen below:\n\n\n\n\nAdditionally, a custom label and format may be selected for each function column and a sum can be performed over the values of each function column.\n\n\nPivot:\n\nBy clicking on Actions and selecting Pivot, the user is prompted to select at least one pivot column, at least one row column and at least one function over a particular column.\nImportant to note is that the row column, pivot column and function column need to be different.\nFor the sake of the example, we select Quantity as a pivot column, Product Name as a row column and sum over Unit Price as a function.\n\n\n\n\nThe resulting table can be seen below:\n\n\n\n\nThe additional options supported in this case are the same as the ones in Group By.\n\n\nChart:\n\nAOP can also print your Interactive Report Chart view directly in your template by using {\\$interactive}.\n\n\n\n\nThe result in Powerpoint can be seen below:\n\n\n\n\nNote that this is a native Powerpoint chart, so you can adapt, make bigger, change colors, etc. directly in Powerpoint.\n\n\n6.1.12 Multiple Interactive Reports in one template\n\n\nIn this case, the template needs to have tags of the form {\ninteractive_1},{\ninteractive_2} and these tags will be replaced by the corresponding interactive reports. Many interactive reports can be selected by giving in their static IDs in a particular order (ir1,ir2,...) and it is in that order that their data will be inserted in the template. Thus, {\ninteractive_1} gets replaced by the data in the first interactive report (static Id: ir1) and similarly for {\ninteractive_2} that will get replaced by the data in the second interactive report (static Id: ir2) and so on.\n\n\n\n\nThe result can be seen below:\n\n\n\n\n6.1.13 Table cell background\n\n\nYou can give a background to a cell in a table in Word by using the column followed by _cell_background_color. The tag in the template should end with a $.\n\n\n cursor(select p.product_name as \nproduct_name\n,\n                              i.quantity as \nquantity\n,\n                              case\n                              when i.quantity between 1 and 2 then '#00FF00'\n                              when i.quantity between 2 and 3 then '#00FF00'\n                              else '#0000FF'\n                              end as \nquantity_cell_background_color\n,\n                              i.unit_price as \nunit_price\n\n                         from demo_order_items i, demo_product_info p\n                        where o.order_id = i.order_id\n                          and i.product_id = p.product_id\n                      ) \nbackcolor\n\n\n\n\n\n6.1.14 Right to Left tag\n\n\nIn word when substituting the content in language written in right to left like arabic, the {\nrightToLeft} tag can be used to properly format the language. If the susbstuting content does not contain any right to left language character then it will behave as normal substitution tag.\n\n\n6.1.15 Footnote tag\n\n\nA footnote tag can be used to insert footnote. The tag should start with \"+\" symbol. For example given the following template:\n\n\n\n\nand the data as follows:\n\n\n{\n    \nquote\n:\nOnly I can change my life. No one can do it for me.\n,\n    \nperson\n:\nCarol Burnett\n\n}\n\n\n\n\nwill result in:\n\n\n\n\n6.1.16 Hyperlink tag\n\n\nSince AOP3.3 hyperlink feature is added using a tag that start  with a * like: {*tag}. Given the template:\n\n\n\n\nAnd the data:\n\n\n{\n  \nname\n: \nSupport\n,\n  \ncompany_url\n: \nhttps://www.apexofficeprint.com\n,\n  \ncompany_url_text\n: \nAPEX RND\n,\n  \nmail\n: \nsupport@apexofficeprint.com\n\n}\n\n\n\n\nwill result in:\n\n\n\n\nThe mail hyperlinks are automatically detected and mailto: will be appended for the link to work. The hyperlink text can be given by giving extra data that ends with _text. e.g: {*tag_text}. (see json above).\n\n\nThis hyperlink will also work when output pdf is wished.\n\n\nPlease note that in Excel the hyperlink will be added but the style will remain normal. You can change the tag style in template if another styling is wished. In Word your defalt hyperlink styling will be taken. If you wish another styling, you can change the style of the tag and add tag_preserve_tag_style:true options in the data.\n\n\n6.1.17 Table Of Content\n\n\nAOP versions greater than 3.5, also support generation of table of content in Word. Placing the {~} tag will generate table of content at the place where this tag is used. \n\n\n6.1.18 Word Subtemplating\n\n\nInside Word documents, the tag \n{?include NAME}\n is available.\n\n\nGiven the following JSON:\n\n\n{\n    ...\n    \ntemplate\n: {\n        \nfilename\n: \nTemplate\n,\n        \nfile\n: \nUEsDBBAQBgQ...\n,\n        \ntemplate_type\n: \ndocx\n\n    },\n    \ntemplates\n: [\n        {\n            \nname\n: \nSubtemplate1\n,\n            \nmime_type\n: \napplication/vnd.openxmlformats-officedocument.wordprocessingml.document\n,\n            \nfile_source\n: \nbase64\n,\n            \nfile_content\n: \nUEsDBBAQBgAIAA...\n\n        }\n    ]\n}\n\n\n\n\nwith the template containing \n{?include Subtemplate1}\n would replace the tag with the contents of the subtemplate.\n\n\nThis tag can be used inside loops, and tags inside the subtemplate will also be replaced.\n\n\nFor example:\n\n\n{#products}\nProduct {name}\n    {?include Subtemplate1}\n{/products}\n\n\n\n\nShould the subtemplate just consist of the content \nAmount: {amount}\n, then this could be an example result:\n\n\nProduct Product1\n    Amount: 5\nProduct Product2\n    Amount: 36\n\n\n\n\nThis tag is currently only available inside Word templates, and the subtemplates currently can only be Word documents (templates) too.\n\n\n6.2 Powerpoint (pptx) template\n\n\nFor pptx template files same tags are supported as in docx template.\nAttention should be paid when using \n\"#\"\n, \n\"%\"\n, \n\"\\$\"\n  and \n\"\\^\"\n tags, namely they should be on their own text field. The position of the text field will determine where the top left of the chart and image will start. Repeating a template slide is done by specifying which array should be looped with \n\"!\"\n tag after the curly bracket for example \n{!products}\n to repeat over product array. If none is declared the root object is taken as array. Multiple \n\"!\"\n tags are not allowed in one slide.\n\n\nGiven the JSON file with following content:\n\n\n    {\n        \ntemplate\n: {\n            \ntemplate_type\n: \npptx\n,\n            \nfilename\n: \ndemo.pptx\n\n        },\n        \noutput\n: {\n            \noutput_encoding\n: \nraw\n,\n            \noutput_type\n: \npptx\n\n        },\n        \nfiles\n: [\n            {\n                \nfilename\n: \noutput\n,\n                \ndata\n: [\n                    {\n                        \nslide_title\n: \nSlides Per Product\n,\n                        \ncompany_name\n: \nCompany A\n,\n                        \nproduct\n: [\n                            {\n                                \nproduct_name\n: \nBusiness Shirt\n,\n                                \nquantity\n: 3,\n                                \nunit_price\n: 50\n                            },\n                            {\n                                \nproduct_name\n: \nTrousers\n,\n                                \nquantity\n: 3,\n                                \nunit_price\n: 80\n                            },\n                            {\n                                \nproduct_name\n: \nJacket\n,\n                                \nquantity\n: 3,\n                                \nunit_price\n: 15\n                            },\n                            {\n                                \nproduct_name\n: \nBlouse\n,\n                                \nquantity\n: 3,\n                                \nunit_price\n: 60\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n\n\n\n\nand the pptx template as follows:\n\n\n\n\n\n\nwill result the following for the first slide:\n\n\n\n\nSince there is only one item in root JSON object this is repeated only once. In template slide 2 we have specified product array as our loop array with {!product} tag. Since there are 4 objects in our product array this template will be repeated four times. The result is as follows:\n\n\n\n\n\n\n\n\n\n\n6.3 Excel (xlsx) template\n\n\nIn the xslx templates, some of the same tags as the previous types of templates can be used, as shown in the overview table at the start of this section. The JSON format should contain the same meta information elements (e.g. template_type, filename, \u2026) and the data information is stocked under \nfiles/data\n.\n\n\nRegular tags can be used with corresponding keyword in the JSON file between brackets, like in the docx and pptx templates. The xlsx templates can loop over elements in a list by using the same technique as in the docx template: {#loop_element} to enter the loop and {/loop_element} to close it. The cells that are in the rectangle bounded by these two tags will be looped over and filled in using the data available in the JSON file. Nested loops are possible (however keep in mind to remain within the rectangle formed by the \"parent\" loop \u2013 see note after example below). Style will be copied from the template to the generated file accordingly. As with the docx templates, simple angular expressions can be used to perform mathematical operations.\n\n\nXlsx example:\n\n\nGiven the JSON file with following content:\n\n\n    {\n        \ntemplate\n: {\n        \ntemplate_type\n: \nxlsx\n,\n        \nfilename\n: \nsimple.xlsx\n\n        },\n        \noutput\n: {\n        \noutput_encoding\n: \nraw\n,\n        \noutput_type\n: \nxlsx\n\n        },\n        \nfiles\n: [\n        {\n            \nfilename\n: \nfile1\n,\n            \ndata\n: [\n                {\n                    \ncust_first_name\n: \nAlbert\n,\n                    \ncust_last_name\n: \nLambert\n,\n                    \ncust_city\n: \nSt. Louis\n,\n                    \norders\n: [\n                        {\n                            \norder_total\n: 310,\n                            \norder_name\n: \nCasual Shop's Order\n,\n                            \nproduct\n: [\n                                {\n                                    \nproduct_name\n: \nShirt\n,\n                                    \nquantity\n: 3,\n                                    \nunit_price\n: 50\n                                },\n                                {\n                                    \nproduct_name\n: \nTrousers\n,\n                                    \nquantity\n: 2,\n                                    \nunit_price\n: 80\n                                }]\n                        },\n                        {\n                            \norder_total\n: 200,\n                            \norder_name\n: \nSport Shop's order\n,\n                            \nproduct\n: [\n                                {\n                                    \nproduct_name\n: \nSport's shoes\n,\n                                    \nquantity\n: 2,\n                                    \nunit_price\n: 100\n                                }]\n                        }]\n                }]\n        }]\n    }\n\n\n\n\nand the xlsx template as follows:\n\n\n\n\nNote: in the example above the {/orders} closing tag must be in the last column. Otherwise the child loops inside {#orders}\u2026{/orders}, in this case {#product}\u2026{/product}, would not be able to generate inside the rectangle formed between the tags of its parent loop ({#orders}\u2026{/orders}).\n\n\nInteractive Report in Excel:\n\nAs of version 2.2, all of the functionalities supported in Word regarding the interactive report are also supported in Excel.\nFor the purpose of illustration, let's take this template as input:\n\n\n\n\nThe resulting output is then:\n\n\n\n\nAOP 3.0 and above also supports cell settings from JSON by using _ for your tag.\nFor example when you have a column \"tag\", if you use \"tag_font_color\" : \"#1782A6\" it will set the Font color.\nWhen using \"tag_cell_background\":\"#1DF248\" you set the background color, when using \"text_wrap\":\"y\" will set if text is wrapped etc. A full list of features can be found in the Sample App for APEX 5.1.\nWith AOP 3.3 and above you can also generate sheets automatically by using {!tag} in A1 field.\n\n\n6.4 QRCode Image Replacing\n\n\nAOP also allows you replace a QRcode image with another image. The qr code can contain the image tags and barcode tags, i.e {%key} or {|key}. This method can be used if you are inserting a floating image, or need to have certain border styles on the image. The tag replacing will work as look as there are no artistic effects used for the image themselves. \n\n\nPlease note that the scope always starts at the default place, so the {#loop} tags have no effect. \n\n\n\n\n6.5 Converter\n\n\nThis feature only works when the output_type is pdf\n\n\nAOP has the ability to convert several types of files and/or append/prepend them to the outputted files.\n\n\n6.5.1 Appending/prepending files\n\n\nAll append/prepend files will first be converted to PDF, after which the pages (as a whole) will be prepended/appended to the outputted files. E.g. images will appear on their own page, \nnot\n \"pasted\" into the template file.\n\n\n6.5.1.1 General structure\n\n\nThe JSON sent to AOP will have this structure:\n\n\n{\n    ...\n    \ntemplate\n: { ... },\n    \noutput\n: {\n        \noutput_encoding\n: \nbase64\n,\n        \noutput_type\n: \npdf\n // Converter functionality only works with PDF as output_type\n    },\n    \nfiles\n: [\n        {\n            \ndata\n: { ... },\n            \nfilename\n: \nFile1\n\n        },\n        {\n            \ndata\n: { ... },\n            \nfilename\n: \nFile2\n\n        },\n        ...\n    ],\n    \nprepend_files\n: [\n        // Array of prepend files (see 6.5.1.2 File Structure)\n        { ... },\n        { ... },\n        ...\n    ],\n    \nappend_files\n: [\n        // Array of prepend files (see 6.5.1.2 File Structure)\n        { ... },\n        { ... },\n        ...\n    ]\n}\n\n\n\n\n6.5.1.2 File structure\n\n\n{\n    \nfilename\n: \nFilename\n,\n    \nmine_type\n: \nMIME TYPE\n,\n    // File source can be \nplain\n, \nbase64\n, \nurl\n or \nfile\n,\n    \nfile_source\n: \nFILE SOURCE\n,\n    // Used by \nfile_source\n: \nplain\n and \nbase64\n,\n    \nfile_content\n: \n...\n,\n    // Used by \nfile_source\n: \nurl\n,\n    \nfile_url\n: \nhttp://...\n,\n}\n\n\n\n\n6.5.1.3 Multiple files\n\n\nShould the JSON contain multiple files, e.g. like this:\n\n\n{\n    ...\n    \nfiles\n: [\n        {\n            \ndata\n: { ... },\n            \nfilename\n: \nFile1\n\n        },\n        {\n            \ndata\n: { ... },\n            \nfilename\n: \nFile2\n\n        },\n        ...\n    ],\n}\n\n\n\n\nThen, as might be expected, a zip archive will be returned containing File1.pdf and File2.pdf.\nThe append/prepend files will be appended/prepended to \neach\n file.\n\n\n6.5.2 Converting without template\n\n\nAOP allows converting files without a template, resulting in the append/prepend files being converted and stitched together.\n\n\n6.5.2.1 General structure\n\n\nThe JSON sent to AOP will have this structure:\n\n\n{\n    ...\n    \ntemplate\n: {\n        // This template_type is template-less\n        \ntemplate_type\n: \nconverter\n\n    },\n    \noutput\n: {\n        \noutput_encoding\n: \nbase64\n,\n        \noutput_type\n: \npdf\n // Converter functionality only works with PDF as output_type\n    },\n    // If the files array is empty, it'll default to a file with filename \nConverted\n\n    // Giving (multiple) files will just result in a zip archive with identical files, but with the given names\n    \nfiles\n: [],\n    \nprepend_files\n: [\n        // Array of prepend files (see 6.5.1.2 File Structure)\n        { ... },\n        { ... },\n        ...\n    ],\n    \nappend_files\n: [\n        // Array of prepend files (see 6.5.1.2 File Structure)\n        { ... },\n        { ... },\n        ...\n    ]\n}\n\n\n\n\nShould \n\"files\"\n be empty or only contain one file, and \n\"append_files\"\n or \n\"prepend_files\"\n only contain one file, then the output file will just be that append/prepend file converted to PDF.\n\n\n6.5.3 Supported mime types for converting/appending/prepending\n\n\n\n\nPDF \napplication/pdf\n\n\nText \ntext/plain\n\n\nMarkdown \ntext/markdown\n\n\nHTML \ntext/html\n\n\nWord \napplication/vnd.openxmlformats-officedocument.wordprocessingml.document\n\n\nExcel \napplication/vnd.openxmlformats-officedocument.spreadsheetml.sheet\n\n\nPowerpoint \napplication/vnd.openxmlformats-officedocument.presentationml.presentation\n\n\nJPEG \nimage/jpeg\n\n\nPNG \nimage/png\n\n\nGIF \nimage/gif\n\n\nBMP \nimage/bmp\n\n\nMS-BMP \nimage/x-ms-bmp\n\n\n\n\nMind that tags in append/prepend files will \nnot\n be parsed! Append/prepend files are only converted and appended/prepended to the output files.\n\n\n7 SQL Structure\n\n\n7.1 How to write SQL queries and map them to template documents\n\n\nPlease refer to the image below containing SQL query and matching template.\n\n\nAOP Plug-in supports PL/SQL cursor expressions which can be used in your templates as \"data loops\".\n\n\nLeft side corresponds to the SQL query that we used in our demo example. Right side is our Word template.\n\n\nIn SQL query you will \nnotice three inner cursors called data, orders and product.\n\n\nIdea is for each customer to find orders and products and display it as an invoice letter.\n\n\nData cursor is a standard part of AOP JSON structure and it needs to be present in all SQL queries. At the same time you do not have to specify it as a loop in your template. For more details about this please reference Section 9 of this Manual.\n\n\nOther two cursor names can be of your preference as long as they are reflected in your template.\n\n\nWhy do we have cursor syntax? \n\n\nThis is the way AOP engine merges your data with your templates.\n\n\nIn our template example you want to display customer details (Data cursor) and then display all their orders (Orders cursor) with products (Product cursor) so each represents a separate cursor.\n\n\nThis means that we want to be able to create a loop for orders and a separate loop for products. This is exactly what we have done in this template.\n\n\nThe way AOP template loop works is by using {#loop element}\u2026.{/loop element} notation. In the template notice that we are using the following:\n\n\n\"Thank you for shopping at. We have following products reserved for you:\n\n{#orders}{#product}\n    - {product_name}{/product}\nThe total amount of your order is \u20ac{order_total}.\n{/orders}\"\n\n\n\nFirst open \nOrders\n loop then open \nProduct\n loop then doing a bullet numbering for all products. Before closing the \nProduct\n loop and then closing the \nOrders\n loop.\n\n\nOnce you create your SQL query it is very easy to implement it in your template following few simple tagging rules depending on a template type you are creating.\n\n\n\n\n8 Server (only On-Premise)\n\n\n8.1 Installation\n\n\nAPEX Office Print is using an external converter. By default LibreOffice is used (available on all platforms), but this can be changed to MS Office (Windows only). One of these products must be installed on the same server where you will also install APEX Office Print.\n\n\nYou can register and then login at \nhttps://www.apexofficeprint.com\n. Go to Downloads and download On Premise package for your platform. Currently we support Linux,  Windows and OSX.\n\n\n\n\nUnzip the downloaded file, you will see a directory with the version downloaded version number of AOP e.g v18.1/\n\n\nGo to the version directory/server directory and copy executable file on the server where you want AOP running in a directory of your choice\n\n\nExecutable files:\n\n\n\n\nOSX: APEXOfficePrintOSX64\n\n\nLinux (Redhat): APEXOfficePrintLinux64\n\n\nWindows: APEXOfficePrintWin64\n\n\n\n\nDecide on which port you want to let AOP run. By default it is using port 8010. You can change that later (for example APEXOfficePrintLinux64 -p 5555).\n\n\nIf you want to run the On-Premise Trial version of AOP you can skip the activation step.\nThe on-premise version of AOP in Trial mode will work with Word and PDF, but it contains a trial watermark.\nThe cloud version of AOP (free 100 days) has no limitations.\n\n\n\nFollowing step is only necessary when you bought AOP\n, it's not necessary to run in Trial mode (Linux example):\n\n\n\n\nrun ./APEXOfficePrintLinux64 -a\n\n\nthis will activate the software\n\n\nyou have to enter the email you registered with and it will try to generate the license key. License key will be generated if you have an open connection to the internet. If there\u2019s no internet connection, or something goes wrong with the activation, you can contact support@apexofficeprint.com and send us your MAC address of the server you want to install it on. We\u2019ll send you the license file per email.\n\n\nexit AOP\n\n\n\n\nTo start APEX Office Print:\n\n\n\n\nrun ./APEXOfficePrintLinux64 \n\n\nor if you want it on a different port ./APEXOfficePrintLinux64 -p 8012 \n ( on Linux using \n at the end of the command, will run this command in backround)\n\n\n\n\nPDF\n converter options:\n\n\nLibreOffice can be downloaded from \nhttps://www.libreoffice.org\n. Make sure you download LibreOffice 5 or higher and no older version of LibreOffice is installed. Once the installation of LibreOffice is complete check if you can run \nsoffice --version\n in a terminal.\n\n\nYou should see something like:\n\n\nLibreOffice 5.4.4.2 22b09f6418e8c2d508a9eaf86b2399209b0990f4\n\n\nIf that fails make sure your environment variable PATH contains the directory of LibreOffice (bin directory). You can also create a symbolic link to soffice e.g.\n\n\nln -s /opt/libreoffice5.4/program/soffice /usr/sbin/soffice\n\n\n\nIf you're on Windows, you can choose for LibreOffice or MS Office. In case you want to use MS Office, make sure you have MS Office 2003 or higher installed and also install \nOfficetoPDF\n (direct \ndownload\n), which allows to run conversions from the command line. \nNote: Place the OfficetoPDF executable in the same folder than AOP.\n\n\nAfter installing LibreOffice or MS Office, restart AOP.\n\n\nFrom version 18.1 onwards, it is possible to specify other converters. On the first run of APEXOfficePrint a aop_config.json file is created. Below an example:\n\n\n{\n    \nconverters\n: {\n        \nabiword\n:{\n            \ncommand\n: \nabiword --to={outputFormat} --to-name={outputFile} {inputFile}\n,\n            \nhandlesParallel\n: false\n        },\n        \ncustom2\n:{\n        }\n    }\n}\n\n\n\n\nThis allows for the users to use the converter of their choice. In the command section the following tags will be replaced:\n\n\n{outputFormat}: will be replaced by the output format needed. e.g: pdf \n{outputFile}: the location and filename of the expected output. (includes output extension and is absolute path),\n{inputFile}: the location where the file for the conversion is located. (includes inputformat extenstion and is absolute path)\n{inputFormat}: the intput format of the input file. e.g. docx\n\n\n\n\nThe other option handlesParallel should be true if the specified custom converter is capable of handling multile pdf conversions at the same time.\nIf a custom converter is used and the specified converter cannot handle parallel conversion, then the conversions are placed in a queue and called on first come first serve basis (even when multiple instances of AOP are running).\n\n\nBarcode\n option:\n\n\nBefore AOP 3.1 an external tool needed to be installed to be able to generate barcodes, but since AOP 3.1 and above that is not necessary anymore. All the necessary components are within AOP itself.\n\n\nTesting\n the connection to AOP:\n\n\nMake sure the database server can connect to the port where AOP is running. If not, open the port so the database server can connect to the webserver:port (note you don't need to open it up to everybody, just the database server is fine)\n\n\nFor example by running curl webserver:port (curl can be downloaded for free for windows via \nhttps://curl.haxx.se/download.html#Win64\n)\n\n\n$ curl 127.0.0.1:8010\n\n\nThe installation on the server part is now complete.\n\n\nIn the downloaded zip file there is also a sample application (app directory) that can be imported or you can just import the AOP plug-in (plugin directory) into your application. The only configuration there is to define the webserver:port where AOP is running and which converter you are using (LibreOffice, MS Office). You can do that under Shared Components \n Component Settings. Then select APEX Office Print (AOP) Plug-in, change AOP URL and select appropriate converter.\n\n\n8.2 Configuration\n\n\nFollowing parameters can be used:\n\n\n-p or --port can set a different port the server should be running at\n\n\nExample: to run AOP on port 8015 run:\n\n\nAPEXOfficePrintLinux64 \u2013p 8015 (or ./APEXOfficePrintLinux64 \u2013p 8015)\n\n\n8.3 Unlock Trial version\n\n\nBy default AOP will run in TRIAL version.\n\n\nOnly Word templates can be created in the TRIAL version of AOP. Once you have decided on a license level, the product can be activated by running -a or --activate:\n\n\n\\$ APEXOfficePrintLinux64 \u2013a\n\n\nIt will prompt for an email. Please use the same email you used when you subscribed for a license on \nhttps://www.apexofficeprint.com/\n\n\nWhen running AOP again, it will show the new licensed templates you can use.\n\n\nIf there\u2019s no internet connection, or something goes wrong with the activation, you can contact \n and send us your MAC address of the server you want to install it on. We\u2019ll send you the license file per email. Add that file in the same directory of AOP and restart AOP to get the full version.\n\n\nTo obtain the MAC address you can use following commands:\n\n\n\n\nWindows: ipconfig /all (or nbtstat \u2013a \nip address\n)\n\n\nLinux: ifconfig | grep HWaddr\n\n\nOSX: networksetup -listallhardwareports\n\n\n\n\n8.4 Server Options\n\n\nTo view all available option, run ./APEXOfficePrintLinux64 -h\n\n\nFollowing parameters can be used:                                               \n    -a or --activate         : Activate the software                                \n    -h or --help             : Show this menu                                       \n    -p or --port             : For giving in the running port default: 8010         \n                                Example: APEXOfficePrint -p 5555                     \n    -s or --startat          : Directory to start at.                               \n    --license                : The location of license file.                        \n                                Default looks at the startup directory               \n    --silent                 : Do everything quietly even start message             \n    -v or --version          : Show the current version of AOP                      \n    --verbose                : Log what AOP is currently doing.                     \n    --enable_printlog        : Log data about the printjobs to server_printjob.log. \n    --idle_timeout           : The maximum idle seconds for a request.              \n                            : Default: 2 (pdf conversion time is considered idle)  \n    -i or --instances        : The number of instances of AOP to start              \n                                Giving 0 will start max instances available          \n    --https_cert             : The location of the https certificate                \n    --https_key              : The location of the https private key file           \n    --https_port             : The port for the https server to run on.             \n                                Having a key/cert but no port will make the https    \n                                server use the port from -p/--port (or the default)  \n                                Example: .. -p 80 --https_port 443 -https_key ...    \n                                        http runs on port 80, https on port 443     \n                                Example: .. -p 80 --https_key ...                    \n                                        https runs on port 80, no regular http      \n    --ipwhitelist            : The file to read the IP whitelist from               \n                                If this parameter is empty, but 'ipwhitelist.txt'    \n                                        exists, ipwhitelist.txt will be used        \n                                File format: one IP (range) or subnetwork per line   \n                                Example: 127.0.0.1, abc::0-def::ffff                 \n                                        10.0.0.0/8, 192.0..                       \n    --pdf_error_threshold    : Set the maximum amount of retries for processing a pdf \n                                file.                                                \n    --enable_save            : This enables the option write to disk                \n                                Default: outputfiles dir of AOP directory            \n    --enable_local_resources : This enables accessing local files (e.g. templates)  \n                                Default: outputfiles dir of AOP directory            \n    --check_configuration    : Checks the configurations needed for AOP to run\n\n\n\nSince version 18.2 AOP creates a config file. These options can be saved in this config file. If no config file is there, AOP generates the config file in the first run. \nThis configuration file is of JSON format. The default configuration is as follows:\n\n\n{\n    \nconfig\n: {\n        \nport\n: 8010, // The port where AOP should start. \n        \nstartat\n: \n./\n, // The default location to start at. Handly if you are using local resources. \n        \nlicense\n: \n./aop.license\n, // The location of the license file.\n        \nsilent\n: false,  // If true does not log anything.\n        \nverbose\n: false, // If true logs what it is currently doing. (Ignores silent)\n        \nenable_printlog\n: false, // If true logs the incoming printjobs into a log file. \n        \nidle_timeout\n: 120, // The timeout for conversion in seconds. \n        \ninstances\n: 1, // The number of instace to start. Ideally is equal to number of cores (if 0 AOP detects number of cores).\n        \nhttps_key\n: \n, // The location for the https key for AOP to use when starting in HTTPS mode. \n        \nhttps_cert\n: \n, // The locatio for the https certificate for AOP to use when startin in HTTPS mode. \n        \nhttps_port\n: 433, // The port to use while starting as HTTPS. \n        \nipwhitelist\n: \n, // The location of the ipwhitelist file.\n        \npdf_temp_folder\n: \n, // The temp folder to use when converting to PDF.\n        \npdf_error_threshold\n: 3, // The number of retries after pdf failure.\n        \nenable_save\n: false, // Enables saving output in local directories.\n        \nenable_local_resources\n: false // Enables reading out the templates and resources (for e.g images).\n    },\n    \nconverters\n: { //Placeholder for converters. You can specify your own converters here and pass the value. See section 8.1 for more info. \n        \nabiword\n:{\n            \ncommand\n: \nabiword --to={outputFormat} --to-name={outputFile} {inputFile}\n,\n            \nhandlesParallel\n: false\n        }\n    }\n}\n\n\n\n\n8.5 Running as Service in Windows\n\n\nUsing Microsoft Office as PDF converter\n\n\nIf you wish to use Microsoft office as PDF converter for your documents we have to do some tweaks before we can use ApexOfficePrint as service.\n\n\n32-Bit Windows\n\n\nDirectory Creation\n\n\nCreate a directory \"Desktop\" if it does not already exist under\u00a0\\\n\"C:\\Windows\\system32\\config\\systemprofile\\Desktop\"\n\n\nDCOM config\n\n\n\n\n\n\nFrom Run (Windows + R), type \ndcomcnfg\n\n\n\n\n\n\nNavigate to \nComponent Services \n Computers \n My Computer \n DCOM Config\n\n\n\n\n\n\n\n\nLocate \"\nMicrosoft Excel Application\n\" and right click properties of it\n\n\n\n\n\n\nNavigate to \nSecurity Tab\n and \nCustomize\n the \nLaunch and Activation Permissions\n and Edit\n\n\n\n\n\n\nCheck that no instances of excel.exe are running before changing the properties, either close the applications that are running the Excel or go to task manager and kill the excel.exe processes.\n\n\n\n\n\n\n\n\nAdd\n the \ncurrent user\n (type the current user, click check names, and click ok) and grant \npermission\n for \nLocal Launch\n and \nLocal Activation\n\n\n\n\n\n\nGo to \nIdentity Tab\n and change the radio button to \n\"The User\"\n\n\n\n\n\n\nDo the same for \n\"Microsoft PowerPoint Slide\"\n.\n\n\n\n\n\n\nDo the same for \n\"Microsoft Word 97-2003 Document\"\n.\n\n\n\n\n\n\nSetting directory permissions\n\n\n\n\n\n\nNavigate to: \"C:\\Windows\\System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\".\n\n\n\n\n\n\nRight click and go to Properties\n\n\n\n\n\n\nUnder Security Tab add the current user and grant the Modify, Read \n Execute, List Folder Content, Read, and Write permissions.\n\n\n\n\n\n\nDo the same for \"C:\\Windows\\Temp\\\".\n\n\n\n\n\n\n64-Bit Windows\n\n\nDirectory Creation\n\n\nCreate a directory \"Desktop\" if it does not already exist under:\n\n\n\"C:\\Windows\\system32\\config\\systemprofile\\Desktop\"\nand\n\"C:\\Windows\\SysWOW64\\config\\systemprofile\\Desktop\"\n\n\nDCOM config\n\n\n\n\n\n\nFrom Run (Windows + R), type \ndcomcnfg\n (if your \nMicrosoft Office is 32 bit\n then open command line and change directory to \"\nC:\\Windows\\SysWOW64\n\" and run \"\nmmc comexp.msc /32\" command\n)\n\n\n\n\n\n\nNavigate to \nComponent Services \n Computers \n My Computer \n DCOM Config\n\n\n\n\n\n\n\n\nLocate \"\nMicrosoft Excel Application\n\" and right click properties of it\n\n\n\n\n\n\nNavigate to \nSecurity Tab\n and \nCustomize\n the \nLaunch and Activation Permissions\n and Edit\n\n\n\n\n\n\nCheck that no instances of excel.exe are running before changing the properties, either close the applications that are running the Excel or go to task manager and kill the excel.exe processes.\n\n\n\n\n\n\n\n\nAdd\n the \ncurrent user\n (type the current user, click check names, and click ok) and grant \npermission\n for \nLocal Launch\n and \nLocal Activation\n\n\n\n\n\n\nGo to \nIdentity Tab\n and change the radio button to \n\"The Interactive User\"\n or \n\"The Launching User\"\n (automatic start)\n\n\n\n\n\n\nDo the same for \n\"Microsoft PowerPoint Slide\". \n\n\n\n\nDo the same for \n\"Microsoft 97-2003 Document\". \n\n\n\n\nSetting directory permissions\n\n\nNavigate to:\n\n\n\n\n\n\n\"C:\\Windows\\System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\".\n\n\n\n\n\n\nRight click and go to Properties\n\n\n\n\n\n\nUnder Security Tab add the current user and grant the Modify, Read \n Execute, List Folder Content, Read, and Write permissions.\n\n\nDo the same for:\n\n\n\n\n\n\n\"C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Microsoft\"\n\n\n\n\n\n\nDo the same for \"C:\\Windows\\Temp\\\".\n\n\n\n\n\n\nUsing LibreOffice as pdf converter\n\n\nNo extra steps are necessary.\n\n\nManaging the service\n\n\n\n\n\n\nNavigate to Windows Service folder situated in the APEXOfficePrint folder.\n\n\n\n\n\n\nEdit 1_SetupAsService.bat to include the full path to the executable APEXOfficePrintWin64.exe\n\n\nNote that you can also add additional parameters for example for the port it should run on and the starting directory.\n\n\nterminal\nnssm.exe install APEXOfficePrint %0\\..\\..\\APEXOfficePrintWin64.exe --port 8090 -s D:\\apexofficeprint\n\n\n\n\n\n\nRun 1_SetupAsService.bat.\n\n\n\n\n\n\nThe service should be installed and can be seen in Services (Control Panel \n Administrative Tools \n Services).\n\n\n\n\n\n\nTo change how the APEXOfficePrint services starts you can change it from Services or start it manually via 2_StartService.bat (should be run as Administrator).\n\n\n\n\n\n\nTo check if the service has started, navigate to \nhttp://localhost:8010/\n\n\n\n\n\n\nTo stop the service run 3_StopService.bat as Administrator or stop it from Services.\n\n\n\n\n\n\nTo remove the APEXOfficePrint as service run 4_RemoveService.bat.\n\n\n\n\n\n\nThe APEXOfficePrint service should now be removed from Services. If it says Disabled then it will be removed after the service has been stopped.\n\n\n\n\n\n\n8.6 Run APEX Office Print at startup or as service in Linux\n\n\nAfter reboot of the server where APEX Office print is installed, you have to make sure that you also run APEXOfficePrintLinux64 command. If you want to automate the startup of AOP you can create in init.d.\nFor example: /etc/init.d/aop-server\n\n\n#!/bin/bash\n#\n# Apex Office Print (AOP) Server\n#\n# chkconfig: 345 70 30\n# description: AOP is a print server for Oracle Application Express and PL/SQL\n# processname: APEXOfficePrint\n\n# Source function library.\n. /etc/init.d/functions\n\nRETVAL=0\nAOP_HOME=/opt/aop/v18.1/server\nAOP_PROCESS_NAME=APEXOfficePrint\nAOP_EXECUTABLE_NAME=APEXOfficePrintLinux64\nAOP_PORT=8010\nLIBREOFFICE_HOME=/opt/libreoffice5.4\n\nPATH=$LIBREOFFICE_HOME/program:$PATH\nexport PATH\n\nstart() {\n        echo -n \nStarting $AOP_PROCESS_NAME \n\n        echo -n \nCurrent path is $PATH\n\n        $AOP_HOME/$AOP_EXECUTABLE_NAME -p $AOP_PORT -s $AOP_HOME \n\n        RETVAL=$?\n        echo\n        return $RETVAL\n}\n\nstop() {\n        echo -n \nShutting down $AOP_PROCESS_NAME: \n\n        pkill $AOP_PROCESS_NAME\n        RETVAL=$?\n        echo\n        return $RETVAL\n}\n\nstatus() {\n        echo -n \nTODO: Print $AOP_PROCESS_NAME status here... \n\n        RETVAL=$?\n        return $RETVAL\n}\n\ncase \n$1\n in\n    start)\n        start\n        ;;\n    stop)\n        stop\n        ;;\n    status)\n        status\n        ;;\n    restart)\n        stop\n        start\n        ;;\n    *)\n        echo \nUsage: $prog {start|stop|status|restart}\n\n        exit 1\n        ;;\nesac\nexit $RETVAL\n\n\n\n\n8.7 Start/Stop APEX Office Print on Linux 7 with systemctl\n\n\nOn Linux 7 you can use systemd (systemctl) to start and stop services.\nFor Red Hat and Oracle Enterprise Linux you can follow the below instructions.\n\n\nAs user root or sudo privileged user\n\n\n\n\ncd into /usr/lib/systemd/system\n\n\ncreate a file aop.service\n\n\n\n\nPaste the following in and adjust for your installation as required (personally I install AOP in /opt/oracle)\n\n\n[Unit]\nDescription=APEX Office Print\nAfter=network.target\n\n[Service]\nType=simple\nUser=aop\nGroup=aop\n\nEnvironment=AOP_HOME=/opt/aop/latest/server  ### Please see comment below\nEnvironment=AOP_PROCESS_NAME=APEXOfficePrint\nEnvironment=AOP_EXECUTABLE_NAME=APEXOfficePrintLinux64\nEnvironment=AOP_PORT=8010\n\nEnvironment=PATH=/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/bin/\nSyslogIdentifier=apexofficeprint\nRestart=always\nRestartSec=30\nTimeoutStartSec=30\nTimeoutStopSec=30\n\nExecStart=/usr/bin/env ${AOP_HOME}/${AOP_EXECUTABLE_NAME} -p ${AOP_PORT} -s ${AOP_HOME}\n\nExecStop=/usr/bin/env pkill ${AOP_PROCESS_NAME}\n\n[Install]\nWantedBy=multi-user.target\n\n\n\n\n\n\nReload the daemon\n\n\n\n\nsystemctl daemon-reload\n\n\n\n\n\n\nA simple setup is to install the version of aop in /opt/aop. When you install a new version just unzip in this directory. You will end up for example with the following directories v3.4, v3.5 and v18.1. Create in the directory /opt/aop a symbolic link to point to the latest version.\n\n\n\n\nln -s /opt/aop/v18.1 /opt/aop/latest\n\n\n\n\nSuppose something is not working properly and you need to revert back to your previous version, all you need to do is to create the symbolic link to a previous version. For example\n\n\nunlink latest\nln -s /opt/aop/v3.3 /opt/aop/latest\n\n\n\n\n\n\nAs root \n\n\n\n\nstart aop :  systemctl start aop\nstop aop :  systemctl stop aop\nstatus aop: systemctl status aop\n\n\n\n\nExample output of systemctl status aop\n\n\n[root@s2s-proddb-03 system]# systemctl status aop.service \n\u25cf aop.service - APEX Office Print \n   Loaded: loaded (/usr/lib/systemd/system/aop.service; disabled; vendor preset: disabled) \n   Active: active (running) since Sat 2018-03-10 20:39:47 AEDT; 6s ago \nMain PID: 28273 (APEXOfficePrint) \n   CGroup: /system.slice/aop.service \n           \u251c\u250028273 /opt/aop/latest/server/APEXOfficePrintLinux64 -p 8010 -s /opt/oracle/aop/latest/server \n           \u251c\u250028283 /opt/aop/v3.4/server/APEXOfficePrintLinux64 --pkg-fallback --max_old_space_size=16384 /snapshot/apexofficeprint/aop_server/node_modules/apexrnd-startup-utils/sequentialConverter.js -d 0 --idleT... \n           \u2514\u250028288 /opt/aop/v3.4/server/APEXOfficePrintLinux64 --pkg-fallback --max_old_space_size=16384 /snapshot/apexofficeprint/aop_server/apexofficeprint.js -p 8010 -s /opt/oracle/aop/latest/server \nMar 10 20:39:47 http://proddb-032.acme.com systemd[1]: Started APEX Office Print. \nMar 10 20:39:47 http://proddb-032.acme.com systemd[1]: Starting APEX Office Print... \nMar 10 20:39:48 http://proddb-032.acme.com apexofficeprint[28273]: Current license is activated to: xxxx@thiscompany.com \nMar 10 20:39:48 http://proddb-032.acme.com apexofficeprint[28273]: The products activated are: \nMar 10 20:39:48 http://proddb-032.acme.com apexofficeprint[28273]: Word \nMar 10 20:39:49 http://proddb-032.acme.com apexofficeprint[28273]: Listening on port 8010 \nMar 10 20:39:49 http://proddb-032.acme.com apexofficeprint[28273]: AOP 1 running\n\n\n\n\n8.8 Step-by-step how to install LibreOffice on Linux\n\n\nIn case you need to install LibreOffice on Linux, here're the steps (see also other section):\n\n\n# download LibreOffice for the PDF converter\ncd /tmp\nwget  http://downloadarchive.documentfoundation.org/libreoffice/old/5.4.7.2/rpm/x86_64/LibreOffice_5.4.7.2_Linux_x86-64_rpm.tar.gz\n\n# make sure no old versions exist\nyum remove openoffice* libreoffice*\n\n# extract tar\ntar -xvf LibreOffice_5.4.7.2_Linux_x86-64_rpm.tar.gz\n\n# install\ncd /tmp/LibreOffice_5.4.7.2_Linux_x86-64_rpm/RPMS/\n\nyum localinstall *.rpm\n\n# install some missing dependencies (depending your linux version this is not necessary)\nyum install cairo.x86_64\nyum install cups.x86_64\nyum install mesa-libGL.x86_64\n\n# install Java dependency (not necessary if you already have Java)\nyum install java-1.8.0-openjdk.x86_64\n\n# create symbolic link\nln -s /opt/libreoffice5.4/program/soffice /usr/sbin/soffice\n\n\n\n\n8.9 HTTPS Configuration\n\n\nAOP also has support for the usages of https protocol. It requires a crt file and its private key file. \nA self signed certificate and key can also be used. The certifcate can be generated by using openssl command:\n\n\nopenssl req -x509 -newkey rsa:2048 -keyout keytmp.pem -out aop.crt -days 365\nopenssl rsa -in keytmp.pem -out aop.key\n\n\n\n\nGiven aop.crt certifcate file and aop.key private key file AOP can be started with:\n\n\nAPEXOfficePrint --https_cert aop.crt --https_key aop.key\n\n\n\n\nThe port number can also be specified with the --https_port argument. If this is provided HTTP and HTTPS server will run.\n\n\nYou should see the following when started successfully on the console.\n\n\nStarting HTTP and HTTPS on port 8010 and 443\nAOP 1 (HTTP) running\nAOP 1 (HTTPS) running\n\n\n\n\nPlease note that the certificate validation is done by the client. \nIf you are using a self signed certificate and visit the https location with browser, you will get a security warning (see below).\n\n\n\n\n\n\nYou can configure the browsers to trust the self signed certificate by adding it to the security exception.\nYou will also have to add this certificate in your oracle wallet to get rid of 'Certificate Validation Error'.\n\n\nThis option is comes in handy if you are running AOP.\n\n\n8.10 Installation errors\n\n\nLinux installation port error\n\n\nIf you encounter this error:\n\n\n-------------------------------------------------\nError on Thu Feb 04 2016 19:33:35 GMT-0800 (PST)\n-------------------------------------------------\nlisten EADDRINUSE\n\n\n\nIt means that the port you tried running AOP server is already taken and you need to change it by running this command:\n\n\n./APEXOfficePrintLinux64 \u2013p xxxx (replace xxxx by a free port)\n\n\n8.11 Docker image\n\n\nPre-requisites\n\n\nDefine a Docker netwerk, if you don't have one yet\n\n\ndocker network create my_network\n\n\n\n\nMake sure your Oracle database container is in this netwerk\n\n\ndocker network connect my_network oracle\n\n\n\n\nStart your ORDS container on this netwerk\n\n\ndocker run -t -i \\\n--name ords \\\n--network=my_network \\\n-e DATABASE_HOSTNAME=\noracle\n \\\n-e DATABASE_PORT=\n1521\n \\\n-e DATABASE_SERVICENAME=\nORCLPDB1\n \\\n-e DATABASE_PUBLIC_USER_PASS=oracle \\\n-e APEX_LISTENER_PASS=oracle \\\n-e APEX_REST_PASS=oracle \\\n-e ORDS_PASS=oracle \\\n--volume /docker/apex/images:/usr/local/tomcat/webapps/i \\\n-p 8181:8080\nords/ords_apex:3.0.9\n\n\n\n\nDownload the AOP docker image\n\n\ndocker pull apexrnda/apexofficeprint\n\n\n\n\nActivating APEX Office Print the first time (Gold license only - not necessary for Enterprise license). This step is only needed once.\n\n\ndocker run -it \\\n--name apexofficeprint \\\n--network=my_network \\\n-p 8010:8010 \\\n-v /docker/apexofficeprint/:/apexofficeprintstartup/ \\\napexrnd/apexofficeprint \\\n-s /apexofficeprintstartup/\n-a\n\n\n\n\nIn case you have an Enterprise License, add the aop.license file in the directory you specified, in the below example it's /docker/apexofficeprint/\n\n\nStart an AOP container on the network of your Oracle database container\n\n\ndocker run -d \\\n--name apexofficeprint \\\n--network=my_network \\\n-p 8010:8010 \\\n-v /docker/apexofficeprint/:/apexofficeprintstartup/ \\\napexrnd/apexofficeprint \\\n-s /apexofficeprintstartup/\n\n\n\n\nYou should now be able to connect to APEX Office Print server by going to http://apexofficeprint:8010/. You can view \nthis video\n to see the above in action.\n\n\nCreate an ACL for APEX_050100 to the AOP container\n\n\nbegin\n DBMS_NETWORK_ACL_ADMIN.append_host_ace (\n    host       =\n 'apexofficeprint',\n    lower_port =\n 8010,\n    upper_port =\n 8010,\n    ace        =\n xs$ace_type(privilege_list =\n xs$name_list('http'),\n                              principal_name =\n 'APEX_050100',\n                              principal_type =\n xs_acl.ptype_db));\nend;\n\n\n\n\nConfigure the APEX plug-in\n\n\nGo to Shared Components \n Component Settings \n APEX Office Print and put in the AOP URL a reference to your docker container e.g. http://apexofficeprint:8010/\n\n\n9 Tutorials\n\n\nYou can check the \nAPEX Office Print tutorial page\n to see tutorials and videos.\n\n\n10 Troubleshooting\n\n\n10.1 Output generates invalid Office documents\n\n\nIn case Office documents are not opening as expected, probably there was an issue with the JSON that was send to the AOP server. If you run in the AOP Cloud, you can enable Remote Debugging, which you can access when you login in your APEX Office Print dashboard at \nhttps://www.apexofficeprint.com\n.\nIf you're running the on-premise version of AOP, on the server there is a server_error.log file that contains the errors it found during rendering. First step is to check that file for more information.\nNext make sure that your JSON is valid by validating the JSON in for example \nhttp://jsonlint.com\n or by doing Remote Debug (see further on in this document)\n\n\n10.2 Invalid JSON generated by apex_web_service.make_rest_request\n\n\nMake sure APEX 5.0.4 or higher is installed. To download it login to support.oracle.com.\n\n\n10.3 Invalid JSON generated by apex_json\n\n\nMake sure you install an additional patch for APEX 5.0.4 PSE 24341756 or for APEX 5.1.0 PSE 25650850 or for APEX 5.1.1 PSE 25853436 or for APEX 5.1.4 PSE 27963501 available at \nhttps://support.oracle.com\n. Those will fix issues with apex_json which is used behind the scenes in AOP.\n\n\nYou also might hit Oracle database bug (in 12.1.0.2). A patch is made available on \nhttps://support.oracle.com\n; search for patch #21424376. You won't experience this issue in 11.2.0.4 or 12.2.\n\n\nWhen using PL/SQL Function returning JSON, you might hit a bug in apex_plugin_util, which can be fixed by applying patch 26048323.\n\n\nFinally if you still encounter issues, use ORDS (SQL Workshop \n RESTful Services) as your datasource. ORDS will generate the JSON instead of apex_json and AOP will use that JSON instead (see 3.5.4 Data Source - URL with ORDS RESTful Web Service).\n\n\n10.4 Running on Oracle Cloud\n\n\nIf you are running on Oracle Cloud you have to use HTTPS in the AOP Plug-in Component setting and when you call the \naop_api_pkg\n package. Use \nhttps://www.apexrnd.be/aop\n as the url.\n\n\n10.5 Invalid PDF file\n\n\nIf you're running the on-premise version of AOP, check a file on the server called server_error.log or server_uncaugt_exceptions.log and see which error you get.\nTry to run your example in the same format as your template. If this also fails, there's an issue with the JSON or the template. Check your template and data again. If you receive your document fine, but PDF is not working, there's an issue finding LibreOffice or MS Office. Make sure those programs are installed correctly. Try to do a manual conversion on the command line in those tools and see if that works. If not, check the error and try to reinstall.\nYou can also do Remote Debugging (see further on in this document), which will help identifying the real issue. If everything fails, please contact \n.\n\n\n10.6 ORA-29273: HTTP request failed\n\n\nORA-29273: HTTP request failed ORA-06512: at \"SYS.UTL_HTTP\", line 1130 ORA-24247: network access denied by access control list (ACL)\n\n\nMake sure APEX_050000 or APEX_050100 schema has the rights to connect to APEX Office Print (http(s)://www.apexofficeprint.com for the Cloud version or your local url in case of the on-premise version). The script to correct the issue can be found here: \nAPEX 5.0\n or for \nAPEX 5.1\n (use the correct script for your database version - for XE use prior to 12c)\n\n\n10.7 ORA-29024: Certificate validation failure\n\n\nORA-29273: HTTP request failed ORA-06512: at \"SYS.UTL_HTTP\", line 1130 ORA-29024: Certificate validation failure\n\n\nIn case you run over HTTPS you need to take into account the certificates.\nThere're two ways to get around this:\n\n\n\n\n\n\nOption 1: You can load our certificates in your Oracle wallet (the Oracle DB is doing the call to our server).\n\n\n\n\n\n\nOption 2: You can add an entry in your webserver so a local entry is called by the database (which doesn't need a certificate) and the webserver is doing the redirect to handle the https call.\n\n\n\n\n\n\nHere's an example when in the plug-in you would specify a local address: \nhttp://apexrnd.localdomain/aop/\n\n\nVirtualHost *:80\n\nServerName  apexrnd.localdomain\nServerAlias apexrnd.localdomain\nRewriteEngine On\nProxyVia On\nProxyRequests Off\nSSLProxyEngine On\nProxyPass        /aop/   https://api.apexofficeprint.com/\nProxyPassReverse /aop/   https://api.apexofficeprint.com/\n\n/VirtualHost\n\n\n\n\n10.8 Error generating Excel and Powerpoint with AOP Trial\n\n\nIf you don't activate the on-premise version of AOP it will run in Trial mode.\nThis mode is not able to generate xlsx and pptx files, but it will work with docx and pdf, but those outputs will contain a trial watermark. The 100 day free cloud version is not limited and you can do everything on there.\nWhen you buy APEX Office Print you can activate your on-premise version and all restrictions will be removed.\n\n\n10.9 How to read and convert documents (docx, xlsx, pptx, pdf) on Linux\n\n\nYou need to install LibreOffice \nhttps://www.libreoffice.org/download/libreoffice-fresh/\n. The steps to do this are outlined below:\n\n\nMake a connection to your server with ssh or putty, but make sure you \ndon't forward or tunnel your X Display\n.\n\n\nInstall supporting packages:\n\n\nyum install wget\n\n\n\nDownload LibreOffice\n\n\ncd /tmp\nwget http://download.documentfoundation.org/libreoffice/stable/5.4.2/rpm/x86_64/LibreOffice_5.4.2_Linux_x86-64_rpm.tar.gz\n\n\n\nInstall LibreOffice\n\n\ntar xzvf LibreOffice_5.4.2_Linux_x86-64_rpm.tar.gz\ncd LibreOffice_5.4.2.2_Linux_x86-64_rpm/RPMS\nyum localinstall *.rpm\n- or you can do rpm -ivh *.rpm\n\n\n\nAdd LibreOffice to the profile for your user (as it needs to be able to find soffice)\n\n\nvi /etc/profile\nexport PATH=$PATH:/opt/libreoffice5.4/program\nsource /etc/profile\n\n\n\nOr add a symbolic link to LibreOffice\n\n\nln -s /opt/libreoffice5.4/program/soffice /usr/sbin/soffice\n\n\n\nCheck the version of LibreOffice and try to run a conversion\n\n\nsoffice --version\nsoffice --headless --invisible --convert-to pdf --outdir /tmp aop_interactive.docx\n\n\n\nIf you get: Fontconfig warning: ignoring UTF-8: not a valid region tag\n\n\necho \"$LC_CTYPE\"\n|-\n you probably have UTF-8 defined; unset it\nexport LC_CTYPE=\"\"\n\n\n\nMake sure you restart APEX Office Print after installing LibreOffice.\n\n\nNote:\n we sometimes see LibreOffice doesn't generate the same PDF as MS Office is generating, but we found LibreOffice becoming more and more inline, so we recommend using the latest version of LibreOffice.\n\n\nNote:\n Depending the version of LibreOffice converting to HTML from docx, xlsx, pptx might include the images as base64 or include a link.\n\n\n10.10 ORA-31011: XML parsing failed, ORA-19202: Error occurred in XML processing, LPX-00651: VM Stack overflow\n\n\nYou need to install an additional patch for APEX 5.0.4 which will fix this issue. Search in \nhttps://support.oracle.com\n for PSE 24341756.\n\n\n10.11 Error occured while aquiring license\n\n\nYou receive: \"Error occured while aquiring license. Please make sure that your API key is correct and that you have enough printing credits. Contact AOP if the problem persists.\"\n\n\nThis means you ran out of credits. Go to \nhttps://www.apexofficeprint.com\n and upgrade your package or send an email to \n to see what we can do for your case.\n\n\n10.12 SyntaxError: unexpected token P in JSON at position 0\n\n\nIf you are using APEX 5.1, the Dynamic Action plug-in will always work, whereas the Process plug-in might give this error. When you put the process in the Processing part, it will only work if the \u201cReload on Submit\u201d attribute (of the page) is set to \u201cAlways\u201d (note this attribute is new in 5.1).\nThis is due to a change how APEX 5.1 is handling Page Processing. If you would import an APEX 5.0 app in 5.1 by default it\u2019s set to Always reload on submit, but if you create a brand new app in 5.1 it\u2019s set to \u201cOnly for Success\u201d and then the process plug-in is not working. Alternative you can put the AOP Process to be After Header, and make it conditional, than it will work regardless of the setting of \"Reload on Submit\".\n\n\n10.13 Issues with Oracle XE\n\n\nWhen using Oracle XE, make sure you have the execute grant on the UTL_HTTP package.\n\n\nGRANT EXECUTE ON SYS.UTL_HTTP TO my_user;\nGRANT EXECUTE ON SYS.UTL_FILE TO my_user;\n\n\n\nIf you receive \"ORA-20000: Issue returned by AOP Service (REST call). Please verify the logs on the server. Returned HTTP code: . (code: -29273)\", see section 10.6.\n\n\n10.14 Chinese and other language and font support\n\n\nIf you need special characters or language support, make sure the necessary fonts and languages are on your system. For example to add Chinese support on RHEL Linux do:\n\n\nyum install \"@Chinese Support\"\n\n\n\nFurther more if you want to install additional fonts here's a good \nlink\n. Our AOP Cloud is also supporting \nGoogle Noto\n fonts.\n\n\nInstalling a font is nothing more than installing the font on your system.\nSo for example on (RedHat) Linux we copy the *.ttf files (or directory) to /usr/share/fonts/ and run \"fc-cache -f -v\"\n\n\nDepending if you have a GUI (Linux/Windows) you can just double click on the font and it will install it in your system. If your system recognises is, MS Office or LibreOffice should be able to use it for the PDF conversion.\n\n\nFor barcodes, you could also choose to install a barcode font, for example \nFree 3of9\n or \nhttp://www.dafont.com/3of9-barcode.font\n. Barcode fonts are more performant than images.\n\n\n10.15 Running AOP installed in a single schema but shared across multiple schemas\n\n\nIt is possible to install AOP only once and call it from other places. In order to do this, after you install AOP - go to the package AOP_API18_PKG and AOP_PLSQL18_PKG and remove the AUTHID CURRENT_USER and recompile.\n\n\n\n\n10.16 Running on-premise AOP under HTTPS\n\n\nSince AOP version 3.1 AOP can be configured to use HTTPS server. The key and the certificate files can be provided to AOP using the --https_key and --https_cert arguments.\n\n\nFor older versions however we recommend setting up an Apache Reverse Proxy which is doing the SSL in front of AOP.\nFrom Apache to AOP it would be unencrypted, but if it\u2019s on the same machine as Apache and the port of AOP is not open and only accessible by localhost, we believe you're save.\n\n\nTo prevent access to AOP other than the Apache Reverse Proxy, you can do (on Linux):\n\n\niptables -A INPUT -p tcp --dport 8010 -s 127.0.0.0/8 -j ACCEPT\niptables -A INPUT -p tcp --dport 8010 -j DROP\n\n\n\n\n(instead of DROP you can use REJECT too)\n\n\nSo that would mean only a program on localhost (like Apache) can connect to port 8010, all others are rejected.\n\n\n10.17 The requested URL has been prohibited\n\n\nIf in APEX you force all outgoing connections to be HTTPS by setting:\nManage Instance -\n Security -\n HTTP Protocol -\n Require Outbound HTTPS -\n No.\n\n\nmake sure you're calling AOP also with HTTPS. If you're calling the AOP cloud \nhttps://api.apexofficeprint.com\n make sure to load the certificate in your database or setup a proxy on your end.\n\n\n10.18 PDF output suddenly stopped working\n\n\nProbably LibreOffice or MS Office process is stuck. A way to solve this is running a script that checks for long running processes and that kills those. If you're using the AOP Cloud, please contact \n.\n\n\n10.19 Map or Gantt or Other div not in output\n\n\nIn some occations divs are not screenshotted well enough, so they don't appear in the output. For example the JET Gauge might not be taken. We are looking for a workaround for a future release.\n\n\n10.20 ORA-29273: HTTP request failed ORA-12535: TNS:operation timed out\n\n\nPlease check your firewall if it allows outgoing connection from the database to the AOP server.\nIf you added the AOP port to the firewall rules, make sure to restart the daemon.\n\n\nIf you're using a proxy, make sure to specify the proxy in Shared Components \n Application Definition Attributes \n Proxy Server or specify the global variable in the AOP_API_PKG.g_proxy_override.\n\n\nSee also further in this doc at chapter 14 Debugging connections to AOP Server\n\n\n10.21 Font in PDF is different from the font in my Word template\n\n\nThis is most likely due to the fact that the font you chose in Word, is available on your local computer, but not in the server. If you install that font also on the server where AOP is running, it should do the conversion well. See also 10.14 Chinese and other language and font support.\n\n\n10.22 The generation of my document is slow\n\n\nYou would need to figure out where you lose time:\n\n\n\n\n\n\ncreation of JSON: your SQL statement or other source is taken to transform in JSON. You can trace what is going on by setting your page in debug mode (APEX) or running your SQL statement in a SQL window.\n\n\n\n\n\n\ntime needed on the server by AOP: you can trace that by enabling logging (only on-premise) Start the AOP server with --enable_printlog or --verbose, which will show the incoming requests.\n\n\n\n\n\n\nnetwork time: measture the time to travel from your database to our cloud or to your own on-premise install. If you would use the on-premise version and put AOP on the same machine as the database, it would be the fastest. Or if you could add it on another server where the network is fast, that should get rid of the transfer time.\n\n\n\n\n\n\nIf the conclusion is that everything is as fast as possible, we advice the reports that take a long time, to run in the background with a job. You could also schedule the reports to run overnight and store the results in a table.\n\n\n10.23 Invalid multi-column chart or Unexpected Error\n\n\nWith some versions of the Oracle Database there's an issue with the Cost Based Optimiser.\nTill you upgrade your database, you might want to try to use /\n+rule\n/ hint in your top level SQL statement.\n\n\n10.23 Safe button in Components Settings not available\n\n\nMost likely you subscribed the plug-in from another place. Go to Shared Components \n Plug-ins\n- Click on References (number) and copy your logic where you used AOP. This is so you don't have to recreate your logic later. Next, remove all the processes or dynamic actions that use the plug-in.\n- Now you should be able to go to Shared Components \n Plug-ins \n AOP and hit the Delete button so the AOP plug-in is removed.\n- Import the AOP plug-in again, but make sure you don't reference it from another app, so Import from file.\n- Use the logic from step 1 to recreate your call(s) to AOP.\n\n\n10.24 sqlerrm: ORA-31011: XML parsing failed ORA-19202: Error occurred in XML processing LPX-00664: VM Node-Stack overflow\n\n\nThe node stack of the XSL VM can be set with an event. It defaults to 300, the maximum is 4096. You can set it with:\n\n\nalter session set events='31153 trace name context forever, level 4096'; \n\n\n\n\n10.25 How to get a download to Excel button in the Actions menu of an Interactive Report?\n\n\nThe below steps describe how to export an Interactive Report to Excel (XLSX) with AOP via the native IR download dialog. The changes are done on the global page and works for all IR of the app without the need of creating a DA on each page for each report, so reducing a lot of manual work.\n\n\nCreate a JS file with the following content and upload/reference it app-wide:\n\n\nfunction addAOPXLSXDownloadToIR(pStaticIdItem) {\n  // hack into dialogopen event of jquery ui dialogs\n  $('body').on('dialogopen', function(event, ui) {\n    var dialogWindow$ = $(event.target);\n    // only process if it\u00b4s an IR download dialog\n    if (dialogWindow$.parents('div.ui-dialog').find('span.ui-dialog-title').text() === apex.lang.getMessage('APEXIR_DOWNLOAD')) {\n      // get ID/static ID of IR\n      var currentRegionId = dialogWindow$.attr('id').match(/(.+)_dialog_js/)[1];\n      if (currentRegionId) {\n        // build html markup for XLSX download button\n        var html = apex.util.htmlBuilder();\n        html.markup('\nli')\n          .attr('class', 'a-IRR-iconList-item')\n          .markup('\n')\n          .markup('\na')\n          .attr('class', 'a-IRR-iconList-link')\n          .attr('href', 'javascript:$s(\n' + pStaticIdItem + '\n,\n' + currentRegionId + '\n)')\n          .attr('id', 'download_excel_aop')\n          .markup('\n')\n          .markup('\nspan')\n          .attr('class', 'a-IRR-iconList-icon a-Icon icon-irr-dl-xls')\n          .markup('\n')\n          .markup('\n/span\n')\n          .markup('\nspan')\n          .attr('class', 'a-IRR-iconList-label')\n          .markup('\n')\n          .markup('XLSX')\n          .markup('\n/span\n')\n          .markup('\n/a\n')\n          .markup('\n/li\n');\n        // append html\n        $('.a-IRR-iconList').append(html.toString());\n      }\n    }\n  });\n}\n\n\n\n\nCreate a page 0 item for holding the IR static ID:\n\n\nP0_AOP_IR_STATIC_ID\n\n\n\n\nCreate a page load DA (Execute JavaScript Code) on page 0 to call above JS function\n\n\naddAOPXLSXDownloadToIR('P0_AOP_IR_STATIC_ID\u2019);\n\n\n\n\nCreate a page 0 DA (On Change of \u201cP0_AOP_IR_STATIC_ID\u201d) which calls the AOP plugin\n\n\n\n\n1 True Action (AOP plugin)\n\n\n\n\n\n\n\n\n2 True Action (Execute JavaScript - To close the IR download dialog after download)\n\n\n\n\nvar staticId = $v('P0_AOP_IR_STATIC_ID');\n$('div#' + staticId + '_dialog_js').parent().find('button').click();\n\n\n\n\nNote: every IR should have a static ID.\n\n\nThat\u00b4s it, the final result looks like this (on every IR in the app):\n\n\n\n\n10.26 ORA-06550: PLS-00201: identifier 'AOP_API_PKG.xxx' must be declared\n\n\nThe APEX Plug-in can't find the AOP_API_PKG package. To fix the issue, run aop_db_pkg.sql (in the \"db\"-directory) in your Oracle Schema (SQL Workshop -\n SQL Scripts -\n Upload -\n Select file and hit Upload)\n\n\n11 Debugging in APEX\n\n\nAOP is fully instrumented with APEX debug messages, so when you turn debugging on in your APEX application you will see many AOP: ... calls.\nDepending the level of APEX debug mode, more detailed debug output will be available. See \nDimitri Gielis's blog post\n how to put APEX Trace on, which will show the most debug messages.\n\n\nYou can also specify a global variable g_debug_procedure if you want to call your own debug procedure which for examples logs the information in your own table.\n\n\nIf you use Logger, you can also enable logger by compiling aop_api_pkg with a PL/SQL flag.\n\n\n ALTER PACKAGE aop_api18_pkg COMPILE PLSQL_CCFLAGS = 'logger_on:TRUE';\n\n\n\n\n12 Debugging in PL/SQL\n\n\nIf you're scheduling reports or calling the AOP packages with PL/SQL you can debug straight from PL/SQL. Here's an example:\n\n\ndeclare\n  l_binds           wwv_flow_plugin_util.t_bind_list;\n  l_return          blob;\n  l_output_filename varchar2(100) := 'output';\nbegin\n  -- remove previous debug\n  apex_debug.remove_debug_by_age(\n    p_application_id  =\n 232,\n    p_older_than_days =\n -1);\n\n  -- create an APEX session with the debug enabled\n  aop_api_pkg.create_apex_session(\n    p_app_id       =\n 232,\n    p_enable_debug =\n 'Y');\n\n  l_return := aop_api_pkg.plsql_call_to_aop (\n                p_data_type       =\n aop_api_pkg.c_source_type_rpt,\n                p_data_source     =\n 'ir1',\n                p_template_type   =\n aop_api_pkg.c_source_type_apex,\n                p_template_source =\n 'aop_interactive.docx',\n                p_output_type     =\n 'pdf',\n                p_output_filename =\n l_output_filename,\n                p_binds           =\n l_binds,\n                p_aop_url         =\n 'http://api.apexofficeprint.com/',\n                p_api_key         =\n '1C511A58ECC73874E0530100007FD01A',\n                p_app_id          =\n 232,\n                p_page_id         =\n 5,\n                p_init_code       =\n 'aop_api_pkg.g_language := ''en'';');\nend;\n/\n\n\n\n\n13 Remote Debugging\n\n\nIf you receive an error and you need some help of us, do following steps:\n\n\n1) Go in your application to Shared Components \n Component Settings \n APEX Office Print (AOP) [Plug-in] and enable remote debugging (see parameters screenshot)\n\n\n![ ](media/aop_component_settings.png)\n\nNote 1: you find your API key when you login in your dashboard on \nhttps://www.apexofficeprint.com\n\n\nNote 2: Make sure APEX\\_050000 or APEX\\_050100 schema has the rights to connect to http(s)://www.apexofficeprint.com\n\n\n\n2) Run your report again.\n\n\n3) Login on \nhttps://www.apexofficeprint.com\n and go to Remote Debug\n\n\n![ ](media/aop_remote_debug.png)\n\n\n\n4) Click on the magnifying glass, and the JSON that was generated behind the scenes which is send to the AOP server component will be shown.\n\n\n5) Investigate the received JSON:\n\n\n-) \nJSON is valid, and valid output\n: this is how it should be.\n\n\n-) \nJSON is invalid\n: this is probably due to your version of APEX. If you are below APEX 5.1.2, you need a patch linked to apex_json.\n\n\n-) \nJSON is valid, but invalid Office file (Word, Excel, Powerpoint)\n: this means that AOP couldn't merge your data with the template you provided. If the template and requested output is the same format (e.g. your template is in Word and you request a Word document); check your template again if all substitution strings are correct. If you believe everything is ok, click the button \"Sent to Support\" and contact \n.\n\n\n-) \nJSON is valid, but invalid PDF (or other output format)\n: if the template and output format are different, a conversion is going on handled by LibreOffice or MS Office. Either the conversion goes wrong, or most likely the initial file before the conversion was already wrong. To debug further, set the output format to the same format as your template and run your report again. If the output is invalid, follow previous steps (see JSON is valid, but invalid Office file). If the output is ok, click the button \"Sent to Support\" and send an email to \n as it means there's a bug in the conversion.\n\n\n14 Local Debugging\n\n\nIf you receive an error and you need some help of us, do following steps:\n\n\n\n\n\n\nGo in your application to Shared Components \n Component Settings \n APEX Office Print (AOP) [Plug-in] and set Debug to Local.\n\n\n\n\n\n\nRun your report again. A JSON file will now be downloaded instead of the report. This JSON is what is sent to the AOP server component behind the scenes.\n\n\n\n\n\n\nInvestigate the received JSON:\n\n\n-) \nJSON is valid, and valid output\n: this is how it should be.\n\n\n-) \nJSON is invalid\n: this is probably due to your version of APEX. If you are below APEX 5.1.2, you need a patch linked to apex_json.\n\n\n-) \nJSON is valid, but invalid Office file (Word, Excel, Powerpoint)\n: this means that AOP couldn't merge your data with the template you provided. If the template and requested output is the same format (e.g. your template is in Word and you request a Word document); check your template again if all substitution strings are correct. If you believe everything is ok, contact \n.\n\n\n-) \nJSON is valid, but invalid PDF (or other output format)\n: if the template and output format are different, a conversion is going on handled by LibreOffice or MS Office. Either the conversion goes wrong, or most likely the initial file before the conversion was already wrong. To debug further, set the output format to the same format as your template and run your report again. If the output is invalid, follow previous steps (see JSON is valid, but invalid Office file). If the output is ok, send an email to \n as it means there's a bug in the conversion.\n\n\n\n\n\n\nIf you didn't find a solution yourself, please send the JSON file to support@apexofficeprint.com\n\n\n\n\n\n\n15 Debugging connections to AOP Server\n\n\nOpen a first command prompt or shell and run AOP in verbose mode:\n\n\n./APEXOfficePrintLinux64 \u2014-verbose\n\n\n\n\nCopy the \ntest.json\n file to your server where AOP is running in /tmp folder\n\n\nIn another command prompt or shell go to /tmp folder and run (If you are in windows environment you can download curl from \nhttps://curl.haxx.se/download.html#Win64\n):\n\n\ncurl -X POST -H 'Content-Type: application/json' -d @test.json http://127.0.0.1:8010/ \n output.docx\n\n\n\n\nThis should show the below output and have created an output.docx file\n\n\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  164k  100 68310  100   97k   335k   492k --:--:-- --:--:-- --:--:--  494k\n\n\n\n\nCheck the first shell, AOP should have printed:\n\n\nPrinjob received.\nSending back response.\nPrinjob completed.\n\n\n\nTry to run the same curl command but with your server name\n\n\ncurl -X POST -H 'Content-Type: application/json' -d @test.json http://\nyour server name\n:8010/ \n output.docx\n\n\n\n\nSame as before for output.\n\n\nGo to the database server copy the test.json in the /tmp folder and run the curl command again\n\n\ncurl -X POST -H 'Content-Type: application/json' -d @test.json http://\nyour server name\n:8010/ \n output.docx\n\n\n\n\nThis should do the same as before.\n\n\nInstead of using curl you can also use a RESTClient like Postman. You will have to add the header 'Content-Type: application/json' and give the data from the test.json into the body section. \n\n\nGo into APEX \n SQL Workshop, and try to connect to the AOP server\n\n\nselect apex_web_service.make_rest_request('http://\nyour server name\n:8010/', 'GET') from dual\n\n\n\n\nTry to generate a first document, adjust the below script to your settings and run\n\n\ndeclare\n  l_return          blob;\n  l_output_filename varchar2(100) := 'output';\n\nbegin\n  aop_api_pkg.g_proxy_override := null; -- set the proxy if you use that\n\n  l_return := aop_api_pkg.plsql_call_to_aop (\n                p_data_type       =\n 'SQL',\n                p_data_source     =\n q'[\n                  select\n                    'file1' as \nfilename\n,\n                    cursor(\n                      select 'hello world' as \nstring\n\n                        from dual\n                    ) as \ndata\n\n                  from dual\n                ]',\n                p_template_type   =\n null,\n                p_template_source =\n null,\n                p_output_type     =\n 'docx',\n                p_output_filename =\n l_output_filename,\n                p_aop_url         =\n 'http://\nyour server name\n:8010/', -- change to the AOP server\n                p_api_key         =\n '',\n                p_app_id          =\n 232); -- change to the AOP sample app number\n  sys.htp.p(dbms_lob.getlength(l_return));\nend;\n\n\n\n\nIn the shell where AOP is running you should see the incoming connection.\n\n\nHopefully the below steps give you more insight where your connection is failing so you can correct accordingly.\n\n\n16 FAQ\n\n\n-) \nDoes AOP have to go on its own server, the database server or the application (ORDS) server?\n\n\nYou can choose. Having AOP on the same server as the database machine is most performant and easiest as you don\u2019t have network connections to other servers. If you install AOP on it\u2019s own server you can size and monitor that server better. AOP on the Application server is another option, as long as the database can connect to the AOP server component, the AOP server doesn't need to be accessible from the outside (clients).\nSo it\u2019s whatever you are most comfortable with.\n\n\n-) \nIs there anything special we have to do with AOP to get it to work with SSL?\n\n\nYou can add a reverse proxy for the SSL or you can specify the https certificate when starting the AOP server itself.\nMost people don\u2019t do SSL as it\u2019s only the database that needs to access the AOP server component, so typically you don\u2019t even pass the network where others are. However AOP can start in SSL mode if the SSL certificate and its key are provided via --https_key and --https_cert argument.\n\n\n-) \nWhere do I get the SSL certificate of API server?\n\n\nIf you are using HTTPS (we always recommend you to do this) for connecting with the API server, you might get a SSL certification validation error:\n\n\nORA-29273: HTTP request failed ORA-06512: at \"SYS.UTL_HTTP\", line 1130 ORA-29024: Certificate validation failure\n \nIn this case you will have to load the SSL certificate of the root certification authority, in our case that of GoDaddy, into your oracle wallet. You can get this certificate by visiting https://apexofficeprint.com/ and looking at the certificate infomation. Example firefox:\n\n\n\nIt could be that you will have to change the url to https://www.apexrnd.be/aop/\n\n\n-) \nHow resource intensive is it?  Does it eat up a lot of CPU, RAM, or hard drive space?\n\n\nIt depends how many prints you do\u2026 AOP initially consumes about 400MB RAM, but depending the prints it can go up to 4GB (a limit we put). In case you have larger documents, we recommend downloading the high memory version which can consume up to 16GB.\nCPU is not much compared to the specs these days and hard drive space is about 500MB.\nThe executable is about 500MB and we might create some temporary files (during pdf conversion) and a log and error file.\n\n\n-) \nDo I have to install LibreOffice when we need Word and Excel output only?\n\n\nNo - LibreOffice or MS Office is only used when you want to convert from one format to another.\nSo Word-Word or Excel-Excel is working without. But if you want to do for example Word-\nPDF you need LibreOffice or MS Office or another converter you prefer.\n\n\n-) \nCan AOP print directly to a printer\n\n\nAOP 3.1 and above includes the ability to print directly to an IP Printer, as long as it's available from the server AOP is running on. If you want to print to a local printer, check the Sample app how to print to an inline region, by adding a little bit of JavaScript to the dynamic action you can let the browser come up with a print window automatically.\n\n\n-) \nCan you repeat the Table header in Word and Excel?\n\n\nYes, this is a setting in Office.\nWhen you right click on your header row in Word, you can go to Table Properties - Row and check the \"Repeat as header row at the top of every page\". An example is given on page 113 of sample application.\n\n\n-) \nDoes AOP support Pivots in Excel\n\n\nYes, you can use the transpose function in Excel to pivot your data. AOP can also loop vertically by using the {:tag}.\n\n\n-) \nwhy is there a difference between an output in Word and PDF\n\n\nWhen going from Word to PDF, we use an external converter: MS Office or LibreOffice. It might be that if your template was build on your desktop in MS Office (Word), but your server is using LibreOffice (Linux) a font is different or there are minimal changes. The easiest way to find out what the difference is, is to open the template in LibreOffice on your Desktop and see why LibreOffice is treating it different. In most use cases it works just fine going from one to the other, but sometimes it's in the details.\n\n\n-) \nCan I install the APEX Plug-in somewhere so all my apps have access ot it?\n\n\nYou can make the aop_api_pkg a public synonym for aop_api18_pkg PL/SQL package in case you only want the package in a global schema. The Oracle APEX plug-in itself you would still need to import in every APEX application you want to use it in, but the plug-in can point to the public package.\n\n\n-) \nCan I use dynamic page break in Word?\n\n\nYes. In some cases you might want to start a new page for every record for example for certificates. You can put the page break inside a conditional expression. You can use the rownum function to generate the id for every record and check if that is equals to the record length. An example is shown in page 119 of our sample application. Given the data:\n\n\nselect\n  'file1' as \nfilename\n,\n  cursor(\n    select\n      cursor(\n          select\n          rownum as \ncustomerIndex\n,\n          c.cust_first_name as \ncust_first_name\n,\n          c.cust_last_name as \ncust_last_name\n\n          from demo_customers c\n      ) as \ncustomers\n\n      from dual\n) as \ndata\n\nfrom dual\n\n\n\n\nYou can use the following tag to insert page break for every record except for the last.\n\n\n{#customerIndex!=customers.length}\n\u2003-------------page break ------------\n{/customerIndex!=customers.length}\n\n\n\n\nPlease note that if you wish to output to pdf, the same can be achieved by using the Powerpoint template and {!slides_loop} tag. In this case there is no need to use the rownum function.\n\n\n-) \nCan I adjust the width and height of interactive report/grid export in Word?\n\n\nIf you are exporting interacitve grid, you can adjust the columns width as you like (due to meta data issue you will also have to change the width a bit for all columns.). The ratio is then automatically taken into account. \n\n\nIn interactive report, you can use the following in html expression. \n\n\nspan data-aop-width-weight=\n2\n/span\n#COLUMN_NAME#\n\n\n\n\nThe default weight for each column is 1. Lets say you have 4 columns and you provide this html expression in the first colum. This will double the size of the first column in comparision to the remaining 3.\n\n\nThe following formula is used to calculate the percentage of width a column gets: \n\n\n(weight of column)/(total weight provided for all the columns) * 100.\n\n\n\n\n17 Example Templates\n\n\nBelow we illustrate some example templates and the generated output.\n\n\nExample 1\n\n\nThis is the input template:\n\n\n\n\nThis is the result after AOP has processed the template and the given data:\n\n\n\n\nExample 2\n\n\nThis is the input template:\n\n\n\n\nThis is the result after AOP has processed the template and the given data:\n\n\n\n\nExample 3\n\n\nThis is the input template:\n\n\n\n\nThis is the result after AOP has processed the template and the given data:\n\n\n\n\nExample 4\n\n\nThis is the input template:\n\n\n\n\nThis is the result after AOP has processed the template and the given data:\n\n\n\n\nCopyright\n\n\nCopyright \u00a9 2015-2018, \nAPEX R\nD\n\n\nAll rights reserved.\n\n\nAuthors: Dimitri Gielis, Sunil Tandan and Lino Schildenfeld\n\n\nThis software and related documentation are provided under a license agreement containing restrictions on use and disclosure that are protected by intellectual property laws. Except as expressly permitted in your license agreement or allowed by law, you may not use, copy, reproduce, translate, broadcast, modify, license, transmit, distribute, exhibit, perform, publish, or display any part, in any form, or by any means. Reverse engineering, disassembly, or de-compilation of this software, unless required by law for interoperability, is prohibited. The information contained herein is subject to change without notice and is not warranted to be error-free. If you find any errors, please report them to us in writing.", 
            "title": "Home"
        }, 
        {
            "location": "/#apex-office-print-aop-user-manual", 
            "text": "Release 18.2 October 2018  Provided by:", 
            "title": "APEX Office Print (AOP) - User Manual"
        }, 
        {
            "location": "/#1-about-aop", 
            "text": "", 
            "title": "1 About AOP"
        }, 
        {
            "location": "/#11-goal", 
            "text": "APEX Office Print makes printing and exporting (docx, xlsx, pptx, pdf, html, md) in Oracle Application Express (APEX) or just in PL/SQL a lot easier.  Make a template in Office, HTML or Markdown, choose data from your database and merge them into one. You can easily print PDFs, Office documents, HTML or Markdown in no time. It saves you time and effort by creating templates in which you can easily integrate your data.  APEX Office Print (AOP) is a product of APEX R D, located in Leuven, Belgium.  We are an experienced partner that helps you facilitate, improve and accelerate your business through new and innovative solutions. Built on in-depth technical expertise, our company provides custom-made IT services for managing business data and processes.", 
            "title": "1.1 Goal"
        }, 
        {
            "location": "/#12-aop-main-features", 
            "text": "APEX Office Print focusses on following:    Simple Printing \n    It is fast, easy and saves you money. It's the only solution on the market that is fully integrated with APEX. For example you can print or export your Interactive Reports and Grids data in a second.    Quick and Easy Setup \n    Simply Import the APEX Plug-in in your application    Any Data Type Support \n    Text, images, barcodes, formulas\u2026. it is easy to merge your data with any template you create    Scalable and Secure \n    APEX Office Print is a scalable and secure product that fits your every printing requirement.    PL/SQL API support \n    It gives you ability to run and retrieve reports from AOP server directly from your PL/SQL code.    Optimized for Performance \n    Great design with finest details to enhance your business productivity.    Flexible \n    APEX Office Print is a print server allowing you to create templates in Word, Excel, and PowerPoint for any type of data.", 
            "title": "1.2 AOP Main Features"
        }, 
        {
            "location": "/#13-aop-architecture", 
            "text": "It's the database (APEX Plug-in, PL/SQL API, REST WebService) that is doing a request to the AOP Server (either on-premise or our cloud). The template together with the data is send in JSON format to the AOP Server.\nThe browser doesn't need to have access to the AOP server.", 
            "title": "1.3 AOP Architecture"
        }, 
        {
            "location": "/#14-how-it-works-overview", 
            "text": "", 
            "title": "1.4 How it works (overview)"
        }, 
        {
            "location": "/#15-how-it-works-technical", 
            "text": "The APEX Office Print package consists of a server component, an Oracle APEX plug-in and PL/SQL API.  The server part returns generated documents upon receiving HTTP POST requests. These requests require a structured JSON file that for example can be inferred from a SQL database. The data from the database in combination with a template will generate relevant output files.  The Oracle Application Express (APEX) plug-in will generate the HTTP POST requests that the server part understands. The plug-in makes it easy to select a template, your data source and the output format straight from within your APEX application.  The PL/SQL API allows to print directly from the Oracle database. The PL/SQL API fits perfectly if you need to setup automatic printing through a job or do a mail merge.  A sample application comes with the download, so you see plenty of use cases in action.", 
            "title": "1.5 How it works (technical)"
        }, 
        {
            "location": "/#16-cloud-vs-on-premise", 
            "text": "There are two type of versions to buy:   a cloud version, which will send the requests to APEX Office Print in the cloud  an on-premise version, which includes the server component of APEX Office Print. It's an executable you run on your own server and in the APEX Plug-in you reference your own local version of APEX Office Print. In this case nothing is sent to the AOP cloud.", 
            "title": "1.6  Cloud vs On-Premise"
        }, 
        {
            "location": "/#17-license", 
            "text": "This is commercial software; you need to obtain a valid license in order to use this software and plug-in in your application. For the on-premise version a license is required per server (MAC address) you are running APEX Office Print of or you can go for an Enterprise License which is not tight to the MAC address.  Please visit our website  https://www.apexofficeprint.com/  for the different packages.  You can even sign up for a FREE Cloud account.", 
            "title": "1.7 License"
        }, 
        {
            "location": "/#18-signup-and-download", 
            "text": "Open  https://www.apexofficeprint.com/    Click on the \"Sign Up\" button     Enter your details     You'll receive an email with a confirmation link, please click that    At the same time you're logged into your AOP Dashboard. Select  Downloads     Choose the package you want and click to download it    Important \u2013 API key number activation  In your AOP dashboard your unique  API key number  can be found under the Account Info region on the home page. This number will need to be added to your Plug-in settings in order for it to work. For more information on how to do this check the  APEX Plugin Section .", 
            "title": "1.8 Signup and Download"
        }, 
        {
            "location": "/#19-quick-install-guide", 
            "text": "Unzip the file you downloaded from  https://www.apexofficeprint.com    Run aop_db_pkg.sql (in the \"db\"-directory) in your Oracle Schema (SQL Workshop -  SQL Scripts -  Upload -  Select file and hit Upload)    Import dynamic_action_plugin_be_apexrnd_aop_da.sql and process_type_plugin_be_apexrnd_aop.sql (in the \"plugin\"-directory) in Shared Components   Plug-ins    On the page you want to use AOP, add the \"APEX Office Print\" Dynamic Action or Process", 
            "title": "1.9 Quick Install Guide"
        }, 
        {
            "location": "/#110-quick-upgrade-guide", 
            "text": "When you already have an older version of AOP installed.    Unzip the file you downloaded from  https://www.apexofficeprint.com    Run aop_db_pkg.sql (in the \"db\"-directory) in your Oracle Schema (SQL Workshop -  SQL Scripts -  Upload -  Select file and hit Upload)    Import dynamic_action_plugin_be_apexrnd_aop_da.sql and process_type_plugin_be_apexrnd_aop.sql (in the \"plugin\"-directory) in Shared Components   Plug-ins    Optional: run aop_db_sample_pkg.sql (in the \"db\"-directory) in your Oracle Schema (SQL Workshop -  SQL Scripts -  Upload -  Select file and hit Upload), which will create some sample PL/SQL Scripts. We also recommend to install the latest AOP Sample App.    For on-premises versions of AOP, on the server stop AOP, copy the server directory and restart AOP with the new executable.", 
            "title": "1.10 Quick Upgrade Guide"
        }, 
        {
            "location": "/#2-aop-apex-sample-application", 
            "text": "", 
            "title": "2 AOP APEX Sample Application"
        }, 
        {
            "location": "/#21-prerequisites", 
            "text": "APEX Office Print requires Oracle APEX 5.0.4 or higher.\nInteractive Grid support is included in Oracle APEX 5.1 and above.\nRemote Databases and Web Sources are support in Oracle APEX 18.1 and above.  Note that the higher the APEX version, the more samples the AOP Sample App will include. We recommend looking at the latest version of the AOP Sample App, even if you are not yet on the latest version of APEX. Many examples will work in previous versions of APEX too, but they don't necessarily exist in that version of the AOP Sample App.  In order to run the AOP Sample Application an Oracle APEX Packaged application called Sample Database Application has to be installed first. The reason is that the source and templates are using data from the tables (demo_orders, demo_order_items, demo_product_info, \u2026.) which are installed by the packaged application.   Follow these steps to install the packaged application in your workspace:   Access your target Workspace  Select the Application Builder   Select Create     Select Packaged Application     Select Sample Database Application and click Install Application button     Select to use existing Application ID\n     Note: When you selected Auto Reassign Application ID you need to make sure that you change the values of aop_api_pkg that uses APP_ID and AOP_URL as global variables.   Select to install Supporting Objects  Follow the wizard to complete the installation.", 
            "title": "2.1 Prerequisites"
        }, 
        {
            "location": "/#22-import-the-aop-sample-application", 
            "text": "Access your target Workspace  Select the Application Builder  Select Import and select the file in apex/version/aop_sample_apex_app.sql  Follow the wizard to finish the import  The AOP Sample Application will also install all supporting objects, so after the import you can simply start using the application.", 
            "title": "2.2 Import the AOP Sample Application"
        }, 
        {
            "location": "/#23-trying-the-aop-sample-application", 
            "text": "The APEX application that comes with AOP shows different examples of how APEX Office Print can be used inside an application.   By inspecting elements of these pages you can quickly learn how to use AOP Plug-in.  Note that the AOP Sample Application for APEX 5.0, 5.1 and 18.1 are different. The higher the APEX version, the more features you will find in the AOP Sample App.", 
            "title": "2.3 Trying the AOP Sample Application"
        }, 
        {
            "location": "/#231-aop-sample-application-for-apex-50", 
            "text": "AOP Sample application consist out of 19 parts:     Sample Print  This page contains different buttons all linked to different AOP processes and dynamic actions that show different use cases of the AOP plug-in.     Top Features  This section highlights some of the key differentiators of APEX Office Print compared to other print solutions.     Dynamic Print  Dynamically you can select your template in Word, Excel or PowerPoint and output depending on the customer you selected.     Reports Print  This section shows examples where a classic and interactive report and grid is used as the source of the data. There is also an example to print labels.\nYou can even use a combination of multiple classic and interactive reports as your data source. This feature is one of the most impressive of AOP and not found in any other tool.     Chart Print  This section shows examples how to print charts: Line, Bar, Column, Pie, Radar, Area, ... The charts are native Office charts, so they can even be adapted after creation in Word, Excel and Powerpoint.     Rich Text Editor  You can also write your markup in a Rich Text Editor and AOP will understand and translate the markup (bold, color, etc.) into native Word markup. In your template you need to put an underscore in front of the tag name e.g. {_htmlcontent}     Images  APEX Office Print is able to print images in different formats. This screen shows an example how to configure it. In order to show images, you base64 encode those and put a % in your tag e.g. {%image}     QR and Barcodes  APEX Office Print is able to print different Bar- and QR codes. This screen shows an example how to configure it.     Inline PDF  If you want to show the PDF inline in a modal dialog or in a certain div (region), this page shows exactly how to do that. The value of the tag data-aop-inline-pdf should be the name of dynamic action that calls AOP.     Complex Print  The Complex Print section shows different use cases for Word, Excel and Powerpoint. There are different templates that show how to create more complex layouts. There are also some examples that show some specific features like how to use line breaks in your data or how to download two documents at the same time.     Mailings Print  Word has a feature to create labels via the mailings option. This screen shows an example with some specific Avery size labels.     Email Print  This examples shows how you can call a procedure and send an email as attachment. There is also an option to send the email but also downloading the file.     PL/SQL API Sample  Here you can see AOP PL/SQL API in action. It shows how to retrieve a document from AOP server and store it in custom table. This is extremely useful when you want to schedule your print jobs and send automated emails.     Scheduled Print  You can schedule a job to print every day, week, month etc. a specific report by using dbms_scheduler and the AOP PL/SQL API.     Batch Print  If you want to print documents in batch, this page shows you three ways of doing it.  First one will generate one document with the pages in here.\nSecond will generate multiple documents.\nAnd last option will generate multiple documents but present it back as a zip file.     Template and Data Types  This page gives an overview and example of the different template and data types that are possible in the APEX Office Print (AOP) Plug-in and API.\nThe template type defines where your template in docx, xlsx or pptx is defined (table, filesystem, url, APEX, ...). The data type defines where the data can be found to be merged with the template (SQL, PL/SQL, JSON, REST, ...).     AOP Usage  This page gives an overview of the pages where and how the APEX Office Print (AOP) Plug-in is used.     Automated Test  You can automatically test all your documents in this screen and see if all of your defined templates and data sources merged correctly. This option is especially useful after an upgrade of AOP or Office.     Templates  Here you can upload your templates into a custom table.  The idea here is that in your own application, you allow people to create or update their own templates and upload them to the application without the need for developer to code other documents.", 
            "title": "2.3.1 AOP Sample Application for APEX 5.0"
        }, 
        {
            "location": "/#232-aop-sample-application-for-apex-51", 
            "text": "For Oracle Application Express (APEX) 5.1 we wanted to take the AOP Sample App to another level and include more insight how AOP is working. We know reading documentation isn't the most fun, so we put a lot of information into the sample app, so by navigating through it you learn about AOP.   The different parts of the sample app:    Start  walks you step-by-step how you can get AOP working in your own application.     Tour  shows the different techniques you can use and goes in more detail when to use which plug-in, the PL/SQL API or do a manual REST request.     Examples  shows different use cases of AOP, so you can see exactly behind the scenes how AOP is used.     Doc  is a link to the latest version of our online documentation.    More  is a link to our website where you find the release history, FAQ, Tutorials etc.    Support  will open your default email client so you can write us.", 
            "title": "2.3.2 AOP Sample Application for APEX 5.1"
        }, 
        {
            "location": "/#233-aop-sample-application-for-apex-18x", 
            "text": "For Oracle Application Express (APEX) 18.1 and above we recreated the AOP Sample App from scratch. We really recommend going through this sample application. This app showcases the different features AOP has, both specific for APEX as what many people are looking for in a reporting solution. Where possible we added extra information so you have a thorough understanding how AOP works and how to create what you dream of.   The different parts of the sample app:    Installation  walks you step-by-step how you can get AOP working in your own application.     Architecture  shows the flow of the different components and techniques you can use and goes in more detail when to use which plug-in, the PL/SQL API or do a manual REST request.     APEX Features  shows the integration of AOP with specific APEX features like Interactive Reports, Interactive Grid and Calendar.     Examples  shows different possibilities of AOP, so you can see exactly behind the scenes how AOP is used.     Use Cases  show different use cases people requested or had issues with (coming soon).    Debugging  includes how to debug and test AOP.     User Manual  is a link to the latest version of our online documentation.    Support  will open your default email client so you can write us.    Administration  of the application as generated by APEX.", 
            "title": "2.3.3 AOP Sample Application for APEX 18.x"
        }, 
        {
            "location": "/#3-apex-plug-in", 
            "text": "", 
            "title": "3 APEX Plug-in"
        }, 
        {
            "location": "/#31-pre-requisites", 
            "text": "The APEX Office Print APEX plug-in requires Oracle APEX 5.0.4 or higher.  The AOP plug-ins are relying on a PL/SQL package (aop_api_pkg which is a synonym for aop_api18_pkg) that needs to be compiled first.    To make the package available, go into SQL Plus, SQLcl, SQL Developer or SQL Workshop and run the SQL Script aop_db_pkg.sql which you find in the db directory of the zip you downloaded.  Alternatively you can run the install.sql file which will install some additional packages which show case how to use AOP from PL/SQL.  If you imported the AOP Sample App and ran the the Supporting Objects, the packages are automatically installed.", 
            "title": "3.1 Pre-requisites"
        }, 
        {
            "location": "/#32-import-and-plug-in-attributes", 
            "text": "Follow these steps to import the plug-in in your application:   Access your target Workspace  Select the Application Builder  Select the Application where you wish to import the plug-in   (plug-ins belong to an application, not a workspace)  Access  Shared Components   Plug-Ins  Click  Import   Browse and locate the installer files in apex/version/process_type_plugin_be_apexrnd_aop.sql)  Complete the wizard.  Do the same for the dynamic action plug-in in apex/version/dynamic_action_plugin_be_apexrnd_aop.sql)   Follow these steps to finish your Plug-in installation by  adding your Plug-in API key :   Login into  https://www.apexofficeprint.com  Copy your API key from the Dashboard  Access your target APEX Workspace  Select the Application Builder  Select the Application where you wish to import the plug-in (plug-ins belong to an application, not a workspace)  Access  Shared Components   Component Settings  Here select APEX Office Print (AOP) [Plug-in]   Add you API key that you copied in step 2     Click Apply   Installation is now completed   Installation note:\nTo use AOP PL/SQL API you may need to configure your ACL (Access Control List) settings to allow access to:  http(s)://api.apexofficeprint.com  For more details please refer to Oracle APEX installation guide: \nfor  APEX 5.0  or for  APEX 5.1 \nor for  APEX 18.1  In case you want to update some plug-in settings, you find the plug-in settings in Shared Components   Component Settings   APEX Office Print (AOP) [Plug-in]   You can change the AOP URL, AOP Failover URL (and Procedure which is being called on failover), API Key, Debug and specify a package where those settings are specified.\nSince AOP 3.5 you can also specify a Log package which will be called on every request, so you can monitor directly from your Oracle database if prints are successful.\nIf you use the on-premise version of AOP you can also change the Converter.  To generate a PDF, APEX Office Print is using an external converter. By default LibreOffice is used (available on all platforms), but this can be changed to MS Office (Windows only).", 
            "title": "3.2 Import and plug-in Attributes"
        }, 
        {
            "location": "/#33-how-to-use-the-aop-plug-in", 
            "text": "Simply add a new process called AOP (plug-in) on your APEX page once you completed steps in 3.2.", 
            "title": "3.3 How to use the AOP Plug-in"
        }, 
        {
            "location": "/#34-quick-start-demo", 
            "text": "Once the plug-in has been imported into your APEX 5 application navigate to the Sample Database Application \u2013 Page 4.  1) Create a new button called PRINT and place it right of the RESET button.  2) Create a new process (APEX 5.0) or dynamic action (APEX 5.1) called AOP and select as type AOP [Plug-in]  3) Set the Data Type option of the plug-in to SQL and paste following select in the Data Source. Please note the use of cursor  data . The tags that you use in the template should be inside this  data  cursor.  ```sql\nselect\n'file1' as \"filename\",\ncursor(\n    select\n    c.cust_first_name as \"cust_first_name\",\n    c.cust_last_name as \"cust_last_name\",\n    c.cust_city as \"cust_city\",\n    cursor(\n        select\n        o.order_total as \"order_total\",\n        'Order ' || rownum as \"order_name\",\n        cursor(\n            select\n            p.product_name as \"product_name\",\n            i.quantity as \"quantity\",\n            i.unit_price as \"unit_price\",\n            APEX_WEB_SERVICE.BLOB2CLOBBASE64(p.product_image) as \"image\"\n            from\n            demo_order_items i, demo_product_info p\n            where\n            o.order_id = i.order_id\n            and i.product_id = p.product_id\n                ) \"product\"\n        from\n        demo_orders o\n        where\n        c.customer_id = o.customer_id\n            ) \"orders\"\n    from\n    demo_customers c\n    where\n    customer_id = 1\n        ) as \"data\"\nfrom dual\n```  4) As Output Type select docx.  5) Add as Condition for the process set only to run when button clicked PRINT.  6) Hit Save and Run the page.  When clicking on the Print button you should now get your first Word document.\n   This document represents a starting template based on your data. You'll see all tags that you can use and some more explanations how to use expressions and certain features of AOP.\n   You can now create your template in MS Word (or Excel or Powerpoint) and use the tags in your template. Follow the next steps to do this.  7) Create your template in Word and use the tags that came in the first document you got.  8) Go to Shared Components   Static Application Files and upload your template  9) Go back to your page and select the AOP process  10) Change the Template Type to \"Static Application Files\"  11) In Template Source enter your document you uploaded in step 8 e.g. my_template.docx  12) Run your page again  When clicking on the Print button you should now get your Word document based on your template with the tags replaced by the data coming from the database.", 
            "title": "3.4 Quick Start Demo"
        }, 
        {
            "location": "/#35-plug-in-options", 
            "text": "Since AOP v2.3 there are two plug-ins included: a process type plug-in and a dynamic action plug-in. If you are using APEX 5.1, the Dynamic Action plug-in will always work, whereas the Process plug-in only works if the \u201cReload on Submit\u201d attribute (of the page) is set to \u201cAlways\u201d (note this attribute is new in 5.1). This is due to a change how APEX 5.1 is handling Page Processing. If you would import an APEX 5.0 app in 5.1 by default it\u2019s set to Always reload on submit, but if you create a brand new app in 5.1 it\u2019s set to \u201cOnly for Success\u201d and then the process plug-in is not working.  There are different configuration options that can be used in AOP.  In subsections to follow you can find more details for each of them.", 
            "title": "3.5 Plug-in options"
        }, 
        {
            "location": "/#351-template-type", 
            "text": "It stands for what will the source of your templates be.  AOP Plug-in allows you to:    Use AOP default templates    Use static files kept on a server or as Application/Workspace files\n(acting as as global templates)    Dynamically define your templates    AOP Template  Will generate a Word document with a starting template based on the data\n(JSON) that is submitted.  Static Application Files  Will reference files you find in Shared Components   Static\nApplication Files  Static Workspace Files  Will reference files you find in Shared Components   Static Workspace\nFiles  SQL  Query that returns two columns: template_type and file (in this order)   template_type can be: docx,xlsx,pptx  while file column supports: clob base64 of the blob (hint: use apex_web_service.blob2clobbase64 to convert blob to clob).   PL/SQL Function (returning SQL)  Return a select statement as with SQL.  PL/SQL Function (returning JSON)  Return JSON object with following format:  { file : clob base64 data , template_type : docx,xlsx,pptx \n}  Filename (with path relative to AOP server)  Enter the path and filename of the template which is stored on the same\nserver AOP is running at.  URL (returning file)  Enter the url to your template in docx, xlsx or pptx.", 
            "title": "3.5.1 Template Type"
        }, 
        {
            "location": "/#352-template-source", 
            "text": "All types except the default AOP Template type will allow you to configure this setting. It can represent a name of your file or contain code for your SQL and PL/SQL.   Some Template Source examples can be found here:  Static Application Files  aop_simple_letter.docx  Static Workspace Files  aop_simple_letter.docx  SQL  select\n  a.TEMPLATE_TYPE as template_type,\n  apex_web_service.blob2clobbase64(a.TEMPLATE_BLOB) as file\n from aop_template a\nwhere id = 1  PL/SQL Function (returning SQL)  declare\n  l_return clob;\nbegin\n  l_return := q'[\n    select\n      a.TEMPLATE_TYPE as template_type,\n      apex_web_service.blob2clobbase64(a.TEMPLATE_BLOB) as file\n     from aop_template a\n    where id = 1\n  ]';\n  return l_return;\nend;  PL/SQL Function (returning JSON)  declare\n  l_return clob;\n\nbegin\n  l_return := '{  file :  ,  template_type :  docx  }';\n  return l_return;\nend;\n\ndeclare\n  l_return clob;\n  l_template clob;\n  l_template_type aop_template.template_type%type;\n\nbegin\n  select template_type, apex_web_service.blob2clobbase64(template_blob) template\n    into l_template_type, l_template\n    from aop_template\n   where id = :p4_template;\n\n  l_return := '{  file :  ' || replace(l_template,' ', '\\u0022') || ' ,'\n           || '  template_type :  ' || replace(l_template_type,' ', '\\u0022')\n           || '  }';\n  return l_return;\nend;  You can use this technique to load html as template. Please have  a look at page 114 of the sample application.   Filename (with path relative to AOP server)  aop_template.docx  Note: Filename supports Substitutions like Application Items, Page Items and System Variables  URL (returning file)  http://apexofficeprint.com/templates/aop_template_d01.docx", 
            "title": "3.5.2 Template Source"
        }, 
        {
            "location": "/#353-data-type", 
            "text": "Data Type states what kind of data source you will be using.  Available options include:  SQL  Select statement in which you can use cursor to do nested records. Use \"\" as alias column names to force lower case column names. \nThe data you select should be inside the data cursor. AOP plug-in expects two columns: filename and data.  select\n    'file1' as  filename ,\n    cursor\n    (\n        ***Your select statement***\n    ) as  data \nfrom dual  PL/SQL Function (returning SQL)  Return a select statement as with SQL.  PL/SQL Function (returning JSON)  Return JSON defined in URL example above.  URL (returning JSON)  Source should point to URL that returns JSON object with following format: { \"filename\": \"file1\", \"data\":[{...}] } If the URL is using an APEX ORDS REST call it will automatically be wrapped with additional JSON: {\"items\":[...]} All of this will be handled for you by AOP Plug-in.  Region(s): Classic and/or Interactive Report(s) and/or Interactive Grid(s) and/or Charts  One or more classic and/or interactive reports and/or interactive grids will be used as the source for your data. The Dynamic Action plug-in also has the possibility to take a screenshot of for example a JET chart or any other div (svg/canvas).  Note that you can use bind variables like :PX_ITEM as well in your SQL-statement. You find examples when you click on Help in the APEX Plug-in when you're on the Data Source field", 
            "title": "3.5.3 Data Type"
        }, 
        {
            "location": "/#354-data-source", 
            "text": "Depends on selected Data Type and it can be:  SQL  select\n  'file1' as  filename ,\n  cursor(\n    select\n      c.cust_first_name as  cust_first_name ,\n      c.cust_last_name as  cust_last_name ,\n      c.cust_city as  cust_city ,\n      cursor(\n        select\n          o.order_total as  order_total ,\n          'Order ' || rownum as  order_name ,\n          cursor(\n            select\n              p.product_name as  product_name ,\n              i.quantity as  quantity ,\n              i.unit_price as  unit_price ,\n              APEX_WEB_SERVICE.BLOB2CLOBBASE64(p.product_image) as  image \n            from\n              demo_order_items i, demo_product_info p\n            where\n              o.order_id = i.order_id\n              and i.product_id = p.product_id\n                )  product \n        from\n          demo_orders o\n        where\n          c.customer_id = o.customer_id\n            )  orders \n    from\n      demo_customers c\n    where\n      customer_id = :P4_CUSTOMER_ID\n        ) as  data \nfrom dual  Be sure to put the the returned data inside the  data  cursor.  select\n  'file1' as  filename ,\n  cursor(\n      ***Your Select Statement***\n  )\n   as  data \nfrom dual  PL/SQL Function (returning SQL)  The returned SQL should contain the data inside data cursor like above.  declare\n  l_return clob;\nbegin\n  l_return := q'[\n    select\n      'file1' as  filename ,\n      cursor(\n        select\n          c.cust_first_name as  cust_first_name ,\n          c.cust_last_name as  cust_last_name ,\n          c.cust_city as  cust_city ,\n          cursor(\n            select\n              o.order_total as  order_total ,\n              'Order ' || rownum as  order_name ,\n              cursor(\n                select\n                  p.product_name as  product_name ,\n                  i.quantity as  quantity ,\n                  i.unit_price as  unit_price ,\n                  APEX_WEB_SERVICE.BLOB2CLOBBASE64(p.product_image) as  image \n                from\n                  demo_order_items i, demo_product_info p\n                where\n                  o.order_id = i.order_id\n                  and i.product_id = p.product_id\n                    )  product \n            from\n              demo_orders o\n            where\n              c.customer_id = o.customer_id\n                )  orders \n        from\n          demo_customers c\n        where\n          customer_id = :P4_CUSTOMER_ID\n            ) as  data \n    from dual\n  ]';\n  return l_return;\nend;  PL/SQL Function (returning JSON)  Note how the JSON contains the data object with the actual data inside it.  declare\n  l_cursor sys_refcursor;\n  l_return clob;\nbegin\n  apex_json.initialize_clob_output(dbms_lob.call, true, 2) ;\n  open l_cursor for\n    select 'file1' as  filename ,\n      cursor\n        (select\n         c.cust_first_name as  cust_first_name ,\n         c.cust_last_name as  cust_last_name  ,\n         c.cust_city as  cust_city  ,\n         cursor\n           (select\n              o.order_total as  order_total ,\n              'Order ' || rownum as  order_name  ,\n              cursor\n              (select\n                 p.product_name as  product_name ,\n                 i.quantity as  quantity  ,\n                 i.unit_price as  unit_price  ,\n                 apex_web_service.blob2clobbase64(p.product_image) as  image \n               from\n                 demo_order_items i,\n                 demo_product_info p\n               where\n                 o.order_id = i.order_id\n                 and i.product_id = p.product_id\n               )  product \n            from\n              demo_orders o\n            where\n              c.customer_id = o.customer_id\n                and rownum   2\n           ) orders \n         from\n           demo_customers c\n         where\n           customer_id = :P4_CUSTOMER_ID\n        ) as  data \n    from dual;\n  apex_json.write(l_cursor);\n  l_return := apex_json.get_clob_output;\n  return l_return;\n end;  URL with ORDS RESTful Web Service  For this you need to create a new Webservice following these steps:    Open SQL Workshop -  RESTful services.  Click Create button and follow the wizard. For RESTful Services Module set   Name can be of your preference.    For Resource Template enter:     For Resource Handler enter:   The statement we used in this example is:    select\n  file1' as  filename ,\n  cursor(\n    select\n      c.cust_first_name,\n      c.cust_last_name,\n      c.cust_city,\n      cursor(\n        select\n          o.order_total,\n          'Order ' || rownum as order_name,\n          cursor(\n            select\n              p.product_name,\n              i.quantity,\n              i.unit_price,\n              APEX_WEB_SERVICE.BLOB2CLOBBASE64(p.product_image) as image\n            from\n              demo_order_items i,\n              demo_product_info p\n            where\n              o.order_id = i.order_id\n              and i.product_id = p.product_id\n                ) product\n        from\n          demo_orders o\n        where\n          c.customer_id = o.customer_id\n          and rownum   2\n            ) orders\n    from\n      demo_customers c\n    where\n      customer_id = :id\n        ) as  data \nfrom dual  4.Finally click Create Module button.  Note: For Resource Handler: GET setting after you created your RESTful service you may need to change Requires Secure Access setting from default Yes to No.  Classic and/or Interactive Report(s) and/or Interactive Grid(s)  not defined in Data Source but in Region Static ID(s) (see 3.5.5)", 
            "title": "3.5.4 Data Source"
        }, 
        {
            "location": "/#355-region-static-ids", 
            "text": "Define one or more Static Id(s) of the report region (Classic or Interactive Report or Interactive Grid). Static ids should be separated by a comma. e.g. classic1,ir1,ir2\nYou can set the Static ID of the region in the region attributes.\nYou can call a specific Interactive Report by adding a pipe next to it e.g. ir1|my_saved_report.", 
            "title": "3.5.5 Region Static ID(s)"
        }, 
        {
            "location": "/#356-special", 
            "text": "Specific features of APEX Office Print which become available when the data type is SQL or Classic and/or Interactive Report(s)  Available options include:  Treat all numbers as strings \nThere's a limitation in APEX with the cursor() statement in SQL that it doesn't remember which datatype the column is in. So when doing to_char(0.9,'990D00') it will return 0.9 as number instead of as string '0.90'. To resolve this, enable this checkbox and concatenate your number with '!FMT!' e.g. '!FMT!'||to_char(35, '990D00') - !FMT! stands for format.  Alternatively if you format your number with the currency sign to_char(35,'FML990D00') Oracle will recognise it as a string and you don't need to use this checkbox.  Report as Labels \nCheck this box in case you want to use the Classic or Interactive Report data source but print them as Labels (using the Mailings feature in Word). * this option is deprecated since AOP 3.0 as AOP understands labels depending the template.  IR/IG: Show Filters on top \nWhen there're filters applied to the Interactive Report/Grid, this checkbox will print them above the report.  IR/IG: Show Highlights on top \nWhen there're highlights applied to the Interactive Report/Grid, this checkbox will print them above the report.  IR/IG: Show header with filter (Excel) \nWhen checked AOP will make the header of the Interactive Report/Grid in Excel a filter.  IR/IG: Use Saved Report instead of Report in Session \nIf you want to make sure you always call a specific Interactive Report/Grid, without taking into account what the person is doing with it, you can check this box and the named (saved) Interactive Report will be taken. e.g. ir1|my_saved_report would be in your source.  IR/IG: Repeat header on every page \nWhen the table spans multiple pages, the header row will be repeated on every page.", 
            "title": "3.5.6 Special"
        }, 
        {
            "location": "/#357-output-filename-only-in-the-process-plug-in", 
            "text": "The filename can be a hard coded string or reference an APEX item. It does not need to include the file extension. If a file extension is defined that is different than the output type selected, a new file extension will be appended to the filename.\nSee further how to specify the output filename in the Dynamic Action plug-in (Init PL/SQL Code).  Filename examples  Static: my_file  APEX Item:  P1_FILENAME.", 
            "title": "3.5.7 Output Filename (only in the Process Plug-in)"
        }, 
        {
            "location": "/#358-init-plsql-code-only-in-the-dynamic-action-plug-in", 
            "text": "You can define global variables of the aop_api_pkg in this area.  For example you can set the output filename or a font:  aop_api_pkg.g_output_filename      := 'output';\naop_api_pkg.g_output_filename      := v('P1_FILENAME');\naop_api_pkg.g_rpt_header_font_size := '12';", 
            "title": "3.5.8 Init PL/SQL Code (only in the Dynamic Action Plug-in)"
        }, 
        {
            "location": "/#359-output-type", 
            "text": "Available options include:   Word (docx)  Excel (xlsx)  Powerpoint (pptx)  PDF (pdf)  HTML (html)  Markdown (md)  Word (rtf)  Defined by APEX Item", 
            "title": "3.5.9 Output Type"
        }, 
        {
            "location": "/#3510-output-to", 
            "text": "Available options include:  Browser  The browser will download the file to your Downloads folder.  Procedure  This option will call a procedure in a specific format e.g. send_email_prc. This option is useful in case you do not need the file on your own hard drive, but for example you want to mail the document automatically. In that case you can create a procedure that adds the generated document as an attachment to your apex_mail.send.  In the database the procedure needs to have following parameters:  procedure send_email_prc(\n    p_output_blob in blob,\n    p_output_filename in varchar2,\n    p_output_mime_type in varchar2)  Procedure and Browser  This option allows you to call a procedure first and next download the file to your hard drive. An example is when you first want to store the generated document in a table before letting the browser to download it.  Inline Region (pdf/html/md only)  If you want to output a PDF in a certain region or as a pop-up modal dialog, use this option. See section: 2.3.1.9 for more info.  Directory (on AOP Server)  Save the file to a directory specified with g_output_directory. The default directory on the AOP Server is outputfiles. If you point this to a directory on a shared server or to a directory known by Google Drive or Dropbox, you can easily generate and share documents. Note that the AOP server should enable this option by using the  --enable_save  argument. It goes without saying that this option is not available while using cloud subscription.", 
            "title": "3.5.10 Output To"
        }, 
        {
            "location": "/#4-plsql-api", 
            "text": "", 
            "title": "4 PL/SQL API"
        }, 
        {
            "location": "/#41-pre-requisites", 
            "text": "APEX 5.0.4 or higher needs to be installed in the database as the PL/SQL API uses some packages that come with APEX e.g. apex_json", 
            "title": "4.1 Pre-requisites"
        }, 
        {
            "location": "/#42-install-in-the-database", 
            "text": "Go into SQL Plus, SQLcl, SQL Developer or SQL Workshop and make sure following packages exist aop_api18_pkg and aop_plsql18_pkg and the synonyms aop_api_pkg and aop_plsql_pkg. As part of the installation those packages should have been compiled.", 
            "title": "4.2 Install in the Database"
        }, 
        {
            "location": "/#43-how-to-use", 
            "text": "You can call AOP straight from PL/SQL. APEX Office Print comes with two different ways of calling AOP; one package is aop_api_pkg which is also used behind the scenes in the APEX Plug-in and the other on is aop_plsql_pkg.\naop_plsql_pkg is especially useful when you just want to do the call to the AOP server component or cloud.  Next to the above two packages we also provide two additional packages that show how to do the pl/sql calls. See the packages aop_sample18_pkg and aop_test18_pkg.", 
            "title": "4.3 How to use"
        }, 
        {
            "location": "/#44-parameters", 
            "text": "aop_api_pkg  Global variables which can be set  -- Logger\ng_logger_enabled            boolean := true;        -- In case you use Logger (https://github.com/OraOpenSource/Logger), you can compile this package to enable Logger output:\n                                                    -- SQL  ALTER PACKAGE aop_api18_pkg COMPILE PLSQL_CCFLAGS = 'logger_on:TRUE'; \n                                                    -- When compiled and this global variable is set to true, debug will be written to logger too\n-- Call to AOP\ng_aop_url                   varchar2(100) := null;  -- AOP Server url\ng_api_key                   varchar2(50)  := null;  -- AOP API Key; only needed when AOP Cloud is used (http(s)://www.apexofficeprint.com/api)\ng_failover_aop_url          varchar2(100) := null;  -- AOP Server url in case of failure of AOP url\ng_failover_procedure        varchar2(200) := null;  -- When the failover url is used, the procedure specified in this variable will be called\ng_output_converter          varchar2(50)  := null;  -- Set the converter to go to PDF (or other format different from template) e.g. officetopdf or libreoffice\ng_proxy_override            varchar2(300) := null;  -- null=proxy defined in the application attributes\ng_transfer_timeout          number(6)     := 1800;  -- default of APEX is 180\ng_wallet_path               varchar2(300) := null;  -- null=defined in Manage Instance   Instance Settings\ng_wallet_pwd                varchar2(300) := null;  -- null=defined in Manage Instance   Instance Settings\ng_output_filename           varchar2(100) := null;  -- output\ng_cloud_provider            varchar2(30)  := null;  -- dropbox, gdrive, onedrive, aws_s3\ng_cloud_location            varchar2(300) := null;  -- directory in dropbox, gdrive, onedrive, aws_s3 (with bucket)\ng_cloud_access_token        varchar2(500) := null;  -- access token for dropbox, gdrive, onedrive, aws_s3 (needs json)\ng_language                  varchar2(2)   := 'en';  -- Language can be: en, fr, nl, de, used for the translation of filters applied etc. (translation build-in AOP)\ng_app_language              varchar2(20)  := null;  -- Language specified in the APEX app (primary language, translated language), when left to null, apex_util.get_session_lang is being used\ng_logging                   clob          := '';    -- ability to add your own logging: e.g. \"request_id\":\"123\", \"request_app\":\"APEX\", \"request_user\":\"RND\"\ng_debug                     varchar2(10)  := null;  -- set to 'Local' when only the JSON needs to be generated, 'Remote' for remore debug\ng_debug_procedure           varchar2(4000):= null;  -- when debug in APEX is turned on, next to the normal APEX debug, this procedure will be called\n                                                    --   e.g. to write to your own debug table. The definition of the procedure needs to be the same as aop_debug\n-- APEX Page Items\ng_apex_items                varchar2(4000):= null;  -- colon separated list of APEX items e.g. P1_X:P1_Y, which can be referenced in a template using {Pxx_ITEM}                                                    \n-- Layout for IR \ng_rpt_header_font_name      varchar2(50)  := '';    -- Arial - see https://www.microsoft.com/typography/Fonts/product.aspx?PID=163\ng_rpt_header_font_size      varchar2(3)   := '';    -- 14\ng_rpt_header_font_color     varchar2(50)  := '';    -- #071626\ng_rpt_header_back_color     varchar2(50)  := '';    -- #FAFAFA\ng_rpt_header_border_width   varchar2(50)  := '';    -- 1 ; '0' = no border\ng_rpt_header_border_color   varchar2(50)  := '';    -- #000000\ng_rpt_data_font_name        varchar2(50)  := '';    -- Arial - see https://www.microsoft.com/typography/Fonts/product.aspx?PID=163\ng_rpt_data_font_size        varchar2(3)   := '';    -- 14\ng_rpt_data_font_color       varchar2(50)  := '';    -- #000000\ng_rpt_data_back_color       varchar2(50)  := '';    -- #FFFFFF\ng_rpt_data_border_width     varchar2(50)  := '';    -- 1 ; '0' = no border\ng_rpt_data_border_color     varchar2(50)  := '';    -- #000000\ng_rpt_data_alt_row_color    varchar2(50)  := '';    -- #FFFFFF for no alt row color, use same color as g_rpt_data_back_color\n/* see also Printing attributes in Interactive Report */\n-- Settings for Calendar\ng_cal_type                  varchar2(10)  := 'month'; -- can be month (default), week, day, list\ng_start_date                date          := null;    -- start date of calendar\ng_end_date                  date          := null;    -- end date of calendar\ng_weekdays                  varchar2(300) := null;    -- translation for weekdays e.g. Monday:Tuesday:Wednesday etc.\ng_months                    varchar2(300) := null;    -- translation for months   e.g. January:February etc.  \ng_color_days_sql            varchar2(4000):= null;    -- color the background of certain days. \n                                                    --   e.g. select 1 as \"id\", sysdate as \"date\", 'FF8800' as \"color\" from dual\n-- HTML template to Word/PDF\ng_orientation               varchar2(50)  := '';      -- empty is portrait, other option is 'landscape'\n-- Call to URL data source\ng_url_username              varchar2(300) := null;\ng_url_password              varchar2(300) := null;\ng_url_proxy_override        varchar2(300) := null;\ng_url_transfer_timeout      number        := 180;\ng_url_body                  clob          := empty_clob();\ng_url_body_blob             blob          := empty_blob();\ng_url_parm_name             apex_application_global.vc_arr2; --:= empty_vc_arr;\ng_url_parm_value            apex_application_global.vc_arr2; --:= empty_vc_arr;\ng_url_wallet_path           varchar2(300) := null;\ng_url_wallet_pwd            varchar2(300) := null;\ng_url_https_host            varchar2(300) := null;    -- parameter for apex_web_service, not used, please apply APEX patch if issues\n-- Web Source Module (APEX  = 18.1)\ng_web_source_first_row      pls_integer   := null;    -- parameter for apex_exec.open_web_source_query\ng_web_source_max_rows       pls_integer   := null;    -- parameter for apex_exec.open_web_source_query\ng_web_source_total_row_cnt  boolean       := false;   -- parameter for apex_exec.open_web_source_query\n-- REST Enabled SQL (APEX  = 18.1)\ng_rest_sql_auto_bind_items  boolean       := true;    -- parameter for apex_exec.open_remote_sql_query\ng_rest_sql_first_row        pls_integer   := null;    -- parameter for apex_exec.open_remote_sql_query\ng_rest_sql_max_rows         pls_integer   := null;    -- parameter for apex_exec.open_remote_sql_query\ng_rest_sql_total_row_cnt    boolean       := false;   -- parameter for apex_exec.open_remote_sql_query\ng_rest_sql_total_row_limit  pls_integer   := null;    -- parameter for apex_exec.open_remote_sql_query\n-- IP Printer support\ng_ip_printer_location       varchar2(300) := null;\ng_ip_printer_version        varchar2(300) := '1';\ng_ip_printer_requester      varchar2(300) := nvl(apex_application.g_user, USER);\ng_ip_printer_job_name       varchar2(300) := 'AOP';\ng_ip_printer_return_output  varchar2(5)   := null;   -- null or 'Yes' or 'true'\n-- Convert characterset\ng_convert                   varchar2(1)   := c_n;    -- set to Y (c_y) if you want to convert the JSON that is send over; necessary for Arabic support\ng_convert_source_charset    varchar2(20)  := null;   -- default of database \ng_convert_target_charset    varchar2(20)  := 'AL32UTF8';  \n-- Output\ng_output_directory          varchar2(200) := '.';    -- set output directory on AOP Server\n                                                    -- if . is specified the files are saved in the default directory: outputfiles\ng_output_split              varchar2(5)   := null;   -- split file: one file per page: true/false\n\n-- Files\ng_prepend_files_sql         clob := null;    -- format: select filename, mime_type, [file_blob, file_base64, url_call_from_db, url_call_from_aop, file_on_aop_server]\ng_append_files_sql          clob := null;    --           from my_table\n\n-- Sub-Templates\ng_sub_templates_sql         clob := null;    -- format: select filename, mime_type, [file_blob, file_base64, url_call_from_db, url_call_from_aop, file_on_aop_server] from my_table\n\n-- Password protected PDF\ng_output_read_password      varchar2(200) := null;  -- protect PDF to read\ng_output_modify_password    varchar2(200) := null;  -- protect PDF to write (modify)\ng_output_pwd_protection_flag number(4)    := null;  -- optional; default is 4.  Function call  function plsql_call_to_aop(\n  p_data_type             in varchar2 default c_source_type_sql,\n  p_data_source           in clob,\n  p_template_type         in varchar2 default c_source_type_apex,\n  p_template_source       in clob,\n  p_output_type           in varchar2,\n  p_output_filename       in out nocopy varchar2,\n  p_output_type_item_name in varchar2 default null,\n  p_output_to             in varchar2 default null,\n  p_procedure             in varchar2 default null,\n  p_binds                 in wwv_flow_plugin_util.t_bind_list default c_binds,\n  p_special               in varchar2 default null,\n  p_aop_remote_debug      in varchar2 default 'No',\n  p_output_converter      in varchar2 default null,\n  p_aop_url               in varchar2,\n  p_api_key               in varchar2,\n  p_app_id                in number default null,\n  p_page_id               in number default null,\n  p_user_name             in varchar2 default null,\n  p_init_code             in clob default 'null;',\n  p_output_encoding       in varchar2 default c_output_encoding_raw,\n  p_failover_aop_url      in varchar2 default null,\n  p_failover_procedure    in varchar2 default null,\n  p_log_procedure         in varchar2 default null,\n  p_prepend_files_sql     in clob     default null,\n  p_append_files_sql      in clob     default null,\n  p_sub_templates_sql     in clob     default null)\n  return blob;  Note that some other procedures and functions are available in the package which could be helpful.  aop_plsql_pkg  function make_aop_request(\n  p_aop_url          in varchar2 default g_aop_url,\n  p_api_key          in varchar2 default g_api_key,\n  p_json             in clob,\n  p_template         in blob,\n  p_output_encoding  in varchar2 default 'raw', -- change to raw to have binary, change to base64 to have base64 encoded\n  p_output_type      in varchar2 default null,\n  p_output_filename  in varchar2 default 'output',\n  p_aop_remote_debug in varchar2 default 'No')\n  return blob;", 
            "title": "4.4 Parameters"
        }, 
        {
            "location": "/#45-example", 
            "text": "Example with  aop_api_pkg  declare\n  l_binds           wwv_flow_plugin_util.t_bind_list;\n  l_return          blob;\n  l_output_filename varchar2(100) := 'output';\nbegin\n  -- define bind variables\n  l_binds(1).name := 'p_id';\n  l_binds(1).value := '1';\n\n  l_return := aop_api_pkg.plsql_call_to_aop (\n                p_data_type       =  'SQL',\n                p_data_source     =  q'[\n                  select\n                    'file1' as \"filename\",\n                    cursor(\n                      select\n                        c.cust_first_name as \"cust_first_name\",\n                        c.cust_last_name as \"cust_last_name\",\n                        c.cust_city as \"cust_city\",\n                        cursor(select o.order_total as \"order_total\",\n                                      'Order ' || rownum as \"order_name\",\n                                  cursor(select p.product_name as \"product_name\",\n                                                i.quantity as \"quantity\",\n                                                i.unit_price as \"unit_price\", APEX_WEB_SERVICE.BLOB2CLOBBASE64(p.product_image) as \"image\"\n                                           from demo_order_items i, demo_product_info p\n                                          where o.order_id = i.order_id\n                                            and i.product_id = p.product_id\n                                        ) \"product\"\n                                 from demo_orders o\n                                where c.customer_id = o.customer_id\n                              ) \"orders\"\n                      from demo_customers c\n                      where customer_id = :p_id\n                    ) as \"data\"\n                  from dual\n                ]',\n                p_template_type   =  'SQL',\n                p_template_source =  q'[\n                   select template_type, template_blob\n                    from aop_template\n                   where id = 1\n                ]',\n                p_output_type     =  'docx',\n                p_output_filename =  l_output_filename,\n                p_binds           =  l_binds,\n                p_aop_url         =  'http://api.apexofficeprint.com/',\n                p_api_key         =  '1C511A58ECC73874E0530100007FD01A',\n                p_app_id          =  232);\nend;  Example with  aop_plsql_pkg  declare\n  l_template        blob;\n  l_output_file     blob;\nbegin\n  select template_blob\n    into l_template\n    from aop_template\n   where id = 1;\n\n  l_output_file := aop_plsql_pkg.make_aop_request(\n                     p_json        =  '[{ \"filename\": \"file1\", \"data\": [{ \"cust_first_name\": \"APEX Office Print\" }] }]',\n                     p_template    =  l_template,\n                     p_output_type =  'docx',\n                     p_aop_remote_debug =  'Yes');\nend;  In  aop_sample18_pkg  you find the above examples and you can run them with following command:  begin\n    aop_sample18_pkg.call_aop_plsql_pkg;\n    aop_sample18_pkg.call_aop_api_pkg;\nend;  Note that there are more examples in the  aop_sample18_pkg , so it's worthwhile to check it out.", 
            "title": "4.5 Example"
        }, 
        {
            "location": "/#46-plsql-api-documentation", 
            "text": "The complete reference can be found in the  AOP PL/SQL API documentation .", 
            "title": "4.6 PL/SQL API Documentation"
        }, 
        {
            "location": "/#5-manual-rest-call", 
            "text": "", 
            "title": "5 Manual (REST) call"
        }, 
        {
            "location": "/#51-overview", 
            "text": "Behind the scenes the APEX plug-in is creating a JSON file that will be sent to the AOP server. Below you find more details about the JSON structure that is used. By understanding this JSON structure you can manually interact with the AOP server in case you wanted to code in PL/SQL or other languages.", 
            "title": "5.1 Overview"
        }, 
        {
            "location": "/#52-json-file", 
            "text": "The JSON file is a file that follows the standard JSON structure ( http://json.org/ ).  This JSON file contains an JSON object meaning it starts with { and ends with }. This JSON object contains four compulsory JSON objects namely \"template\", \"output\", \"files\", \"api_key\" and a few optional object \"version\", \"logging\", \"apex_version\", \"aop_remote_debug\" and \"ipp\". The purpose of each object will now be explained.", 
            "title": "5.2 JSON File"
        }, 
        {
            "location": "/#521-version-object", 
            "text": "This object contains the version of AOP JSON format used. The current version is 18.1 and backwards compatible thus optional. This will be used for future upgrades and if the newer version is not backwards compatible.", 
            "title": "5.2.1 \"version\" object"
        }, 
        {
            "location": "/#522-template-object", 
            "text": "This object has the necessary information about the template. It contains:     JSON  Explanation      \"file\"  This contains the template to be used, encoded in base64.    \"filename\"  This option is for on-premise users. The template defined by this object will be used for processing. Note that the filename either contains a relative path from where the server is running from (or the folder/directory containing application) or an absolute path.    \"template_type\"  This states what kind of template is being used. It must be either \"docx\", \"pptx\", \"xlsx\", \"html\" or \"md\".    \"html_template_content\"  Since AOP 3.4 it is possible to just pass html as template. This is equivalent as using {_html} tag in word to create the template which is then again passed to the AOP with the data for rendering.    \"orientation\"  nothing or \"landscape\". If landscape is provided then the html template content will be rendered in a landscape A4 word template. Taken only into account when html_template_content is provided.    If \"file\" and \"filename\" objects are not present in the \"template\" object then the server will respond with a custom template file of \"template_type\" made from this given JSON file. Currently only Word, Excel and Powerpoint template generation is supported.", 
            "title": "5.2.2 \"template\" object"
        }, 
        {
            "location": "/#523-output-object", 
            "text": "This object has the necessary information for producing an output file from the given JSON file. It contains:     JSON  Explanation      \"output_type\"  This states what kind of output file type is required. It can be either the same as template_type (\"docx\", \"pptx\", \"xlsx\", \"html\", \"md\"), \"pdf\" or any other output file supported by libreoffice/openoffice. Special output type: \"onepagepdf\", this will cause the ouptut to be converted to pdf and all the pages will be merged into one single page.  Default: the same as template_type.    \"output_encoding\"  This states what kind of output encoding is wished for the output file. It must be either \"raw\" or \"base64\".    \"output_converter\"  This states which software should be used to convert to pdf. The ApexOfficePrint server usages LibreOffice. On premise users may use MS Office but will need to do some configuration first. Available values: \"officetopdf\" (Windows only) or \"libreoffice\" (Windows, Linux, OSX) or anyother custom defined converters in aop_config.json file (see setting up AOP) if you are using On Premise Version.    \"output_directory\"  If save on disk is enabled, then the document will be saved on the path resulted by combining this given path with the specified directory.    \"output_modify_password\"  Requires output pdf, the password needed to modify the pdf. Optional. Read password, if given, will be used if this field is empty.    \"output_read_password\"  Requires output pdf, the password needed to open the pdf. Optional.    \"output_password_protection_flag\"  Requires output pdf,  bit field explained in the PDF specs in table 3.20 in section 3.5.2, should be given in decimal  more info . Optional. Default (4).", 
            "title": "5.2.3 \"output\" object"
        }, 
        {
            "location": "/#523-api_key", 
            "text": "The value of this key is the api key given by ApexOfficePrint. Only applicable for service users.", 
            "title": "5.2.3 \"api_key\""
        }, 
        {
            "location": "/#524-file-array", 
            "text": "This array contains the data that will be used for the given template.\nIf this array contains more than one object then the output files, which are generated using the same template for each item, will be returned in a zip file. This array contains JSON objects with following fields:     JSON  Explanation      \"filename\"  This field contains the name of the output file.    \"data\"  This array (containing one object) or object contains the data that will be replaced in the template.     Example showing a basic JSON file which should be populated with data:  {\n     template : {\n            filename                : template.docx ,\n            template_type           : docx \n    },\n     output : {\n            output_encoding         : raw ,\n            output_type             : docx ,\n            output_directory        : . \n    },\n     files : [{\n              filename              : file1 ,\n              data                  : [{...}]\n    }]\n}", 
            "title": "5.2.4 \"file\" array"
        }, 
        {
            "location": "/#525-logging-object", 
            "text": "When AOP is started with --enable_printlog, it will create a file on the server called server_printjob.log.\nYou can add additional logging information next to the one AOP is logging by default, by adding additional keys and values in the logging object.  For example:       logging : {\n         template_filename :  AOP template ,\n         output_filename :  output.docx \n    }", 
            "title": "5.2.5 \"logging\" object"
        }, 
        {
            "location": "/#526-ipp-object", 
            "text": "AOP supports to print directly to an IP Printer by using this setting. If your IPP printer supports pdf files, your documents will be converter to pdf and sent to IPP printer. If your printer does not support PDF and supports Postscript then the pdf generated is converter to pdf using pdftops. You need download xpdf tools from: https://www.xpdfreader.com/download.html. Make sure that the binary pdftops is on PATH variable. You can download executables from apexofficeprint.com to check whether or not your IPP printer supports PDF/postscript.\nThe structure is:  ipp : {\n         location :  http://10.0.14.223:631/ ,\n         version :  1.1 ,\n         requester :  YOUR NAME ,\n         job_name :  AOP \n    }", 
            "title": "5.2.6 \"ipp\" object"
        }, 
        {
            "location": "/#6-templates", 
            "text": "The templates are standard office files in which tags will be replaced by structured data from the JSON file. These tags are quite standardized for either  .docx ,  .pptx  or  .xlsx , however there are some subtle differences. They are all able to handle  JavaScript angular expressions , on which some of the basics will follow.", 
            "title": "6 Templates"
        }, 
        {
            "location": "/#60-tag-overview", 
            "text": "In the table below is an overview of the available tags and their support in Word, Excel and PowerPoint respectively. For more information on each tag, see the sections that follow.     Tag  Word  Excel  PowerPoint  HTML  Markdown  Txt      {data_string}  Yes  Yes  Yes  Yes  Yes  Yes    {data_string_with_cell_markup$}  Yes  Yes  No  No  No  N.A    {-labels}  Yes  N.A  N.A  N.A  N.A  N.A    {_htmlcontent}  Yes  No  No  Yes (by default)  Yes (by default)  N.A    {!slide_loop}  N.A  N.A  Yes  N.A  N.A  N.A    {!excelsheet_loop}  N.A  Yes  N.A  N.A  N.A  N.A    {#data_loop} \u2026 {/data_loop}  Yes  Yes  Yes  Yes  Yes  Yes    {:data_loop_horizontal} \u2026 {/data_loop_horizontal}  Yes  Yes  No  No  No  No    {=table_row_loop} \u2026 {/table_row_loop}  N.A  N.A  Yes  N.A  N.A  N.A    {%imageKey}  Yes  Yes  Yes  Yes  Yes  N.A    { barcode}  Yes  Yes  Yes  Yes  Yes  N.A    { qrcode}  Yes  Yes  Yes  Yes  Yes  N.A    {$chart}  Yes  Yes  Yes  No  No  N.A    { interactive_report}  Yes  Yes  No  No  No  N.A    { interactive_grid }  Yes  Yes  No  No  No  N.A    { rightToLeft}  Yes  Not Necessary  Not Necessary  Not Necessary  Not Necessary  N.A    {+footnote}  Yes  No  No  No  No  N.A    {*hyperlink}  Yes  Yes  Yes  Not Necessary  Not Necessary  N.A    {~}  Yes  N.A  N.A  N.A  N.A  N.A     Note: tags can't start with a number and should start with an alphabetical character (a-z,A-Z)", 
            "title": "6.0 Tag Overview"
        }, 
        {
            "location": "/#61-word-docx-template", 
            "text": "These templates can contain the following tags:", 
            "title": "6.1 Word (docx) template"
        }, 
        {
            "location": "/#611-data95string-tags", 
            "text": "This tag,  {data_string},  will be replaced by the value of the key  \"data_string\"  in the JSON file.", 
            "title": "6.1.1 {data_string} tags"
        }, 
        {
            "location": "/#6111-data-string-example", 
            "text": "Given the JSON file with following content:      {\n         template : {\n                filename                : template.docx ,\n                template_type           : docx \n        },\n         output : {\n                output_encoding         : raw ,\n                output_type             : docx \n        },\n         files : [{\n                  filename              : output ,\n                  data : [{\n                          first_name    : DemoName ,\n                          last_name     : DemoLastName ,\n                          city          : DemoCity \n                  }]\n        }]\n    }  and template.docx with following content:                                               {last_name} {first_name}\n                                             {city}  will result in:                                                DemoLastName DemoName\n                                              DemoCity  Since the template and the output objects from the json will not change, these will be omitted from the examples given below.", 
            "title": "6.1.1.1 Data string example"
        }, 
        {
            "location": "/#612-imagekey-tags", 
            "text": "This tag is the same as {data_string} but instead getting replaced by a string this tag is replaced by an image that is placed in the value of key \"imagekey\" after base64 encoding. Note that imagekey is just a variable. An image tag is represented by \"%\" after curly bracket.\nYou can also specify a fixed width and the height by adding following values \"imagekey_width\" and \"imagekey_height\". If you want to scale your image proportionally you can use the \"imagekey_max_width\" and \"imagekey_max_height\" tags. An example is created in the AOP Sample Application which shows how it works. The imagekey is pic, so we can use pic_max_width for example.\nThe given data can be a base64 encoded image or a URL pointing to an image(the url must have image extension) or a ftp server image.", 
            "title": "6.1.2 {%imagekey} tags"
        }, 
        {
            "location": "/#6121-image-tag-example", 
            "text": "Replace /...code..../ for the base64 encoded string of the image      {\n        ...\n         files :[{\n                  filename         : output ,\n             data :[{\n                   product_name    : Wallet ,\n                   price           : $500.00 ,\n                   pic             : /...code..../ ,\n                   pic_max_width   : 100,\n                   pic_max_height  : 100\n            }]\n        }]\n    }  with template:     Product  Image  Price      {product_name}  {%pic}  {price}     will result in:    Tip: in case you want to make your images equal in size, you can use PL/SQL to resize your images. Here's an example to put the size of the image to a maximum of 200px.  declare\n  l_img blob;\nbegin\n  select image\n    into l_img\n    from my_table\n   where id = 1 for update;\n  ordsys.ordimage.process(l, 'maxscale=200 200');\n  update my_table\n     set image = l\n   where id = 1;\nend;", 
            "title": "6.1.2.1 Image tag example"
        }, 
        {
            "location": "/#613-barcode-qrcode-tags", 
            "text": "This tag will be replaced by the barcode or QR code created using the data of the key named  \"barcode\"  or  \"qrcode\" . Notice that these are also variable. Barcode or qrcode tags are represented by | after\ncurly bracket. If this tag is found in the document there must be additional supporting keys containing the options for these tags. These options are:    key_type, e.g. \"barcode_type\" if the key used is \"barcode\".\n   This field contains the type of barcode required.\n   The options are:\n     codabar\n    code128\n    code128a\n    code128b\n    code128c\n    code39\n    ean13\n    ean2\n    ean5\n    ean8\n    itf\n    itf14\n    msi\n    msi10\n    msi1010\n    msi11\n    msi1110\n    pharmacode\n    upc\n    upce    key_height, e.g. \"barcode_height\" if the key used is \"barcode\".\n   This field contains the height for the generated image.\n   Default is 200 for QR, 50 for the rest.    key_width, e.g. \"barcode_width\" if they key used is \"barcode\".\n   This field contains the width for the generated image.\n   Default is 200.    key_errorcorrectlevel (only for QR code), e.g. \"qrcode_errorcorrectlevel\" if the key used is \"qrcode\". This field contains the level of which the QR code should be recoverable.\n   The options are:\n   \"L\" (up to 7% damage)\n   \"M\" (up to 15% damage)\n   \"Q\" (up to 25% damage)\n   \"H\" (up to 30% damage)\n   Extra info:  http://www.qrcode.com/en/about/error_correction.html    key_cellsize (only for QR code), e.g.  \"qrcode_cellsize\". This field contains the dot size of a module.\n   Default is 4.\n   Extra info:  http://www.qrcode.com/en/howto/cell.html", 
            "title": "6.1.3 {|barcode} / {|qrcode} tags"
        }, 
        {
            "location": "/#6131-barcode-tag-example", 
            "text": "Given the JSON file:      {\n        ...\n         files :[{\n                  filename            : output ,\n             data :[{\n                   product_name       : Wallet ,\n                   product_code       : 1896547832148 ,\n                   product_code_type  : ean13 ,\n                   product_link       : https://www.google.be/search?q=wallet ,\n                   product_link_type  : qrcode \n            }]\n        }]\n    }  and template as:   will result in:    For barcodes, instead of doing the above, you could also choose to install a barcode font, for example  Free 3of9  or  http://www.dafont.com/3of9-barcode.font . Barcode fonts are more performant than images. See the other section for more information about language and font support.", 
            "title": "6.1.3.1 Barcode tag example"
        }, 
        {
            "location": "/#614-chart-tags", 
            "text": "This tag will be replaced by chart created using the data of the key named  \"chart\" . Notice that this key is a variable. Charts are represented by $ after curly bracket. If this tag is found in the document the chart object in the json must follow certain structure. Firstly an optional object with key  \"options\"  to determine the options for the chart. The default options are:      defaultOptions = {\n            width: 5486400 / 9525, // width of the chart\n            height: 3200400 / 9525, // height of the chart\n            grid: true, // if a grid should be shown\n            border: true, // if a border should be shown\n            title: false,\n            legend: {\n                showLegend: true, // if the legend should be shown\n                position: 'r'  // 'l' for left, 'r' right, 'b' bottom, 't' top\n            },\n            axis: {\n                x: {\n                    orientation: 'minMax', // or  maxMin \n                    min: undefined, // a specific number\n                    max: undefined, // a specific number\n                    type: undefined, // or  date \n                    date: { //date options\n                        format: 'unix',\n                        code: 'mm/yy',\n                        unit: 'months',\n                        step: '1'\n                    },\n                    showValues: true //options to disable showing the values in axis\n\n                },\n                y: {\n                    orientation: 'minMax',\n                    mix: undefined,\n                    max: undefined,\n                    showValues: true // options to disable showing the values in axis\n                 },\n                y2: { //If using multiple charts and axis on the right side\n                orientation: 'minMax',\n                mix: undefined,\n                max: undefined,\n                showValues: true // options to disable showing the values in axis\n                }\n            }\n        }  Secondly the type of chart should be determined by \"type\" key. The generation of following types of charts is supported:", 
            "title": "6.1.4 {$chart} tags"
        }, 
        {
            "location": "/#6141-line", 
            "text": "This is a normal chart where the data's are connected with lines. Multiple lines can be generated.  The chart key should contain lines array inside with the data of the lines that should be generated and the name of the line. E.g.:       chart : {\n             lines : [\n                {\n                     data : [\n                        {\n                             x :  day 1 ,\n                             y :  4.3 \n                        },\n                        {\n                             x :  day 2 ,\n                             y :  2.5 \n                        },\n                        {s\n                             x :  day 3 ,\n                             y :  3.5 \n                        }\n                    ],\n                     name :  line 1 ,\n                     smooth : true, //Can be false\n                     symbol :  square  // can be diamond triangle\n                },\n                {\n                     data : [\n                        {\n                             x :  day 1 ,\n                             y :  2.4 \n                        },\n                        {\n                             x :  day 2 ,\n                             y :  4.4 \n                        },\n                        {\n                             x :  day 3 ,\n                             y :  1.8 \n                        }\n                    ],\n                     name :  line 2 \n                }\n            ],\n             type :  line \n        }  will result in :", 
            "title": "6.1.4.1 Line"
        }, 
        {
            "location": "/#6142-bar", 
            "text": "In order to generate the bar chart, the chart object should then contains array names bars. This array contains the objects with data about the bar and the name of the bar. For example, given the following:      ...\n     chart : {\n         bars : [\n            {\n                 data : [\n                    {\n                         x :  day 1 ,\n                         y :  4.3 \n                    },\n                    {\n                         x :  day 2 ,\n                         y :  2.5 \n                    },\n                    {\n                         x :  day 3 ,\n                         y :  3.5 \n                    }\n                ],\n                 name :  bar 1 \n            },\n            {\n                 data : [\n                    {\n                         x :  day 1 ,\n                         y :  2.4 \n                    },\n                    {\n                         x :  day 2 ,\n                         y :  4.4 \n                    },\n                    {\n                         x :  day 3 ,\n                         y :  1.8 \n                    }\n                ],\n                 name :  bar 2 \n            }\n        ],\n         type :  bar \n    }\n    ...  will result in:   Single bar chart is generated as follows:      ...\n     chart : {\n         bars : [\n            {\n                 data : [\n                    {\n                         x :  day 1 ,\n                         y :  4.3 \n                    },\n                    {\n                         x :  day 2 ,\n                         y :  2.5 \n                    },\n                    {\n                         x :  day 3 ,\n                         y :  3.5 \n                    }\n                ],\n                 name :  bar 1 \n            }\n        ],\n         type :  bar \n    }\n    ...  will result in:", 
            "title": "6.1.4.2 bar"
        }, 
        {
            "location": "/#6143-barstacked", 
            "text": "This is like bar chart but the bars from same category will be stacked. For example, given the following:      ...\n     chart : {\n         bars : [\n            {\n                 data : [\n                    {\n                         x :  day 1 ,\n                         y :  4.3 \n                    },\n                    {\n                         x :  day 2 ,\n                         y :  2.5 \n                    },\n                    {\n                         x :  day 3 ,\n                         y :  3.5 \n                    }\n                ],\n                 name :  bar 1 \n            },\n            {\n                 data : [\n                    {\n                         x :  day 1 ,\n                         y :  2.4 \n                    },\n                    {\n                         x :  day 2 ,\n                         y :  4.4 \n                    },\n                    {\n                         x :  day 3 ,\n                         y :  1.8 \n                    }\n                ],\n                 name :  bar 2 \n            }\n        ],\n         type :  barStacked \n    }\n    ...  will result in:", 
            "title": "6.1.4.3 barStacked"
        }, 
        {
            "location": "/#6144-barstackedpercent", 
            "text": "This is like bar stacked chart but the x axis will be in expressed in percentage.\nFor example, given the following:      ...\n     chart : {\n         bars : [\n            {\n                 data : [\n                    {\n                         x :  day 1 ,\n                         y :  4.3 \n                    },\n                    {\n                         x :  day 2 ,\n                         y :  2.5 \n                    },\n                    {\n                         x :  day 3 ,\n                         y :  3.5 \n                    }\n                ],\n                 name :  bar 1 \n            },\n            {\n                 data : [\n                    {\n                         x :  day 1 ,\n                         y :  2.4 \n                    },\n                    {\n                         x :  day 2 ,\n                         y :  4.4 \n                    },\n                    {\n                         x :  day 3 ,\n                         y :  1.8 \n                    }\n                ],\n                 name :  bar 2 \n            }\n        ],\n         type :  barStacked \n    }\n    ...  will result in:", 
            "title": "6.1.4.4 barStackedPercent"
        }, 
        {
            "location": "/#6145-column", 
            "text": "This will produce a normal column chart. The chart object should then contain an array named columns with objects containing the data and name of the column. E.g.:           chart : {\n             columns : [\n                {\n                     data : [\n                        {\n                             x :  day 1 ,\n                             y :  4.3 \n                        },\n                        {\n                             x :  day 2 ,\n                             y :  2.5 \n                        },\n                        {\n                             x :  day 3 ,\n                             y :  3.5 \n                        }\n                    ],\n                     name :  column 1 \n                },\n                {\n                     data : [\n                        {\n                             x :  day 1 ,\n                             y :  2.4 \n                        },\n                        {\n                             x :  day 2 ,\n                             y :  4.4 \n                        },\n                        {\n                             x :  day 3 ,\n                             y :  1.8 \n                        }\n                    ],\n                     name :  column 2 \n                }\n            ],\n             type :  column \n        }  will result in:   A single column chart can be generated by following json:           chart : {\n             columns : [\n                {\n                     data : [\n                        {\n                             x :  day 1 ,\n                             y :  4.3 \n                        },\n                        {\n                             x :  day 2 ,\n                             y :  2.5 \n                        },\n                        {\n                             x :  day 3 ,\n                             y :  3.5 \n                        }\n                    ],\n                     name :  column 1 \n                }\n            ],\n             type :  column \n        }  will result in:", 
            "title": "6.1.4.5 column"
        }, 
        {
            "location": "/#6146-columnstacked", 
            "text": "This will produce a column stacked chart. The chart object should then contain an array named columns with objects containing the data and the name of the column. E.g:           chart : {\n             columns : [\n                {\n                     data : [\n                        {\n                             x :  day 1 ,\n                             y :  4.3 \n                        },\n                        {\n                             x :  day 2 ,\n                             y :  2.5 \n                        },\n                        {\n                             x :  day 3 ,\n                             y :  3.5 \n                        }\n                    ],\n                     name :  column 1 \n                },\n                {\n                     data : [\n                        {\n                             x :  day 1 ,\n                             y :  2.4 \n                        },\n                        {\n                             x :  day 2 ,\n                             y :  4.4 \n                        },\n                        {\n                             x :  day 3 ,\n                             y :  1.8 \n                        }\n                    ],\n                     name :  column 2 \n                }\n            ],\n             type :  columnStacked \n        }  will result in:", 
            "title": "6.1.4.6 columnStacked"
        }, 
        {
            "location": "/#6147-columnstackedpercent", 
            "text": "This will product a column stacked percent chart. The chart object should then contain an array named columns with objects containing the data and the name of the column.  E.g:           chart : {\n             columns : [\n                {\n                     data : [\n                        {\n                             x :  day 1 ,\n                             y :  4.3 \n                        },\n                        {\n                             x :  day 2 ,\n                             y :  2.5 \n                        },\n                        {\n                             x :  day 3 ,\n                             y :  3.5 \n                        }\n                    ],\n                     name :  column 1 \n                },\n                {\n                     data : [\n                        {\n                             x :  day 1 ,\n                             y :  2.4 \n                        },\n                        {\n                             x :  day 2 ,\n                             y :  4.4 \n                        },\n                        {\n                             x :  day 3 ,\n                             y :  1.8 \n                        }\n                    ],\n                     name :  column 2 \n                }\n            ],\n             type :  columnStackedPercent \n        }  will result in:", 
            "title": "6.1.4.7 columnStackedPercent"
        }, 
        {
            "location": "/#6148-pie", 
            "text": "This will produce a pie chart. The chart object should then contain an array named pies with one element containing the data and name of the pie chart. E.g:           chart : {\n             pies : [\n                {\n                     data : [\n                        {\n                             x :  Order 1 ,\n                             y : 1890\n                        },\n                        {\n                             x :  Order 2 ,\n                             y : 2380\n                        },\n                        {\n                             x :  Order 3 ,\n                             y : 1640\n                        },\n                        {\n                             x :  Order 4 ,\n                             y : 1090\n                        },\n                        {\n                             x :  Order 5 ,\n                             y : 950\n                        },\n                        {\n                             x :  Order 6 ,\n                             y : 1515\n                        },\n                        {\n                             x :  Order 7 ,\n                             y : 905\n                        },\n                        {\n                             x :  Order 8 ,\n                             y : 1060\n                        },\n                        {\n                             x :  Order 9 ,\n                             y : 730\n                        },\n                        {\n                             x :  Order 10 ,\n                             y : 870\n                        }\n                    ],\n                     name :  pie 1 \n                }\n            ],\n             type :  pie \n        }  will result in:", 
            "title": "6.1.4.8 pie"
        }, 
        {
            "location": "/#6149-radar", 
            "text": "This will produce a radar chart. The chart object should then contain an array named radars with one element containing the data and name of the radar chart. E.g:           chart : {\n             radars : [\n                {\n                     data : [\n                        {\n                             x :  Order 1 ,\n                             y : 1240\n                        },\n                        {\n                             x :  Order 2 ,\n                             y : 380\n                        },\n                        {\n                             x :  Order 3 ,\n                             y : 840\n                        },\n                        {\n                             x :  Order 4 ,\n                             y : 490\n                        },\n                        {\n                             x :  Order 5 ,\n                             y : 1230\n                        }\n                    ],\n                     name :  radar 1 \n                }\n            ],\n             type :  radar \n        }  will result in:", 
            "title": "6.1.4.9 radar"
        }, 
        {
            "location": "/#61410-area", 
            "text": "This will produce an area chart. The chart object should then contain an array named areas with one element containing the data and name of the area chart. E.g:       chart : {\n         areas : [\n            {\n                 data : [\n                    {\n                         x :  day 1 ,\n                         y :  4.3 \n                    },\n                    {\n                         x :  day 2 ,\n                         y :  2.5 \n                    },\n                    {\n                         x :  day 3 ,\n                         y :  3.5 \n                    }\n                ],\n                 name :  area 1 \n            },\n            {\n                 data : [\n                    {\n                         x :  day 1 ,\n                         y :  2.4 \n                    },\n                    {\n                         x :  day 2 ,\n                         y :  4.4 \n                    },\n                    {\n                         x :  day 3 ,\n                         y :  1.8 \n                    }\n                ],\n                 name :  area 2 \n            }\n        ],\n         type :  area \n    }  will result in:", 
            "title": "6.1.4.10 area"
        }, 
        {
            "location": "/#61411-scatter", 
            "text": "This will produce an scatter chart. The chart object should then contain an array named scatters with one element containing the data and name of the scatter chart. Similar to previous charts however the x axis should contain only numbers.", 
            "title": "6.1.4.11 scatter"
        }, 
        {
            "location": "/#61413-bubble", 
            "text": "This will produce an bubble chart. The chart object should then contain an array named bubbles with one element containing the data and name of the bubble chart. It is similar to previous charts however, the data should can now contain size value to determine the size of a bubble. Example JSON:  {\n     chart : {\n         bubbles : [\n            {\n                 data : [\n                    {\n                         x :  day 1 ,\n                         y :  4.3 ,\n                         size : 1 \n                    },\n                    {\n                         x :  day 2 ,\n                         y :  2.5 ,\n                         size : 3 \n                    },\n                    {\n                         x :  day 3 ,\n                         y :  3.5 ,\n                         size : 2 \n                    }\n                ],\n                 name :  Bubble series 1 \n            },\n            {\n                 data : [\n                    {\n                         x :  day 1 ,\n                         y :  2.4 ,\n                         size : 4 \n                    },\n                    {\n                         x :  day 2 ,\n                         y :  4.4 ,\n                         size : 5 \n                    },\n                    {\n                         x :  day 3 ,\n                         y :  1.8 ,\n                         size : 1 \n                    }\n                ],\n                 name :  Bubble series 2 \n            }\n        ],\n         type :  bubble \n    }\n}  will result in:", 
            "title": "6.1.4.13 bubble"
        }, 
        {
            "location": "/#61414-stock", 
            "text": "This will produce an stock chart. The chart object should then contain an array named stocks with one element containing the data and name of the stock chart. Here instead of y value: volume, open, close, high and low value should be given. The format of the x axis can also be given.\nThe x axis contains the date starting using 1900 notation, i.e 1 will represent January 1 1900  more info .  Example:   {\n           chart : {\n             stocks : [\n              {\n                 data : [\n                  {\n                     x :  1 ,\n                     volume :  70 ,\n                     open :  44 ,\n                     high :  55 ,\n                     low :  11 ,\n                     close :  25 \n                  },\n                  {\n                     x :  2 ,\n                     volume :  120 ,\n                     open :  25 ,\n                     high :  57 ,\n                     low :  12 ,\n                     close :  38 \n                  },\n                  {\n                     x :  3 ,\n                     volume :  150 ,\n                     open :  38 ,\n                     high :  57 ,\n                     low :  13 ,\n                     close :  50 \n                  },\n                  {\n                     x :  4 ,\n                     volume :  135 ,\n                     open :  50 ,\n                     high :  58 ,\n                     low :  11 ,\n                     close :  35 \n                  },\n                  {\n                     x :  5 ,\n                     volume :  148 ,\n                     open :  34 ,\n                     high :  58 ,\n                     low :  25 ,\n                     close :  43 \n                  }\n                ],\n                 name :  s \n              }\n            ],\n             type :  stock ,\n             options :{\n               axis :{\n                 x :{\n                   date :{\n                     unit : days ,\n                     step :1,\n                     code : dd \n                  }\n                }\n              }\n            }\n          },\n           name :  Stocks \n        }  will result in:", 
            "title": "6.1.4.14 stock"
        }, 
        {
            "location": "/#61411-combining-charts", 
            "text": "It is possible to combine multiple charts. For example a column and a line chart. If a second value axis is wished on the right side then the values should be given as y2 instead of y. The type should be \"multiple\" and the chart should contain a multiples array which contains the different charts defined previously. It is possible to combine more than 2 types of chart but there can only be two value axis. An example is given below:       chart : {\n         multiples : [\n            {\n                 columns : [\n                    {\n                         data : [\n                            {\n                                 x :  day 1 ,\n                                 y :  4.3 \n                            },\n                            {\n                                 x :  day 2 ,\n                                 y :  2.5 \n                            },\n                            {\n                                 x :  day 3 ,\n                                 y :  3.5 \n                            }\n                        ],\n                         name :  bar 1 \n                    },\n                    {\n                         data : [\n                            {\n                                 x :  day 1 ,\n                                 y :  2.4 \n                            },\n                            {\n                                 x :  day 2 ,\n                                 y :  4.4 \n                            },\n                            {\n                                 x :  day 3 ,\n                                 y :  1.8 \n                            }\n                        ],\n                         name :  bar 2 \n                    }\n                ],\n                 type :  column \n            },\n            {\n                 lines : [\n                    {\n                         data : [\n                            {\n                                 x :  day 1 ,\n                                 y2 :  43 \n                            },\n                            {\n                                 x :  day 2 ,\n                                 y2 :  25 \n                            },\n                            {\n                                 x :  day 3 ,\n                                 y2 :  35 \n                            }\n                        ],\n                         name :  line 1 \n                    },\n                    {\n                         data : [\n                            {\n                                 x :  day 1 ,\n                                 y2 :  24 \n                            },\n                            {\n                                 x :  day 2 ,\n                                 y2 :  44 \n                            },\n                            {\n                                 x :  day 3 ,\n                                 y2 :  18 \n                            }\n                        ],\n                         name :  line 2 \n                    }\n                ],\n                 type :  line \n            }\n        ],\n         options : {\n             border : true,\n             grid : true,\n             height : 700,\n             legend : {\n                 position :  r ,\n                 showLegend : true\n            },\n             title : false,\n             width : 500\n        },\n         type :  multiple \n    }  will result in:   The following SQL can be used:  select\n    'file1' as  filename ,\n    cursor(select  \n             cursor(select\n                      c.cust_first_name || ' ' || c.cust_last_name as  customer ,\n                      c.cust_city                                  as  city     ,\n                      o.order_total                                as  total    ,\n                      o.order_timestamp                            as  timestamp \n                      from demo_customers c, demo_orders o\n                     where c.customer_id = o.customer_id\n                     order by c.cust_first_name || ' ' || c.cust_last_name\n             ) as  report ,\n             cursor(select\n                      'multiple' as  type ,\n                      'My Combo: Column with Line Chart' as  name ,   \n                      cursor(select\n                               576     as  width  ,\n                               336     as  height ,\n                               'Title' as  title  ,\n                               'true'  as  grid ,\n                               'true'  as  border ,\n                               cursor(select\n                                 'true' as  showLegend ,\n                                 'r' as  position \n                                 from dual\n                               ) as  legend \n                             from dual\n                      ) as  options ,\n                      cursor(select\n                               tp as  type ,\n                               cursor(select\n                                 nm as  name ,\n                                 cursor(select to_char(o.order_timestamp, 'MON RRRR')  label , \n                                               to_char(o.order_timestamp, 'MON RRRR')  x ,\n                                               sum (decode(p.category,nm,oi.quantity * oi.unit_price,0))  y \n                                          from demo_product_info p, demo_order_items oi, demo_orders o\n                                         where oi.product_id = p.product_id\n                                           and o.order_id = oi.order_id\n                                         group by to_char(o.order_timestamp, 'MON RRRR'), to_char(o.order_timestamp, 'RRRR MM')\n                                         order by to_char(o.order_timestamp, 'RRRR MM')\n                                 ) as  data \n                                 from (select 'Mens' nm from dual union all select 'Womens' nm from dual )\n                                 where tp = 'column'\n                               ) as  columns ,\n                               cursor(select\n                                 nm as  name ,\n                                 cursor(select to_char(o.order_timestamp, 'MON RRRR')  label , \n                                               to_char(o.order_timestamp, 'MON RRRR')  x ,\n                                               sum (decode(p.category,nm,oi.quantity * oi.unit_price,0))  y \n                                          from demo_product_info p, demo_order_items oi, demo_orders o\n                                         where oi.product_id = p.product_id\n                                           and o.order_id = oi.order_id\n                                         group by to_char(o.order_timestamp, 'MON RRRR'), to_char(o.order_timestamp, 'RRRR MM')\n                                         order by to_char(o.order_timestamp, 'RRRR MM')\n                                 ) as  data \n                                 from (select 'Accessories' nm from dual)\n                                 where tp = 'line'\n                               ) as  lines \n                             from (select 'column' tp from dual   union all   select 'line' tp from dual)\n                       ) as  multiples \n                     from dual\n             ) as  chart \n           from dual\n    ) as  data \n  from dual\n  ```\n\n### 6.1.5 D3 (Data Driven Documents) images\n\nWith Word/Excel/PowerPoint documents, it's possible to let AOP execute some JavaScript code to generate a D3 image.\n\nGiven the JSON file with following content:\n\n```json\n{\n    ...\n     files : [{\n             filename :  output ,\n             data : {\n                 test :  CODE \n            }\n    }]\n}  With as (JSON-encoded) code:  // Based on https://bl.ocks.org/mbostock/7f5f22524bd1d824dd53c535eda0187f\nconst d3 = require('d3');\nconst D3Node = require('d3-node')\nconst d3n = new D3Node()\n\nconst svg = d3n.createSVG(512, 512);\nconst [width, height] = [512, 512];\nconst margin = { top: 20, right: 30, bottom: 30, left: 40 };\n\nvar x = d3.scaleLog().domain([2e-1, 5e0])\n  .rangeRound([margin.left, width - margin.right]);\nvar y = d3.scaleLog().domain([3e2, 2e4])\n  .rangeRound([height - margin.bottom, margin.top]);\nvar color = d3.scaleSequential(d3.interpolateYlGnBu).domain([0, 1.8]); // Points per square pixel.\n\nsvg.append( g )\n  .attr( transform ,  translate(0,  + (height - margin.bottom) +  ) )\n  .call(d3.axisBottom(x).ticks(null,  .1f ))\n  .select( .tick:last-of-type text )\n  .select(function () { return this.parentNode.appendChild(this.cloneNode()); })\n  .attr( y , -3).attr( dy , null)\n  .attr( font-weight ,  bold ).text( Carats );\n\nsvg.append( g )\n  .attr( transform ,  translate(  + margin.left +  ,0) )\n  .call(d3.axisLeft(y).ticks(null,  .1s ))\n  .select( .tick:last-of-type text )\n  .select(function () { return this.parentNode.appendChild(this.cloneNode()); })\n  .attr( x , 3).attr( text-anchor ,  start )\n  .attr( font-weight ,  bold ).text( Price (USD) );\n\nd3.tsv( https://bl.ocks.org/mbostock/raw/7f5f22524bd1d824dd53c535eda0187f/diamonds.tsv , d =  ({ carat: +d.carat, price: +d.price }), (error, diamonds) =  {\n  if (error) throw error;\n  if (diamonds[0] instanceof Error) throw diamonds[0];\n  svg.insert( g ,  g ).attr( fill ,  none )\n    .attr( stroke ,  #000 ).attr( stroke-width , 0.5)\n    .attr( stroke-linejoin ,  round ).selectAll( path )\n    .data(d3.contourDensity()\n      .x(d =  x(d.carat)).y(d =  y(d.price))\n      .size([width, height]).bandwidth(10)\n      (diamonds))\n    .enter().append( path )\n    .attr( fill , d =  color(d.value))\n    .attr( d , d3.geoPath());\n  finish(d3n);\n});  And a Word document containing  {?d3 test}  would produce the following result:  Should a field  \"test_data\": [1,2,3]  be present in the JSON (at the same place as  \"test\": \"CODE\" ), then the code will have access to the global  data  which would be  [1,2,3] , or whatever  \"test_data\"  is. String, booleans, nunbers and objects are also possible.", 
            "title": "6.1.4.11 Combining Charts"
        }, 
        {
            "location": "/#6151-code-structure", 
            "text": "This is how the code is supposed to be organized:  // Import D3\nconst d3 = require('d3');\n// Import D3-Node\nconst D3Node = require('d3-node');\n// Instantiate a new D3Node, which will provide the SVG and will be required to finish\nconst d3n = new D3Node();\n// Create a SVG (instead of selecting one from the (here non-existing) document)\nconst svg = d3n.createSVG(512, 512); // Different sizes are possible\n// Start working on the SVG\nsvg.append('g').text('Test');\n//  etc\n// We can access the _data field if it was given:\nsvg.append('g').text(data ? data.toString() : 'No data passed!');\n// When the SVG is finished, call the global finish() with the used D3Node object\nfinish(d3n);\n// We can also call the global fail() (or throw an error) should something fail:\nfail(new Error('We are missing something!'));", 
            "title": "6.1.5.1 Code structure"
        }, 
        {
            "location": "/#6152-specifications-and-limitations", 
            "text": "The d3 library is version 4.12.0  d3-contour and d3-scale-chromatic (along with all default 4.12.0 submodules) are preloaded, e.g.  d3.contour()  is available  The code is run in an async environment, meaning  await  is available  The code has to either have a return statement with a D3Node object, or call finish() with one  After the code has succesfully finished, the SVG will be extracted from the D3Node, converted to PNG and pasted in the Word/Excel/...  ES2015, ES2016 and ES2017 are supported, run inside a Node environment  Only d3 libraries (including sub-libraries like d3-polygon) can be returned by require()  d3-request can only use http:// and https:// URLs  There are time limitations, e.g. the whole script will time out after 30s, even when it's still fetching data over HTTP(S)  All errors are caught and will cause the whole PrintJob to fail. The stacktrace will be shown", 
            "title": "6.1.5.2 Specifications and limitations"
        }, 
        {
            "location": "/#616-data95loop-data95loop-tags", 
            "text": "Using the opening tag  {#data_loop}  and closing tag  {/data_loop} , we can loop inside the JSON array named \"data_loop\", meaning the items that are inside the tags will be repeated for each array element. Again like in image tag \"data_loop\" is a variable. A loop tag is represented by \"#\" after the curly bracket.", 
            "title": "6.1.6 {#data_loop} \u2026 {/data_loop} tags"
        }, 
        {
            "location": "/#6161-general-data-loop-example", 
            "text": "Given the JSON file with following content:      {\n        ...\n         files :[{\n                filename            : output ,\n                 data :[{\n                        people :[{\n                               first_name  : DemoName1 ,\n                               last_name   : DemoLastName1 ,\n                               city        : DemoCity1 },\n                       {\n                               first_name  : DemoName2 ,\n                               last_name   : DemoLastName2 ,\n                               city        : DemoCity2 },\n                       {\n                               first_name  : DemoName3 ,\n                               last_name   : DemoLastName3 ,\n                               city        : DemoCity3 }\n                       ]\n                }]\n        }]\n    }  and template.docx with following content:  The name of the employees are:\n{#people}{first_name}{last_name} from city {city}.\n{/people}  will result in:  The name of the employees are:\nDemoName1 DemoLastName1 from City DemoCity1.\nDemoName2 DemoLastName2 from City DemoCity2.\nDemoName3 DemoLastName3 from City DemoCity3.", 
            "title": "6.1.6.1 General Data loop example"
        }, 
        {
            "location": "/#6162-loops-in-table-example", 
            "text": "Using the previous data, if the template is changed to:   the result will then be:", 
            "title": "6.1.6.2 Loops in table example"
        }, 
        {
            "location": "/#6163-loops-with-numbering-example", 
            "text": "Using the previous data, if the template is changed to:   the result will be:", 
            "title": "6.1.6.3 Loops with numbering example"
        }, 
        {
            "location": "/#6164-loops-in-bullets", 
            "text": "The same can be done with bullets:   will result in:", 
            "title": "6.1.6.4 Loops in bullets"
        }, 
        {
            "location": "/#6165-math-operations-during-a-loop", 
            "text": "Numeric operations inside a loop are supported by using the  |  operator. The following operations are supported:    |sum , calculates the total sum of a numeric property during a loop.   |avg , calculates the total average of a numeric property during a loop.   |min , returns the minimum numeric value of a property during a loop.   |max , returns the maximum numeric value of a property during a loop.  The following template is given:    Results in:", 
            "title": "6.1.6.5 Math operations during a loop"
        }, 
        {
            "location": "/#617-horizontal-tabular-looping", 
            "text": "Since verion 18.1 AOP also supports horizontal tabular looping using the {:horizontal_loop} ... {/horizontal_loop} tags. However this tag can be used to repead only one row. Following is an example on how this could be used:", 
            "title": "6.1.7 Horizontal Tabular Looping"
        }, 
        {
            "location": "/#618-simple-angular-like-expressions", 
            "text": "Simple angular like expressions are also supported that can perform simple mathematical operations.  A full list of Angular expression can be found at  https://docs.angularjs.org/guide/expression .", 
            "title": "6.1.8 Simple angular like expressions"
        }, 
        {
            "location": "/#6181-simple-expressions", 
            "text": "Expressions like  {num1 + num2}  will print the sum of num1 and num2.\nDivision, multiplication, addition and subtraction are allowed.  If the given key has a boolean value then you can use  {#boolean key}\u2026{/boolean key}  to print the content inside tags if the value of boolean key is  true . For negation  {^boolean key}\u2026{/boolean key}  is used. The content inside these tags will be printed if the boolean key has  false  as value or if boolean key does not exists or if boolean key is an empty array.", 
            "title": "6.1.8.1 Simple Expressions"
        }, 
        {
            "location": "/#6182-stringnumber-comparison", 
            "text": "You can also check the value of keys with  {#key=='value'}\u2026{/key=='value'} . The content inside the tags will be only printed if the value of the key is equal to \"value\". Note here in  {#key=='value'} , that straight single quotes are used!  The numbers can also be compared in the same way as strings  {#key ;50}\u2026{/key ;50} .The content inside the tags will be only printed if the value of the key is greater than 50. The following operators are supported:  ,  ,  =,  =, ==, !=", 
            "title": "6.1.8.2 String/Number Comparison"
        }, 
        {
            "location": "/#6183-conditional-and-comparison-operator", 
            "text": "Another way to compare variables is as follows:  {key == 'value' ? key2 : key3} . This way other keys/variables can also be inserted. This will print out value of key2 if the expression is true and key3 if the expression is false.  Possible conditional operators are:   Equal: == (equal to) or === (equal value and equal type)  Not Equal: != or !== (not equal value or not equal type)  And:   Or: ||  Greater than:   Less than:   Greater than or equal:  =  Less than or equal:  =", 
            "title": "6.1.8.3 Conditional and Comparison operator"
        }, 
        {
            "location": "/#6184-conditional-example", 
            "text": "For the JSON given in example below {currency == 'EUR' ? '\u20ac'+price : price+'$'} prints \u20ac50 if true and 50$ if false and given price variable is 50.  Given the JSON file with following content:      {\n        ...\n                  data :[{\n                        product :[{\n                               product_name  : Business Shirt ,\n                               quantity      :3,\n                               unit_price    :50,\n                               onstock       :true,\n                               cur           : EUR \n                       },\n                       {\n                               product_name  : Trousers ,\n                               quantity      :3,\n                               unit_price    :80,\n                               onstock       :false,\n                               cur           : USD \n                       },\n                       {\n                               product_name  : Jacket ,\n                               quantity      :3,\n                               unit_price    :15,\n                               onstock       :true,\n                               cur           : USD \n                       },\n                       {\n                               product_name  : Blouse ,\n                               quantity      :3,\n                               unit_price    :60,\n                               onstock       :false,\n                               cur           : EUR \n                       }]\n                }]\n    }  and template with following content:   will result in:   Angular expressions can also be used inside floating texts. Below an example where the images are put inside floating textbox and are shown under condition.", 
            "title": "6.1.8.4 Conditional example"
        }, 
        {
            "location": "/#619-labels-printing", 
            "text": "AOP  also provides a way to print the labels in word document. To do so you can create a document with labels from going to Mailings options and then to Labels. Fill in the tags in address field and choose the type of label by clicking in Label option. A document can then be generated by clicking New document.\nCurrently however if labels are getting printed then we expect the document only containing labels and no other information, and that the tag keys are not used more than once.\nGiven the JSON file:      ...\n         data : {\n             labels : [\n                {\n                     city :  city1 ,\n                     first_name :  firstname1 ,\n                     last_name :  lastname1 ,\n                     title :  Mr. ,\n                     tracking_number_text :  TN49775377172 ,\n                     tracking_number :  TN49775377172 ,\n                     tracking_number_type :  code128 ,\n                     zip_code : 6981\n                },\n                ...\n                {\n                     city :  city12 ,\n                     first_name :  firstname12 ,\n                     last_name :  lastname12 ,\n                     title :  Mr. ,\n                     tracking_number_text :  TN49709864775 ,\n                     tracking_number :  TN49709864775 ,\n                     tracking_number_type :  code128 ,\n                     zip_code : 9740\n                }\n            ]\n        }\n    ...  and template:   will produce:   Note that in the first cell you need to add the {labels} tag. See also the Sample app.", 
            "title": "6.1.9 Labels printing"
        }, 
        {
            "location": "/#6110-html-tag", 
            "text": "HTML tags can also be converted to Word. The tag that has to be used is  {_key} , thus underscore followed by the key which has HTML content in JSON. The tags that are currently supported are:  br /                      : in order to introduce breaks (newline) p  ..  /p                 : represents a paragraph strong  ..  /strong       : bold text b  ..  /b                 : bold text s  ..  /s                 : strike through u  ..  /u                 : underline em  ..  /em               : italics h1  ..  /h1               : heading 1 h2  ..  /h2               : heading 2 h3  ..  /h3               : heading 3 h4  ..  /h4               : heading 4 h5  ..  /h5               : heading 5 h6  ..  /h6               : heading 6 sub  ..  /sub             : subscript sup  ..  /sup             : superscript ol  ..  /ol               : ordered list ul  ..  /ul               : unordered list li  ..  /li               : list item table  ..  /table         : table (including th, tr, td) caption  ..  /caption     : caption img                       : image pre  ..  /pre             : preformatted text span style=\"..\" .. /span  : text between the span will have the style defined, background-color, color, font-size and font-family are supported.  Eg:\nGiven the following key inside data:       htmlcontent :  p This is text coming from the database / session in HTML format.\n     br / It supports:\n     /p \n     ol \n     li Lists /li \n     li strong Bold /strong /li \n     li em Italic /em /li \n     li u Underline /u /li \n     li s Strikethrough /s /li \n     li Sub sub script /sub /li \n     li sup Super /sup script /li \n     li span style= color:#FF0000 Text Color /span /li \n     li span style= background-color:#FFFF00 Background Text Color /span \n     /li \n     /ol \n\n     h1 Heading 1 /h1 \n     h2 Heading 2 /h2 \n     h3 Heading 3 /h3 \n     h4 Heading 4 /h4 \n     p Normalt text with span style= font-family:comic sans ms,cursive  Font Change /span /p \n     p span style= font-family:courier new,courier,monospace Code font /span \n     /p   and the template:   will produce:", 
            "title": "6.1.10 HTML tag"
        }, 
        {
            "location": "/#6111-interactive-report-ir-tag", 
            "text": "{ interactive} will be replaced in the given template by the interactive report that has been selected in APEX.\nOther than the simple interactive report, there are three other options that can be selected: Control Break, Group By, Pivot. Those will be illustrated below.\nKeep in mind that the tag that gets replaced is { interactive}, no matter which of the above options is selected in APEX.\nFor a concrete example, see section 11.  Control Break: \nBy clicking on Actions and selecting Control Break, one or more columns can be selected on which the table should be broken. For the purpose of illustration, assume we select Quantity.   This splits the table up into partitions based on the value of the selected column. Thus rows sharing the same value for Quantity, will be grouped together into the same partition.\nThe resulting table can be seen below:   As a final note, this option also supports the application of aggregates on the table data.  Group By: \nBy clicking on Actions and selecting Group By, one or more columns can be selected on which the table data should be grouped by. For the purpose of illustration, assume we select Quantity. Furthermore, one or more functions can be applied on the table data. In this example, we request the sum of the unit price for every group.   The result is a new table with one column for every selected column on which the data should be grouped by, and one column for every selected function to be applied on the group data.  The resulting table can be seen below:   Additionally, a custom label and format may be selected for each function column and a sum can be performed over the values of each function column.  Pivot: \nBy clicking on Actions and selecting Pivot, the user is prompted to select at least one pivot column, at least one row column and at least one function over a particular column.\nImportant to note is that the row column, pivot column and function column need to be different.\nFor the sake of the example, we select Quantity as a pivot column, Product Name as a row column and sum over Unit Price as a function.   The resulting table can be seen below:   The additional options supported in this case are the same as the ones in Group By.  Chart: \nAOP can also print your Interactive Report Chart view directly in your template by using {\\$interactive}.   The result in Powerpoint can be seen below:   Note that this is a native Powerpoint chart, so you can adapt, make bigger, change colors, etc. directly in Powerpoint.", 
            "title": "6.1.11 Interactive Report (IR) tag"
        }, 
        {
            "location": "/#6112-multiple-interactive-reports-in-one-template", 
            "text": "In this case, the template needs to have tags of the form { interactive_1},{ interactive_2} and these tags will be replaced by the corresponding interactive reports. Many interactive reports can be selected by giving in their static IDs in a particular order (ir1,ir2,...) and it is in that order that their data will be inserted in the template. Thus, { interactive_1} gets replaced by the data in the first interactive report (static Id: ir1) and similarly for { interactive_2} that will get replaced by the data in the second interactive report (static Id: ir2) and so on.   The result can be seen below:", 
            "title": "6.1.12 Multiple Interactive Reports in one template"
        }, 
        {
            "location": "/#6113-table-cell-background", 
            "text": "You can give a background to a cell in a table in Word by using the column followed by _cell_background_color. The tag in the template should end with a $.   cursor(select p.product_name as  product_name ,\n                              i.quantity as  quantity ,\n                              case\n                              when i.quantity between 1 and 2 then '#00FF00'\n                              when i.quantity between 2 and 3 then '#00FF00'\n                              else '#0000FF'\n                              end as  quantity_cell_background_color ,\n                              i.unit_price as  unit_price \n                         from demo_order_items i, demo_product_info p\n                        where o.order_id = i.order_id\n                          and i.product_id = p.product_id\n                      )  backcolor", 
            "title": "6.1.13 Table cell background"
        }, 
        {
            "location": "/#6114-right-to-left-tag", 
            "text": "In word when substituting the content in language written in right to left like arabic, the { rightToLeft} tag can be used to properly format the language. If the susbstuting content does not contain any right to left language character then it will behave as normal substitution tag.", 
            "title": "6.1.14 Right to Left tag"
        }, 
        {
            "location": "/#6115-footnote-tag", 
            "text": "A footnote tag can be used to insert footnote. The tag should start with \"+\" symbol. For example given the following template:   and the data as follows:  {\n     quote : Only I can change my life. No one can do it for me. ,\n     person : Carol Burnett \n}  will result in:", 
            "title": "6.1.15 Footnote tag"
        }, 
        {
            "location": "/#6116-hyperlink-tag", 
            "text": "Since AOP3.3 hyperlink feature is added using a tag that start  with a * like: {*tag}. Given the template:   And the data:  {\n   name :  Support ,\n   company_url :  https://www.apexofficeprint.com ,\n   company_url_text :  APEX RND ,\n   mail :  support@apexofficeprint.com \n}  will result in:   The mail hyperlinks are automatically detected and mailto: will be appended for the link to work. The hyperlink text can be given by giving extra data that ends with _text. e.g: {*tag_text}. (see json above).  This hyperlink will also work when output pdf is wished.  Please note that in Excel the hyperlink will be added but the style will remain normal. You can change the tag style in template if another styling is wished. In Word your defalt hyperlink styling will be taken. If you wish another styling, you can change the style of the tag and add tag_preserve_tag_style:true options in the data.", 
            "title": "6.1.16 Hyperlink tag"
        }, 
        {
            "location": "/#6117-table-of-content", 
            "text": "AOP versions greater than 3.5, also support generation of table of content in Word. Placing the {~} tag will generate table of content at the place where this tag is used.", 
            "title": "6.1.17 Table Of Content"
        }, 
        {
            "location": "/#6118-word-subtemplating", 
            "text": "Inside Word documents, the tag  {?include NAME}  is available.  Given the following JSON:  {\n    ...\n     template : {\n         filename :  Template ,\n         file :  UEsDBBAQBgQ... ,\n         template_type :  docx \n    },\n     templates : [\n        {\n             name :  Subtemplate1 ,\n             mime_type :  application/vnd.openxmlformats-officedocument.wordprocessingml.document ,\n             file_source :  base64 ,\n             file_content :  UEsDBBAQBgAIAA... \n        }\n    ]\n}  with the template containing  {?include Subtemplate1}  would replace the tag with the contents of the subtemplate.  This tag can be used inside loops, and tags inside the subtemplate will also be replaced.  For example:  {#products}\nProduct {name}\n    {?include Subtemplate1}\n{/products}  Should the subtemplate just consist of the content  Amount: {amount} , then this could be an example result:  Product Product1\n    Amount: 5\nProduct Product2\n    Amount: 36  This tag is currently only available inside Word templates, and the subtemplates currently can only be Word documents (templates) too.", 
            "title": "6.1.18 Word Subtemplating"
        }, 
        {
            "location": "/#62-powerpoint-pptx-template", 
            "text": "For pptx template files same tags are supported as in docx template.\nAttention should be paid when using  \"#\" ,  \"%\" ,  \"\\$\"   and  \"\\^\"  tags, namely they should be on their own text field. The position of the text field will determine where the top left of the chart and image will start. Repeating a template slide is done by specifying which array should be looped with  \"!\"  tag after the curly bracket for example  {!products}  to repeat over product array. If none is declared the root object is taken as array. Multiple  \"!\"  tags are not allowed in one slide.  Given the JSON file with following content:      {\n         template : {\n             template_type :  pptx ,\n             filename :  demo.pptx \n        },\n         output : {\n             output_encoding :  raw ,\n             output_type :  pptx \n        },\n         files : [\n            {\n                 filename :  output ,\n                 data : [\n                    {\n                         slide_title :  Slides Per Product ,\n                         company_name :  Company A ,\n                         product : [\n                            {\n                                 product_name :  Business Shirt ,\n                                 quantity : 3,\n                                 unit_price : 50\n                            },\n                            {\n                                 product_name :  Trousers ,\n                                 quantity : 3,\n                                 unit_price : 80\n                            },\n                            {\n                                 product_name :  Jacket ,\n                                 quantity : 3,\n                                 unit_price : 15\n                            },\n                            {\n                                 product_name :  Blouse ,\n                                 quantity : 3,\n                                 unit_price : 60\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }  and the pptx template as follows:    will result the following for the first slide:   Since there is only one item in root JSON object this is repeated only once. In template slide 2 we have specified product array as our loop array with {!product} tag. Since there are 4 objects in our product array this template will be repeated four times. The result is as follows:", 
            "title": "6.2 Powerpoint (pptx) template"
        }, 
        {
            "location": "/#63-excel-xlsx-template", 
            "text": "In the xslx templates, some of the same tags as the previous types of templates can be used, as shown in the overview table at the start of this section. The JSON format should contain the same meta information elements (e.g. template_type, filename, \u2026) and the data information is stocked under  files/data .  Regular tags can be used with corresponding keyword in the JSON file between brackets, like in the docx and pptx templates. The xlsx templates can loop over elements in a list by using the same technique as in the docx template: {#loop_element} to enter the loop and {/loop_element} to close it. The cells that are in the rectangle bounded by these two tags will be looped over and filled in using the data available in the JSON file. Nested loops are possible (however keep in mind to remain within the rectangle formed by the \"parent\" loop \u2013 see note after example below). Style will be copied from the template to the generated file accordingly. As with the docx templates, simple angular expressions can be used to perform mathematical operations.  Xlsx example:  Given the JSON file with following content:      {\n         template : {\n         template_type :  xlsx ,\n         filename :  simple.xlsx \n        },\n         output : {\n         output_encoding :  raw ,\n         output_type :  xlsx \n        },\n         files : [\n        {\n             filename :  file1 ,\n             data : [\n                {\n                     cust_first_name :  Albert ,\n                     cust_last_name :  Lambert ,\n                     cust_city :  St. Louis ,\n                     orders : [\n                        {\n                             order_total : 310,\n                             order_name :  Casual Shop's Order ,\n                             product : [\n                                {\n                                     product_name :  Shirt ,\n                                     quantity : 3,\n                                     unit_price : 50\n                                },\n                                {\n                                     product_name :  Trousers ,\n                                     quantity : 2,\n                                     unit_price : 80\n                                }]\n                        },\n                        {\n                             order_total : 200,\n                             order_name :  Sport Shop's order ,\n                             product : [\n                                {\n                                     product_name :  Sport's shoes ,\n                                     quantity : 2,\n                                     unit_price : 100\n                                }]\n                        }]\n                }]\n        }]\n    }  and the xlsx template as follows:   Note: in the example above the {/orders} closing tag must be in the last column. Otherwise the child loops inside {#orders}\u2026{/orders}, in this case {#product}\u2026{/product}, would not be able to generate inside the rectangle formed between the tags of its parent loop ({#orders}\u2026{/orders}).  Interactive Report in Excel: \nAs of version 2.2, all of the functionalities supported in Word regarding the interactive report are also supported in Excel.\nFor the purpose of illustration, let's take this template as input:   The resulting output is then:   AOP 3.0 and above also supports cell settings from JSON by using _ for your tag.\nFor example when you have a column \"tag\", if you use \"tag_font_color\" : \"#1782A6\" it will set the Font color.\nWhen using \"tag_cell_background\":\"#1DF248\" you set the background color, when using \"text_wrap\":\"y\" will set if text is wrapped etc. A full list of features can be found in the Sample App for APEX 5.1.\nWith AOP 3.3 and above you can also generate sheets automatically by using {!tag} in A1 field.", 
            "title": "6.3 Excel (xlsx) template"
        }, 
        {
            "location": "/#64-qrcode-image-replacing", 
            "text": "AOP also allows you replace a QRcode image with another image. The qr code can contain the image tags and barcode tags, i.e {%key} or {|key}. This method can be used if you are inserting a floating image, or need to have certain border styles on the image. The tag replacing will work as look as there are no artistic effects used for the image themselves.   Please note that the scope always starts at the default place, so the {#loop} tags have no effect.", 
            "title": "6.4 QRCode Image Replacing"
        }, 
        {
            "location": "/#65-converter", 
            "text": "This feature only works when the output_type is pdf  AOP has the ability to convert several types of files and/or append/prepend them to the outputted files.", 
            "title": "6.5 Converter"
        }, 
        {
            "location": "/#651-appendingprepending-files", 
            "text": "All append/prepend files will first be converted to PDF, after which the pages (as a whole) will be prepended/appended to the outputted files. E.g. images will appear on their own page,  not  \"pasted\" into the template file.", 
            "title": "6.5.1 Appending/prepending files"
        }, 
        {
            "location": "/#6511-general-structure", 
            "text": "The JSON sent to AOP will have this structure:  {\n    ...\n     template : { ... },\n     output : {\n         output_encoding :  base64 ,\n         output_type :  pdf  // Converter functionality only works with PDF as output_type\n    },\n     files : [\n        {\n             data : { ... },\n             filename :  File1 \n        },\n        {\n             data : { ... },\n             filename :  File2 \n        },\n        ...\n    ],\n     prepend_files : [\n        // Array of prepend files (see 6.5.1.2 File Structure)\n        { ... },\n        { ... },\n        ...\n    ],\n     append_files : [\n        // Array of prepend files (see 6.5.1.2 File Structure)\n        { ... },\n        { ... },\n        ...\n    ]\n}", 
            "title": "6.5.1.1 General structure"
        }, 
        {
            "location": "/#6512-file-structure", 
            "text": "{\n     filename :  Filename ,\n     mine_type :  MIME TYPE ,\n    // File source can be  plain ,  base64 ,  url  or  file ,\n     file_source :  FILE SOURCE ,\n    // Used by  file_source :  plain  and  base64 ,\n     file_content :  ... ,\n    // Used by  file_source :  url ,\n     file_url :  http://... ,\n}", 
            "title": "6.5.1.2 File structure"
        }, 
        {
            "location": "/#6513-multiple-files", 
            "text": "Should the JSON contain multiple files, e.g. like this:  {\n    ...\n     files : [\n        {\n             data : { ... },\n             filename :  File1 \n        },\n        {\n             data : { ... },\n             filename :  File2 \n        },\n        ...\n    ],\n}  Then, as might be expected, a zip archive will be returned containing File1.pdf and File2.pdf.\nThe append/prepend files will be appended/prepended to  each  file.", 
            "title": "6.5.1.3 Multiple files"
        }, 
        {
            "location": "/#652-converting-without-template", 
            "text": "AOP allows converting files without a template, resulting in the append/prepend files being converted and stitched together.", 
            "title": "6.5.2 Converting without template"
        }, 
        {
            "location": "/#6521-general-structure", 
            "text": "The JSON sent to AOP will have this structure:  {\n    ...\n     template : {\n        // This template_type is template-less\n         template_type :  converter \n    },\n     output : {\n         output_encoding :  base64 ,\n         output_type :  pdf  // Converter functionality only works with PDF as output_type\n    },\n    // If the files array is empty, it'll default to a file with filename  Converted \n    // Giving (multiple) files will just result in a zip archive with identical files, but with the given names\n     files : [],\n     prepend_files : [\n        // Array of prepend files (see 6.5.1.2 File Structure)\n        { ... },\n        { ... },\n        ...\n    ],\n     append_files : [\n        // Array of prepend files (see 6.5.1.2 File Structure)\n        { ... },\n        { ... },\n        ...\n    ]\n}  Should  \"files\"  be empty or only contain one file, and  \"append_files\"  or  \"prepend_files\"  only contain one file, then the output file will just be that append/prepend file converted to PDF.", 
            "title": "6.5.2.1 General structure"
        }, 
        {
            "location": "/#653-supported-mime-types-for-convertingappendingprepending", 
            "text": "PDF  application/pdf  Text  text/plain  Markdown  text/markdown  HTML  text/html  Word  application/vnd.openxmlformats-officedocument.wordprocessingml.document  Excel  application/vnd.openxmlformats-officedocument.spreadsheetml.sheet  Powerpoint  application/vnd.openxmlformats-officedocument.presentationml.presentation  JPEG  image/jpeg  PNG  image/png  GIF  image/gif  BMP  image/bmp  MS-BMP  image/x-ms-bmp   Mind that tags in append/prepend files will  not  be parsed! Append/prepend files are only converted and appended/prepended to the output files.", 
            "title": "6.5.3 Supported mime types for converting/appending/prepending"
        }, 
        {
            "location": "/#7-sql-structure", 
            "text": "", 
            "title": "7 SQL Structure"
        }, 
        {
            "location": "/#71-how-to-write-sql-queries-and-map-them-to-template-documents", 
            "text": "Please refer to the image below containing SQL query and matching template.  AOP Plug-in supports PL/SQL cursor expressions which can be used in your templates as \"data loops\".  Left side corresponds to the SQL query that we used in our demo example. Right side is our Word template.  In SQL query you will  notice three inner cursors called data, orders and product.  Idea is for each customer to find orders and products and display it as an invoice letter.  Data cursor is a standard part of AOP JSON structure and it needs to be present in all SQL queries. At the same time you do not have to specify it as a loop in your template. For more details about this please reference Section 9 of this Manual.  Other two cursor names can be of your preference as long as they are reflected in your template.  Why do we have cursor syntax?   This is the way AOP engine merges your data with your templates.  In our template example you want to display customer details (Data cursor) and then display all their orders (Orders cursor) with products (Product cursor) so each represents a separate cursor.  This means that we want to be able to create a loop for orders and a separate loop for products. This is exactly what we have done in this template.  The way AOP template loop works is by using {#loop element}\u2026.{/loop element} notation. In the template notice that we are using the following:  \"Thank you for shopping at. We have following products reserved for you:\n\n{#orders}{#product}\n    - {product_name}{/product}\nThe total amount of your order is \u20ac{order_total}.\n{/orders}\"  First open  Orders  loop then open  Product  loop then doing a bullet numbering for all products. Before closing the  Product  loop and then closing the  Orders  loop.  Once you create your SQL query it is very easy to implement it in your template following few simple tagging rules depending on a template type you are creating.", 
            "title": "7.1 How to write SQL queries and map them to template documents"
        }, 
        {
            "location": "/#8-server-only-on-premise", 
            "text": "", 
            "title": "8 Server (only On-Premise)"
        }, 
        {
            "location": "/#81-installation", 
            "text": "APEX Office Print is using an external converter. By default LibreOffice is used (available on all platforms), but this can be changed to MS Office (Windows only). One of these products must be installed on the same server where you will also install APEX Office Print.  You can register and then login at  https://www.apexofficeprint.com . Go to Downloads and download On Premise package for your platform. Currently we support Linux,  Windows and OSX.   Unzip the downloaded file, you will see a directory with the version downloaded version number of AOP e.g v18.1/  Go to the version directory/server directory and copy executable file on the server where you want AOP running in a directory of your choice  Executable files:   OSX: APEXOfficePrintOSX64  Linux (Redhat): APEXOfficePrintLinux64  Windows: APEXOfficePrintWin64   Decide on which port you want to let AOP run. By default it is using port 8010. You can change that later (for example APEXOfficePrintLinux64 -p 5555).  If you want to run the On-Premise Trial version of AOP you can skip the activation step.\nThe on-premise version of AOP in Trial mode will work with Word and PDF, but it contains a trial watermark.\nThe cloud version of AOP (free 100 days) has no limitations.  Following step is only necessary when you bought AOP , it's not necessary to run in Trial mode (Linux example):   run ./APEXOfficePrintLinux64 -a  this will activate the software  you have to enter the email you registered with and it will try to generate the license key. License key will be generated if you have an open connection to the internet. If there\u2019s no internet connection, or something goes wrong with the activation, you can contact support@apexofficeprint.com and send us your MAC address of the server you want to install it on. We\u2019ll send you the license file per email.  exit AOP   To start APEX Office Print:   run ./APEXOfficePrintLinux64   or if you want it on a different port ./APEXOfficePrintLinux64 -p 8012   ( on Linux using   at the end of the command, will run this command in backround)   PDF  converter options:  LibreOffice can be downloaded from  https://www.libreoffice.org . Make sure you download LibreOffice 5 or higher and no older version of LibreOffice is installed. Once the installation of LibreOffice is complete check if you can run  soffice --version  in a terminal.  You should see something like:  LibreOffice 5.4.4.2 22b09f6418e8c2d508a9eaf86b2399209b0990f4  If that fails make sure your environment variable PATH contains the directory of LibreOffice (bin directory). You can also create a symbolic link to soffice e.g.  ln -s /opt/libreoffice5.4/program/soffice /usr/sbin/soffice  If you're on Windows, you can choose for LibreOffice or MS Office. In case you want to use MS Office, make sure you have MS Office 2003 or higher installed and also install  OfficetoPDF  (direct  download ), which allows to run conversions from the command line.  Note: Place the OfficetoPDF executable in the same folder than AOP.  After installing LibreOffice or MS Office, restart AOP.  From version 18.1 onwards, it is possible to specify other converters. On the first run of APEXOfficePrint a aop_config.json file is created. Below an example:  {\n     converters : {\n         abiword :{\n             command :  abiword --to={outputFormat} --to-name={outputFile} {inputFile} ,\n             handlesParallel : false\n        },\n         custom2 :{\n        }\n    }\n}  This allows for the users to use the converter of their choice. In the command section the following tags will be replaced:  {outputFormat}: will be replaced by the output format needed. e.g: pdf \n{outputFile}: the location and filename of the expected output. (includes output extension and is absolute path),\n{inputFile}: the location where the file for the conversion is located. (includes inputformat extenstion and is absolute path)\n{inputFormat}: the intput format of the input file. e.g. docx  The other option handlesParallel should be true if the specified custom converter is capable of handling multile pdf conversions at the same time.\nIf a custom converter is used and the specified converter cannot handle parallel conversion, then the conversions are placed in a queue and called on first come first serve basis (even when multiple instances of AOP are running).  Barcode  option:  Before AOP 3.1 an external tool needed to be installed to be able to generate barcodes, but since AOP 3.1 and above that is not necessary anymore. All the necessary components are within AOP itself.  Testing  the connection to AOP:  Make sure the database server can connect to the port where AOP is running. If not, open the port so the database server can connect to the webserver:port (note you don't need to open it up to everybody, just the database server is fine)  For example by running curl webserver:port (curl can be downloaded for free for windows via  https://curl.haxx.se/download.html#Win64 )  $ curl 127.0.0.1:8010  The installation on the server part is now complete.  In the downloaded zip file there is also a sample application (app directory) that can be imported or you can just import the AOP plug-in (plugin directory) into your application. The only configuration there is to define the webserver:port where AOP is running and which converter you are using (LibreOffice, MS Office). You can do that under Shared Components   Component Settings. Then select APEX Office Print (AOP) Plug-in, change AOP URL and select appropriate converter.", 
            "title": "8.1 Installation"
        }, 
        {
            "location": "/#82-configuration", 
            "text": "Following parameters can be used:  -p or --port can set a different port the server should be running at  Example: to run AOP on port 8015 run:  APEXOfficePrintLinux64 \u2013p 8015 (or ./APEXOfficePrintLinux64 \u2013p 8015)", 
            "title": "8.2 Configuration"
        }, 
        {
            "location": "/#83-unlock-trial-version", 
            "text": "By default AOP will run in TRIAL version.  Only Word templates can be created in the TRIAL version of AOP. Once you have decided on a license level, the product can be activated by running -a or --activate:  \\$ APEXOfficePrintLinux64 \u2013a  It will prompt for an email. Please use the same email you used when you subscribed for a license on  https://www.apexofficeprint.com/  When running AOP again, it will show the new licensed templates you can use.  If there\u2019s no internet connection, or something goes wrong with the activation, you can contact   and send us your MAC address of the server you want to install it on. We\u2019ll send you the license file per email. Add that file in the same directory of AOP and restart AOP to get the full version.  To obtain the MAC address you can use following commands:   Windows: ipconfig /all (or nbtstat \u2013a  ip address )  Linux: ifconfig | grep HWaddr  OSX: networksetup -listallhardwareports", 
            "title": "8.3 Unlock Trial version"
        }, 
        {
            "location": "/#84-server-options", 
            "text": "To view all available option, run ./APEXOfficePrintLinux64 -h  Following parameters can be used:                                               \n    -a or --activate         : Activate the software                                \n    -h or --help             : Show this menu                                       \n    -p or --port             : For giving in the running port default: 8010         \n                                Example: APEXOfficePrint -p 5555                     \n    -s or --startat          : Directory to start at.                               \n    --license                : The location of license file.                        \n                                Default looks at the startup directory               \n    --silent                 : Do everything quietly even start message             \n    -v or --version          : Show the current version of AOP                      \n    --verbose                : Log what AOP is currently doing.                     \n    --enable_printlog        : Log data about the printjobs to server_printjob.log. \n    --idle_timeout           : The maximum idle seconds for a request.              \n                            : Default: 2 (pdf conversion time is considered idle)  \n    -i or --instances        : The number of instances of AOP to start              \n                                Giving 0 will start max instances available          \n    --https_cert             : The location of the https certificate                \n    --https_key              : The location of the https private key file           \n    --https_port             : The port for the https server to run on.             \n                                Having a key/cert but no port will make the https    \n                                server use the port from -p/--port (or the default)  \n                                Example: .. -p 80 --https_port 443 -https_key ...    \n                                        http runs on port 80, https on port 443     \n                                Example: .. -p 80 --https_key ...                    \n                                        https runs on port 80, no regular http      \n    --ipwhitelist            : The file to read the IP whitelist from               \n                                If this parameter is empty, but 'ipwhitelist.txt'    \n                                        exists, ipwhitelist.txt will be used        \n                                File format: one IP (range) or subnetwork per line   \n                                Example: 127.0.0.1, abc::0-def::ffff                 \n                                        10.0.0.0/8, 192.0..                       \n    --pdf_error_threshold    : Set the maximum amount of retries for processing a pdf \n                                file.                                                \n    --enable_save            : This enables the option write to disk                \n                                Default: outputfiles dir of AOP directory            \n    --enable_local_resources : This enables accessing local files (e.g. templates)  \n                                Default: outputfiles dir of AOP directory            \n    --check_configuration    : Checks the configurations needed for AOP to run  Since version 18.2 AOP creates a config file. These options can be saved in this config file. If no config file is there, AOP generates the config file in the first run. \nThis configuration file is of JSON format. The default configuration is as follows:  {\n     config : {\n         port : 8010, // The port where AOP should start. \n         startat :  ./ , // The default location to start at. Handly if you are using local resources. \n         license :  ./aop.license , // The location of the license file.\n         silent : false,  // If true does not log anything.\n         verbose : false, // If true logs what it is currently doing. (Ignores silent)\n         enable_printlog : false, // If true logs the incoming printjobs into a log file. \n         idle_timeout : 120, // The timeout for conversion in seconds. \n         instances : 1, // The number of instace to start. Ideally is equal to number of cores (if 0 AOP detects number of cores).\n         https_key :  , // The location for the https key for AOP to use when starting in HTTPS mode. \n         https_cert :  , // The locatio for the https certificate for AOP to use when startin in HTTPS mode. \n         https_port : 433, // The port to use while starting as HTTPS. \n         ipwhitelist :  , // The location of the ipwhitelist file.\n         pdf_temp_folder :  , // The temp folder to use when converting to PDF.\n         pdf_error_threshold : 3, // The number of retries after pdf failure.\n         enable_save : false, // Enables saving output in local directories.\n         enable_local_resources : false // Enables reading out the templates and resources (for e.g images).\n    },\n     converters : { //Placeholder for converters. You can specify your own converters here and pass the value. See section 8.1 for more info. \n         abiword :{\n             command :  abiword --to={outputFormat} --to-name={outputFile} {inputFile} ,\n             handlesParallel : false\n        }\n    }\n}", 
            "title": "8.4 Server Options"
        }, 
        {
            "location": "/#85-running-as-service-in-windows", 
            "text": "", 
            "title": "8.5 Running as Service in Windows"
        }, 
        {
            "location": "/#using-microsoft-office-as-pdf-converter", 
            "text": "If you wish to use Microsoft office as PDF converter for your documents we have to do some tweaks before we can use ApexOfficePrint as service.", 
            "title": "Using Microsoft Office as PDF converter"
        }, 
        {
            "location": "/#32-bit-windows", 
            "text": "", 
            "title": "32-Bit Windows"
        }, 
        {
            "location": "/#directory-creation", 
            "text": "Create a directory \"Desktop\" if it does not already exist under\u00a0\\\n\"C:\\Windows\\system32\\config\\systemprofile\\Desktop\"", 
            "title": "Directory Creation"
        }, 
        {
            "location": "/#dcom-config", 
            "text": "From Run (Windows + R), type  dcomcnfg    Navigate to  Component Services   Computers   My Computer   DCOM Config     Locate \" Microsoft Excel Application \" and right click properties of it    Navigate to  Security Tab  and  Customize  the  Launch and Activation Permissions  and Edit    Check that no instances of excel.exe are running before changing the properties, either close the applications that are running the Excel or go to task manager and kill the excel.exe processes.     Add  the  current user  (type the current user, click check names, and click ok) and grant  permission  for  Local Launch  and  Local Activation    Go to  Identity Tab  and change the radio button to  \"The User\"    Do the same for  \"Microsoft PowerPoint Slide\" .    Do the same for  \"Microsoft Word 97-2003 Document\" .", 
            "title": "DCOM config"
        }, 
        {
            "location": "/#setting-directory-permissions", 
            "text": "Navigate to: \"C:\\Windows\\System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\".    Right click and go to Properties    Under Security Tab add the current user and grant the Modify, Read   Execute, List Folder Content, Read, and Write permissions.    Do the same for \"C:\\Windows\\Temp\\\".", 
            "title": "Setting directory permissions"
        }, 
        {
            "location": "/#64-bit-windows", 
            "text": "", 
            "title": "64-Bit Windows"
        }, 
        {
            "location": "/#directory-creation_1", 
            "text": "Create a directory \"Desktop\" if it does not already exist under:  \"C:\\Windows\\system32\\config\\systemprofile\\Desktop\"\nand\n\"C:\\Windows\\SysWOW64\\config\\systemprofile\\Desktop\"", 
            "title": "Directory Creation"
        }, 
        {
            "location": "/#dcom-config_1", 
            "text": "From Run (Windows + R), type  dcomcnfg  (if your  Microsoft Office is 32 bit  then open command line and change directory to \" C:\\Windows\\SysWOW64 \" and run \" mmc comexp.msc /32\" command )    Navigate to  Component Services   Computers   My Computer   DCOM Config     Locate \" Microsoft Excel Application \" and right click properties of it    Navigate to  Security Tab  and  Customize  the  Launch and Activation Permissions  and Edit    Check that no instances of excel.exe are running before changing the properties, either close the applications that are running the Excel or go to task manager and kill the excel.exe processes.     Add  the  current user  (type the current user, click check names, and click ok) and grant  permission  for  Local Launch  and  Local Activation    Go to  Identity Tab  and change the radio button to  \"The Interactive User\"  or  \"The Launching User\"  (automatic start)    Do the same for  \"Microsoft PowerPoint Slide\".    Do the same for  \"Microsoft 97-2003 Document\".", 
            "title": "DCOM config"
        }, 
        {
            "location": "/#setting-directory-permissions_1", 
            "text": "Navigate to:    \"C:\\Windows\\System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\".    Right click and go to Properties    Under Security Tab add the current user and grant the Modify, Read   Execute, List Folder Content, Read, and Write permissions.  Do the same for:    \"C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Microsoft\"    Do the same for \"C:\\Windows\\Temp\\\".", 
            "title": "Setting directory permissions"
        }, 
        {
            "location": "/#using-libreoffice-as-pdf-converter", 
            "text": "No extra steps are necessary.", 
            "title": "Using LibreOffice as pdf converter"
        }, 
        {
            "location": "/#managing-the-service", 
            "text": "Navigate to Windows Service folder situated in the APEXOfficePrint folder.    Edit 1_SetupAsService.bat to include the full path to the executable APEXOfficePrintWin64.exe  Note that you can also add additional parameters for example for the port it should run on and the starting directory.  terminal\nnssm.exe install APEXOfficePrint %0\\..\\..\\APEXOfficePrintWin64.exe --port 8090 -s D:\\apexofficeprint    Run 1_SetupAsService.bat.    The service should be installed and can be seen in Services (Control Panel   Administrative Tools   Services).    To change how the APEXOfficePrint services starts you can change it from Services or start it manually via 2_StartService.bat (should be run as Administrator).    To check if the service has started, navigate to  http://localhost:8010/    To stop the service run 3_StopService.bat as Administrator or stop it from Services.    To remove the APEXOfficePrint as service run 4_RemoveService.bat.    The APEXOfficePrint service should now be removed from Services. If it says Disabled then it will be removed after the service has been stopped.", 
            "title": "Managing the service"
        }, 
        {
            "location": "/#86-run-apex-office-print-at-startup-or-as-service-in-linux", 
            "text": "After reboot of the server where APEX Office print is installed, you have to make sure that you also run APEXOfficePrintLinux64 command. If you want to automate the startup of AOP you can create in init.d.\nFor example: /etc/init.d/aop-server  #!/bin/bash\n#\n# Apex Office Print (AOP) Server\n#\n# chkconfig: 345 70 30\n# description: AOP is a print server for Oracle Application Express and PL/SQL\n# processname: APEXOfficePrint\n\n# Source function library.\n. /etc/init.d/functions\n\nRETVAL=0\nAOP_HOME=/opt/aop/v18.1/server\nAOP_PROCESS_NAME=APEXOfficePrint\nAOP_EXECUTABLE_NAME=APEXOfficePrintLinux64\nAOP_PORT=8010\nLIBREOFFICE_HOME=/opt/libreoffice5.4\n\nPATH=$LIBREOFFICE_HOME/program:$PATH\nexport PATH\n\nstart() {\n        echo -n  Starting $AOP_PROCESS_NAME  \n        echo -n  Current path is $PATH \n        $AOP_HOME/$AOP_EXECUTABLE_NAME -p $AOP_PORT -s $AOP_HOME  \n        RETVAL=$?\n        echo\n        return $RETVAL\n}\n\nstop() {\n        echo -n  Shutting down $AOP_PROCESS_NAME:  \n        pkill $AOP_PROCESS_NAME\n        RETVAL=$?\n        echo\n        return $RETVAL\n}\n\nstatus() {\n        echo -n  TODO: Print $AOP_PROCESS_NAME status here...  \n        RETVAL=$?\n        return $RETVAL\n}\n\ncase  $1  in\n    start)\n        start\n        ;;\n    stop)\n        stop\n        ;;\n    status)\n        status\n        ;;\n    restart)\n        stop\n        start\n        ;;\n    *)\n        echo  Usage: $prog {start|stop|status|restart} \n        exit 1\n        ;;\nesac\nexit $RETVAL", 
            "title": "8.6 Run APEX Office Print at startup or as service in Linux"
        }, 
        {
            "location": "/#87-startstop-apex-office-print-on-linux-7-with-systemctl", 
            "text": "On Linux 7 you can use systemd (systemctl) to start and stop services.\nFor Red Hat and Oracle Enterprise Linux you can follow the below instructions.  As user root or sudo privileged user   cd into /usr/lib/systemd/system  create a file aop.service   Paste the following in and adjust for your installation as required (personally I install AOP in /opt/oracle)  [Unit]\nDescription=APEX Office Print\nAfter=network.target\n\n[Service]\nType=simple\nUser=aop\nGroup=aop\n\nEnvironment=AOP_HOME=/opt/aop/latest/server  ### Please see comment below\nEnvironment=AOP_PROCESS_NAME=APEXOfficePrint\nEnvironment=AOP_EXECUTABLE_NAME=APEXOfficePrintLinux64\nEnvironment=AOP_PORT=8010\n\nEnvironment=PATH=/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/bin/\nSyslogIdentifier=apexofficeprint\nRestart=always\nRestartSec=30\nTimeoutStartSec=30\nTimeoutStopSec=30\n\nExecStart=/usr/bin/env ${AOP_HOME}/${AOP_EXECUTABLE_NAME} -p ${AOP_PORT} -s ${AOP_HOME}\n\nExecStop=/usr/bin/env pkill ${AOP_PROCESS_NAME}\n\n[Install]\nWantedBy=multi-user.target   Reload the daemon   systemctl daemon-reload   A simple setup is to install the version of aop in /opt/aop. When you install a new version just unzip in this directory. You will end up for example with the following directories v3.4, v3.5 and v18.1. Create in the directory /opt/aop a symbolic link to point to the latest version.   ln -s /opt/aop/v18.1 /opt/aop/latest  Suppose something is not working properly and you need to revert back to your previous version, all you need to do is to create the symbolic link to a previous version. For example  unlink latest\nln -s /opt/aop/v3.3 /opt/aop/latest   As root    start aop :  systemctl start aop\nstop aop :  systemctl stop aop\nstatus aop: systemctl status aop  Example output of systemctl status aop  [root@s2s-proddb-03 system]# systemctl status aop.service \n\u25cf aop.service - APEX Office Print \n   Loaded: loaded (/usr/lib/systemd/system/aop.service; disabled; vendor preset: disabled) \n   Active: active (running) since Sat 2018-03-10 20:39:47 AEDT; 6s ago \nMain PID: 28273 (APEXOfficePrint) \n   CGroup: /system.slice/aop.service \n           \u251c\u250028273 /opt/aop/latest/server/APEXOfficePrintLinux64 -p 8010 -s /opt/oracle/aop/latest/server \n           \u251c\u250028283 /opt/aop/v3.4/server/APEXOfficePrintLinux64 --pkg-fallback --max_old_space_size=16384 /snapshot/apexofficeprint/aop_server/node_modules/apexrnd-startup-utils/sequentialConverter.js -d 0 --idleT... \n           \u2514\u250028288 /opt/aop/v3.4/server/APEXOfficePrintLinux64 --pkg-fallback --max_old_space_size=16384 /snapshot/apexofficeprint/aop_server/apexofficeprint.js -p 8010 -s /opt/oracle/aop/latest/server \nMar 10 20:39:47 http://proddb-032.acme.com systemd[1]: Started APEX Office Print. \nMar 10 20:39:47 http://proddb-032.acme.com systemd[1]: Starting APEX Office Print... \nMar 10 20:39:48 http://proddb-032.acme.com apexofficeprint[28273]: Current license is activated to: xxxx@thiscompany.com \nMar 10 20:39:48 http://proddb-032.acme.com apexofficeprint[28273]: The products activated are: \nMar 10 20:39:48 http://proddb-032.acme.com apexofficeprint[28273]: Word \nMar 10 20:39:49 http://proddb-032.acme.com apexofficeprint[28273]: Listening on port 8010 \nMar 10 20:39:49 http://proddb-032.acme.com apexofficeprint[28273]: AOP 1 running", 
            "title": "8.7 Start/Stop APEX Office Print on Linux 7 with systemctl"
        }, 
        {
            "location": "/#88-step-by-step-how-to-install-libreoffice-on-linux", 
            "text": "In case you need to install LibreOffice on Linux, here're the steps (see also other section):  # download LibreOffice for the PDF converter\ncd /tmp\nwget  http://downloadarchive.documentfoundation.org/libreoffice/old/5.4.7.2/rpm/x86_64/LibreOffice_5.4.7.2_Linux_x86-64_rpm.tar.gz\n\n# make sure no old versions exist\nyum remove openoffice* libreoffice*\n\n# extract tar\ntar -xvf LibreOffice_5.4.7.2_Linux_x86-64_rpm.tar.gz\n\n# install\ncd /tmp/LibreOffice_5.4.7.2_Linux_x86-64_rpm/RPMS/\n\nyum localinstall *.rpm\n\n# install some missing dependencies (depending your linux version this is not necessary)\nyum install cairo.x86_64\nyum install cups.x86_64\nyum install mesa-libGL.x86_64\n\n# install Java dependency (not necessary if you already have Java)\nyum install java-1.8.0-openjdk.x86_64\n\n# create symbolic link\nln -s /opt/libreoffice5.4/program/soffice /usr/sbin/soffice", 
            "title": "8.8 Step-by-step how to install LibreOffice on Linux"
        }, 
        {
            "location": "/#89-https-configuration", 
            "text": "AOP also has support for the usages of https protocol. It requires a crt file and its private key file. \nA self signed certificate and key can also be used. The certifcate can be generated by using openssl command:  openssl req -x509 -newkey rsa:2048 -keyout keytmp.pem -out aop.crt -days 365\nopenssl rsa -in keytmp.pem -out aop.key  Given aop.crt certifcate file and aop.key private key file AOP can be started with:  APEXOfficePrint --https_cert aop.crt --https_key aop.key  The port number can also be specified with the --https_port argument. If this is provided HTTP and HTTPS server will run.  You should see the following when started successfully on the console.  Starting HTTP and HTTPS on port 8010 and 443\nAOP 1 (HTTP) running\nAOP 1 (HTTPS) running  Please note that the certificate validation is done by the client. \nIf you are using a self signed certificate and visit the https location with browser, you will get a security warning (see below).    You can configure the browsers to trust the self signed certificate by adding it to the security exception.\nYou will also have to add this certificate in your oracle wallet to get rid of 'Certificate Validation Error'.  This option is comes in handy if you are running AOP.", 
            "title": "8.9 HTTPS Configuration"
        }, 
        {
            "location": "/#810-installation-errors", 
            "text": "", 
            "title": "8.10 Installation errors"
        }, 
        {
            "location": "/#linux-installation-port-error", 
            "text": "If you encounter this error:  -------------------------------------------------\nError on Thu Feb 04 2016 19:33:35 GMT-0800 (PST)\n-------------------------------------------------\nlisten EADDRINUSE  It means that the port you tried running AOP server is already taken and you need to change it by running this command:  ./APEXOfficePrintLinux64 \u2013p xxxx (replace xxxx by a free port)", 
            "title": "Linux installation port error"
        }, 
        {
            "location": "/#811-docker-image", 
            "text": "", 
            "title": "8.11 Docker image"
        }, 
        {
            "location": "/#pre-requisites", 
            "text": "Define a Docker netwerk, if you don't have one yet  docker network create my_network  Make sure your Oracle database container is in this netwerk  docker network connect my_network oracle  Start your ORDS container on this netwerk  docker run -t -i \\\n--name ords \\\n--network=my_network \\\n-e DATABASE_HOSTNAME= oracle  \\\n-e DATABASE_PORT= 1521  \\\n-e DATABASE_SERVICENAME= ORCLPDB1  \\\n-e DATABASE_PUBLIC_USER_PASS=oracle \\\n-e APEX_LISTENER_PASS=oracle \\\n-e APEX_REST_PASS=oracle \\\n-e ORDS_PASS=oracle \\\n--volume /docker/apex/images:/usr/local/tomcat/webapps/i \\\n-p 8181:8080\nords/ords_apex:3.0.9", 
            "title": "Pre-requisites"
        }, 
        {
            "location": "/#download-the-aop-docker-image", 
            "text": "docker pull apexrnda/apexofficeprint  Activating APEX Office Print the first time (Gold license only - not necessary for Enterprise license). This step is only needed once.  docker run -it \\\n--name apexofficeprint \\\n--network=my_network \\\n-p 8010:8010 \\\n-v /docker/apexofficeprint/:/apexofficeprintstartup/ \\\napexrnd/apexofficeprint \\\n-s /apexofficeprintstartup/\n-a  In case you have an Enterprise License, add the aop.license file in the directory you specified, in the below example it's /docker/apexofficeprint/", 
            "title": "Download the AOP docker image"
        }, 
        {
            "location": "/#start-an-aop-container-on-the-network-of-your-oracle-database-container", 
            "text": "docker run -d \\\n--name apexofficeprint \\\n--network=my_network \\\n-p 8010:8010 \\\n-v /docker/apexofficeprint/:/apexofficeprintstartup/ \\\napexrnd/apexofficeprint \\\n-s /apexofficeprintstartup/  You should now be able to connect to APEX Office Print server by going to http://apexofficeprint:8010/. You can view  this video  to see the above in action.", 
            "title": "Start an AOP container on the network of your Oracle database container"
        }, 
        {
            "location": "/#create-an-acl-for-apex_050100-to-the-aop-container", 
            "text": "begin\n DBMS_NETWORK_ACL_ADMIN.append_host_ace (\n    host       =  'apexofficeprint',\n    lower_port =  8010,\n    upper_port =  8010,\n    ace        =  xs$ace_type(privilege_list =  xs$name_list('http'),\n                              principal_name =  'APEX_050100',\n                              principal_type =  xs_acl.ptype_db));\nend;", 
            "title": "Create an ACL for APEX_050100 to the AOP container"
        }, 
        {
            "location": "/#configure-the-apex-plug-in", 
            "text": "Go to Shared Components   Component Settings   APEX Office Print and put in the AOP URL a reference to your docker container e.g. http://apexofficeprint:8010/", 
            "title": "Configure the APEX plug-in"
        }, 
        {
            "location": "/#9-tutorials", 
            "text": "You can check the  APEX Office Print tutorial page  to see tutorials and videos.", 
            "title": "9 Tutorials"
        }, 
        {
            "location": "/#10-troubleshooting", 
            "text": "", 
            "title": "10 Troubleshooting"
        }, 
        {
            "location": "/#101-output-generates-invalid-office-documents", 
            "text": "In case Office documents are not opening as expected, probably there was an issue with the JSON that was send to the AOP server. If you run in the AOP Cloud, you can enable Remote Debugging, which you can access when you login in your APEX Office Print dashboard at  https://www.apexofficeprint.com .\nIf you're running the on-premise version of AOP, on the server there is a server_error.log file that contains the errors it found during rendering. First step is to check that file for more information.\nNext make sure that your JSON is valid by validating the JSON in for example  http://jsonlint.com  or by doing Remote Debug (see further on in this document)", 
            "title": "10.1 Output generates invalid Office documents"
        }, 
        {
            "location": "/#102-invalid-json-generated-by-apex95web95servicemake95rest95request", 
            "text": "Make sure APEX 5.0.4 or higher is installed. To download it login to support.oracle.com.", 
            "title": "10.2 Invalid JSON generated by apex_web_service.make_rest_request"
        }, 
        {
            "location": "/#103-invalid-json-generated-by-apex_json", 
            "text": "Make sure you install an additional patch for APEX 5.0.4 PSE 24341756 or for APEX 5.1.0 PSE 25650850 or for APEX 5.1.1 PSE 25853436 or for APEX 5.1.4 PSE 27963501 available at  https://support.oracle.com . Those will fix issues with apex_json which is used behind the scenes in AOP.  You also might hit Oracle database bug (in 12.1.0.2). A patch is made available on  https://support.oracle.com ; search for patch #21424376. You won't experience this issue in 11.2.0.4 or 12.2.  When using PL/SQL Function returning JSON, you might hit a bug in apex_plugin_util, which can be fixed by applying patch 26048323.  Finally if you still encounter issues, use ORDS (SQL Workshop   RESTful Services) as your datasource. ORDS will generate the JSON instead of apex_json and AOP will use that JSON instead (see 3.5.4 Data Source - URL with ORDS RESTful Web Service).", 
            "title": "10.3 Invalid JSON generated by apex_json"
        }, 
        {
            "location": "/#104-running-on-oracle-cloud", 
            "text": "If you are running on Oracle Cloud you have to use HTTPS in the AOP Plug-in Component setting and when you call the  aop_api_pkg  package. Use  https://www.apexrnd.be/aop  as the url.", 
            "title": "10.4 Running on Oracle Cloud"
        }, 
        {
            "location": "/#105-invalid-pdf-file", 
            "text": "If you're running the on-premise version of AOP, check a file on the server called server_error.log or server_uncaugt_exceptions.log and see which error you get.\nTry to run your example in the same format as your template. If this also fails, there's an issue with the JSON or the template. Check your template and data again. If you receive your document fine, but PDF is not working, there's an issue finding LibreOffice or MS Office. Make sure those programs are installed correctly. Try to do a manual conversion on the command line in those tools and see if that works. If not, check the error and try to reinstall.\nYou can also do Remote Debugging (see further on in this document), which will help identifying the real issue. If everything fails, please contact  .", 
            "title": "10.5 Invalid PDF file"
        }, 
        {
            "location": "/#106-ora-29273-http-request-failed", 
            "text": "ORA-29273: HTTP request failed ORA-06512: at \"SYS.UTL_HTTP\", line 1130 ORA-24247: network access denied by access control list (ACL)  Make sure APEX_050000 or APEX_050100 schema has the rights to connect to APEX Office Print (http(s)://www.apexofficeprint.com for the Cloud version or your local url in case of the on-premise version). The script to correct the issue can be found here:  APEX 5.0  or for  APEX 5.1  (use the correct script for your database version - for XE use prior to 12c)", 
            "title": "10.6 ORA-29273: HTTP request failed"
        }, 
        {
            "location": "/#107-ora-29024-certificate-validation-failure", 
            "text": "ORA-29273: HTTP request failed ORA-06512: at \"SYS.UTL_HTTP\", line 1130 ORA-29024: Certificate validation failure  In case you run over HTTPS you need to take into account the certificates.\nThere're two ways to get around this:    Option 1: You can load our certificates in your Oracle wallet (the Oracle DB is doing the call to our server).    Option 2: You can add an entry in your webserver so a local entry is called by the database (which doesn't need a certificate) and the webserver is doing the redirect to handle the https call.    Here's an example when in the plug-in you would specify a local address:  http://apexrnd.localdomain/aop/  VirtualHost *:80 \nServerName  apexrnd.localdomain\nServerAlias apexrnd.localdomain\nRewriteEngine On\nProxyVia On\nProxyRequests Off\nSSLProxyEngine On\nProxyPass        /aop/   https://api.apexofficeprint.com/\nProxyPassReverse /aop/   https://api.apexofficeprint.com/ /VirtualHost", 
            "title": "10.7 ORA-29024: Certificate validation failure"
        }, 
        {
            "location": "/#108-error-generating-excel-and-powerpoint-with-aop-trial", 
            "text": "If you don't activate the on-premise version of AOP it will run in Trial mode.\nThis mode is not able to generate xlsx and pptx files, but it will work with docx and pdf, but those outputs will contain a trial watermark. The 100 day free cloud version is not limited and you can do everything on there.\nWhen you buy APEX Office Print you can activate your on-premise version and all restrictions will be removed.", 
            "title": "10.8 Error generating Excel and Powerpoint with AOP Trial"
        }, 
        {
            "location": "/#109-how-to-read-and-convert-documents-docx-xlsx-pptx-pdf-on-linux", 
            "text": "You need to install LibreOffice  https://www.libreoffice.org/download/libreoffice-fresh/ . The steps to do this are outlined below:  Make a connection to your server with ssh or putty, but make sure you  don't forward or tunnel your X Display .  Install supporting packages:  yum install wget  Download LibreOffice  cd /tmp\nwget http://download.documentfoundation.org/libreoffice/stable/5.4.2/rpm/x86_64/LibreOffice_5.4.2_Linux_x86-64_rpm.tar.gz  Install LibreOffice  tar xzvf LibreOffice_5.4.2_Linux_x86-64_rpm.tar.gz\ncd LibreOffice_5.4.2.2_Linux_x86-64_rpm/RPMS\nyum localinstall *.rpm\n- or you can do rpm -ivh *.rpm  Add LibreOffice to the profile for your user (as it needs to be able to find soffice)  vi /etc/profile\nexport PATH=$PATH:/opt/libreoffice5.4/program\nsource /etc/profile  Or add a symbolic link to LibreOffice  ln -s /opt/libreoffice5.4/program/soffice /usr/sbin/soffice  Check the version of LibreOffice and try to run a conversion  soffice --version\nsoffice --headless --invisible --convert-to pdf --outdir /tmp aop_interactive.docx  If you get: Fontconfig warning: ignoring UTF-8: not a valid region tag  echo \"$LC_CTYPE\"\n|-  you probably have UTF-8 defined; unset it\nexport LC_CTYPE=\"\"  Make sure you restart APEX Office Print after installing LibreOffice.  Note:  we sometimes see LibreOffice doesn't generate the same PDF as MS Office is generating, but we found LibreOffice becoming more and more inline, so we recommend using the latest version of LibreOffice.  Note:  Depending the version of LibreOffice converting to HTML from docx, xlsx, pptx might include the images as base64 or include a link.", 
            "title": "10.9 How to read and convert documents (docx, xlsx, pptx, pdf) on Linux"
        }, 
        {
            "location": "/#1010-ora-31011-xml-parsing-failed-ora-19202-error-occurred-in-xml-processing-lpx-00651-vm-stack-overflow", 
            "text": "You need to install an additional patch for APEX 5.0.4 which will fix this issue. Search in  https://support.oracle.com  for PSE 24341756.", 
            "title": "10.10 ORA-31011: XML parsing failed, ORA-19202: Error occurred in XML processing, LPX-00651: VM Stack overflow"
        }, 
        {
            "location": "/#1011-error-occured-while-aquiring-license", 
            "text": "You receive: \"Error occured while aquiring license. Please make sure that your API key is correct and that you have enough printing credits. Contact AOP if the problem persists.\"  This means you ran out of credits. Go to  https://www.apexofficeprint.com  and upgrade your package or send an email to   to see what we can do for your case.", 
            "title": "10.11 Error occured while aquiring license"
        }, 
        {
            "location": "/#1012-syntaxerror-unexpected-token-p-in-json-at-position-0", 
            "text": "If you are using APEX 5.1, the Dynamic Action plug-in will always work, whereas the Process plug-in might give this error. When you put the process in the Processing part, it will only work if the \u201cReload on Submit\u201d attribute (of the page) is set to \u201cAlways\u201d (note this attribute is new in 5.1).\nThis is due to a change how APEX 5.1 is handling Page Processing. If you would import an APEX 5.0 app in 5.1 by default it\u2019s set to Always reload on submit, but if you create a brand new app in 5.1 it\u2019s set to \u201cOnly for Success\u201d and then the process plug-in is not working. Alternative you can put the AOP Process to be After Header, and make it conditional, than it will work regardless of the setting of \"Reload on Submit\".", 
            "title": "10.12 SyntaxError: unexpected token P in JSON at position 0"
        }, 
        {
            "location": "/#1013-issues-with-oracle-xe", 
            "text": "When using Oracle XE, make sure you have the execute grant on the UTL_HTTP package.  GRANT EXECUTE ON SYS.UTL_HTTP TO my_user;\nGRANT EXECUTE ON SYS.UTL_FILE TO my_user;  If you receive \"ORA-20000: Issue returned by AOP Service (REST call). Please verify the logs on the server. Returned HTTP code: . (code: -29273)\", see section 10.6.", 
            "title": "10.13 Issues with Oracle XE"
        }, 
        {
            "location": "/#1014-chinese-and-other-language-and-font-support", 
            "text": "If you need special characters or language support, make sure the necessary fonts and languages are on your system. For example to add Chinese support on RHEL Linux do:  yum install \"@Chinese Support\"  Further more if you want to install additional fonts here's a good  link . Our AOP Cloud is also supporting  Google Noto  fonts.  Installing a font is nothing more than installing the font on your system.\nSo for example on (RedHat) Linux we copy the *.ttf files (or directory) to /usr/share/fonts/ and run \"fc-cache -f -v\"  Depending if you have a GUI (Linux/Windows) you can just double click on the font and it will install it in your system. If your system recognises is, MS Office or LibreOffice should be able to use it for the PDF conversion.  For barcodes, you could also choose to install a barcode font, for example  Free 3of9  or  http://www.dafont.com/3of9-barcode.font . Barcode fonts are more performant than images.", 
            "title": "10.14 Chinese and other language and font support"
        }, 
        {
            "location": "/#1015-running-aop-installed-in-a-single-schema-but-shared-across-multiple-schemas", 
            "text": "It is possible to install AOP only once and call it from other places. In order to do this, after you install AOP - go to the package AOP_API18_PKG and AOP_PLSQL18_PKG and remove the AUTHID CURRENT_USER and recompile.", 
            "title": "10.15 Running AOP installed in a single schema but shared across multiple schemas"
        }, 
        {
            "location": "/#1016-running-on-premise-aop-under-https", 
            "text": "Since AOP version 3.1 AOP can be configured to use HTTPS server. The key and the certificate files can be provided to AOP using the --https_key and --https_cert arguments.  For older versions however we recommend setting up an Apache Reverse Proxy which is doing the SSL in front of AOP.\nFrom Apache to AOP it would be unencrypted, but if it\u2019s on the same machine as Apache and the port of AOP is not open and only accessible by localhost, we believe you're save.  To prevent access to AOP other than the Apache Reverse Proxy, you can do (on Linux):  iptables -A INPUT -p tcp --dport 8010 -s 127.0.0.0/8 -j ACCEPT\niptables -A INPUT -p tcp --dport 8010 -j DROP  (instead of DROP you can use REJECT too)  So that would mean only a program on localhost (like Apache) can connect to port 8010, all others are rejected.", 
            "title": "10.16 Running on-premise AOP under HTTPS"
        }, 
        {
            "location": "/#1017-the-requested-url-has-been-prohibited", 
            "text": "If in APEX you force all outgoing connections to be HTTPS by setting:\nManage Instance -  Security -  HTTP Protocol -  Require Outbound HTTPS -  No.  make sure you're calling AOP also with HTTPS. If you're calling the AOP cloud  https://api.apexofficeprint.com  make sure to load the certificate in your database or setup a proxy on your end.", 
            "title": "10.17 The requested URL has been prohibited"
        }, 
        {
            "location": "/#1018-pdf-output-suddenly-stopped-working", 
            "text": "Probably LibreOffice or MS Office process is stuck. A way to solve this is running a script that checks for long running processes and that kills those. If you're using the AOP Cloud, please contact  .", 
            "title": "10.18 PDF output suddenly stopped working"
        }, 
        {
            "location": "/#1019-map-or-gantt-or-other-div-not-in-output", 
            "text": "In some occations divs are not screenshotted well enough, so they don't appear in the output. For example the JET Gauge might not be taken. We are looking for a workaround for a future release.", 
            "title": "10.19 Map or Gantt or Other div not in output"
        }, 
        {
            "location": "/#1020-ora-29273-http-request-failed-ora-12535-tnsoperation-timed-out", 
            "text": "Please check your firewall if it allows outgoing connection from the database to the AOP server.\nIf you added the AOP port to the firewall rules, make sure to restart the daemon.  If you're using a proxy, make sure to specify the proxy in Shared Components   Application Definition Attributes   Proxy Server or specify the global variable in the AOP_API_PKG.g_proxy_override.  See also further in this doc at chapter 14 Debugging connections to AOP Server", 
            "title": "10.20 ORA-29273: HTTP request failed ORA-12535: TNS:operation timed out"
        }, 
        {
            "location": "/#1021-font-in-pdf-is-different-from-the-font-in-my-word-template", 
            "text": "This is most likely due to the fact that the font you chose in Word, is available on your local computer, but not in the server. If you install that font also on the server where AOP is running, it should do the conversion well. See also 10.14 Chinese and other language and font support.", 
            "title": "10.21 Font in PDF is different from the font in my Word template"
        }, 
        {
            "location": "/#1022-the-generation-of-my-document-is-slow", 
            "text": "You would need to figure out where you lose time:    creation of JSON: your SQL statement or other source is taken to transform in JSON. You can trace what is going on by setting your page in debug mode (APEX) or running your SQL statement in a SQL window.    time needed on the server by AOP: you can trace that by enabling logging (only on-premise) Start the AOP server with --enable_printlog or --verbose, which will show the incoming requests.    network time: measture the time to travel from your database to our cloud or to your own on-premise install. If you would use the on-premise version and put AOP on the same machine as the database, it would be the fastest. Or if you could add it on another server where the network is fast, that should get rid of the transfer time.    If the conclusion is that everything is as fast as possible, we advice the reports that take a long time, to run in the background with a job. You could also schedule the reports to run overnight and store the results in a table.", 
            "title": "10.22 The generation of my document is slow"
        }, 
        {
            "location": "/#1023-invalid-multi-column-chart-or-unexpected-error", 
            "text": "With some versions of the Oracle Database there's an issue with the Cost Based Optimiser.\nTill you upgrade your database, you might want to try to use / +rule / hint in your top level SQL statement.", 
            "title": "10.23 Invalid multi-column chart or Unexpected Error"
        }, 
        {
            "location": "/#1023-safe-button-in-components-settings-not-available", 
            "text": "Most likely you subscribed the plug-in from another place. Go to Shared Components   Plug-ins\n- Click on References (number) and copy your logic where you used AOP. This is so you don't have to recreate your logic later. Next, remove all the processes or dynamic actions that use the plug-in.\n- Now you should be able to go to Shared Components   Plug-ins   AOP and hit the Delete button so the AOP plug-in is removed.\n- Import the AOP plug-in again, but make sure you don't reference it from another app, so Import from file.\n- Use the logic from step 1 to recreate your call(s) to AOP.", 
            "title": "10.23 Safe button in Components Settings not available"
        }, 
        {
            "location": "/#1024-sqlerrm-ora-31011-xml-parsing-failed-ora-19202-error-occurred-in-xml-processing-lpx-00664-vm-node-stack-overflow", 
            "text": "The node stack of the XSL VM can be set with an event. It defaults to 300, the maximum is 4096. You can set it with:  alter session set events='31153 trace name context forever, level 4096';", 
            "title": "10.24 sqlerrm: ORA-31011: XML parsing failed ORA-19202: Error occurred in XML processing LPX-00664: VM Node-Stack overflow"
        }, 
        {
            "location": "/#1025-how-to-get-a-download-to-excel-button-in-the-actions-menu-of-an-interactive-report", 
            "text": "The below steps describe how to export an Interactive Report to Excel (XLSX) with AOP via the native IR download dialog. The changes are done on the global page and works for all IR of the app without the need of creating a DA on each page for each report, so reducing a lot of manual work.  Create a JS file with the following content and upload/reference it app-wide:  function addAOPXLSXDownloadToIR(pStaticIdItem) {\n  // hack into dialogopen event of jquery ui dialogs\n  $('body').on('dialogopen', function(event, ui) {\n    var dialogWindow$ = $(event.target);\n    // only process if it\u00b4s an IR download dialog\n    if (dialogWindow$.parents('div.ui-dialog').find('span.ui-dialog-title').text() === apex.lang.getMessage('APEXIR_DOWNLOAD')) {\n      // get ID/static ID of IR\n      var currentRegionId = dialogWindow$.attr('id').match(/(.+)_dialog_js/)[1];\n      if (currentRegionId) {\n        // build html markup for XLSX download button\n        var html = apex.util.htmlBuilder();\n        html.markup(' li')\n          .attr('class', 'a-IRR-iconList-item')\n          .markup(' ')\n          .markup(' a')\n          .attr('class', 'a-IRR-iconList-link')\n          .attr('href', 'javascript:$s( ' + pStaticIdItem + ' , ' + currentRegionId + ' )')\n          .attr('id', 'download_excel_aop')\n          .markup(' ')\n          .markup(' span')\n          .attr('class', 'a-IRR-iconList-icon a-Icon icon-irr-dl-xls')\n          .markup(' ')\n          .markup(' /span ')\n          .markup(' span')\n          .attr('class', 'a-IRR-iconList-label')\n          .markup(' ')\n          .markup('XLSX')\n          .markup(' /span ')\n          .markup(' /a ')\n          .markup(' /li ');\n        // append html\n        $('.a-IRR-iconList').append(html.toString());\n      }\n    }\n  });\n}  Create a page 0 item for holding the IR static ID:  P0_AOP_IR_STATIC_ID  Create a page load DA (Execute JavaScript Code) on page 0 to call above JS function  addAOPXLSXDownloadToIR('P0_AOP_IR_STATIC_ID\u2019);  Create a page 0 DA (On Change of \u201cP0_AOP_IR_STATIC_ID\u201d) which calls the AOP plugin   1 True Action (AOP plugin)     2 True Action (Execute JavaScript - To close the IR download dialog after download)   var staticId = $v('P0_AOP_IR_STATIC_ID');\n$('div#' + staticId + '_dialog_js').parent().find('button').click();  Note: every IR should have a static ID.  That\u00b4s it, the final result looks like this (on every IR in the app):", 
            "title": "10.25 How to get a download to Excel button in the Actions menu of an Interactive Report?"
        }, 
        {
            "location": "/#1026-ora-06550-pls-00201-identifier-aop_api_pkgxxx-must-be-declared", 
            "text": "The APEX Plug-in can't find the AOP_API_PKG package. To fix the issue, run aop_db_pkg.sql (in the \"db\"-directory) in your Oracle Schema (SQL Workshop -  SQL Scripts -  Upload -  Select file and hit Upload)", 
            "title": "10.26 ORA-06550: PLS-00201: identifier 'AOP_API_PKG.xxx' must be declared"
        }, 
        {
            "location": "/#11-debugging-in-apex", 
            "text": "AOP is fully instrumented with APEX debug messages, so when you turn debugging on in your APEX application you will see many AOP: ... calls.\nDepending the level of APEX debug mode, more detailed debug output will be available. See  Dimitri Gielis's blog post  how to put APEX Trace on, which will show the most debug messages.  You can also specify a global variable g_debug_procedure if you want to call your own debug procedure which for examples logs the information in your own table.  If you use Logger, you can also enable logger by compiling aop_api_pkg with a PL/SQL flag.   ALTER PACKAGE aop_api18_pkg COMPILE PLSQL_CCFLAGS = 'logger_on:TRUE';", 
            "title": "11 Debugging in APEX"
        }, 
        {
            "location": "/#12-debugging-in-plsql", 
            "text": "If you're scheduling reports or calling the AOP packages with PL/SQL you can debug straight from PL/SQL. Here's an example:  declare\n  l_binds           wwv_flow_plugin_util.t_bind_list;\n  l_return          blob;\n  l_output_filename varchar2(100) := 'output';\nbegin\n  -- remove previous debug\n  apex_debug.remove_debug_by_age(\n    p_application_id  =  232,\n    p_older_than_days =  -1);\n\n  -- create an APEX session with the debug enabled\n  aop_api_pkg.create_apex_session(\n    p_app_id       =  232,\n    p_enable_debug =  'Y');\n\n  l_return := aop_api_pkg.plsql_call_to_aop (\n                p_data_type       =  aop_api_pkg.c_source_type_rpt,\n                p_data_source     =  'ir1',\n                p_template_type   =  aop_api_pkg.c_source_type_apex,\n                p_template_source =  'aop_interactive.docx',\n                p_output_type     =  'pdf',\n                p_output_filename =  l_output_filename,\n                p_binds           =  l_binds,\n                p_aop_url         =  'http://api.apexofficeprint.com/',\n                p_api_key         =  '1C511A58ECC73874E0530100007FD01A',\n                p_app_id          =  232,\n                p_page_id         =  5,\n                p_init_code       =  'aop_api_pkg.g_language := ''en'';');\nend;\n/", 
            "title": "12 Debugging in PL/SQL"
        }, 
        {
            "location": "/#13-remote-debugging", 
            "text": "If you receive an error and you need some help of us, do following steps:  1) Go in your application to Shared Components   Component Settings   APEX Office Print (AOP) [Plug-in] and enable remote debugging (see parameters screenshot)  ![ ](media/aop_component_settings.png)\n\nNote 1: you find your API key when you login in your dashboard on  https://www.apexofficeprint.com \n\nNote 2: Make sure APEX\\_050000 or APEX\\_050100 schema has the rights to connect to http(s)://www.apexofficeprint.com  2) Run your report again.  3) Login on  https://www.apexofficeprint.com  and go to Remote Debug  ![ ](media/aop_remote_debug.png)  4) Click on the magnifying glass, and the JSON that was generated behind the scenes which is send to the AOP server component will be shown.  5) Investigate the received JSON:  -)  JSON is valid, and valid output : this is how it should be.  -)  JSON is invalid : this is probably due to your version of APEX. If you are below APEX 5.1.2, you need a patch linked to apex_json.  -)  JSON is valid, but invalid Office file (Word, Excel, Powerpoint) : this means that AOP couldn't merge your data with the template you provided. If the template and requested output is the same format (e.g. your template is in Word and you request a Word document); check your template again if all substitution strings are correct. If you believe everything is ok, click the button \"Sent to Support\" and contact  .  -)  JSON is valid, but invalid PDF (or other output format) : if the template and output format are different, a conversion is going on handled by LibreOffice or MS Office. Either the conversion goes wrong, or most likely the initial file before the conversion was already wrong. To debug further, set the output format to the same format as your template and run your report again. If the output is invalid, follow previous steps (see JSON is valid, but invalid Office file). If the output is ok, click the button \"Sent to Support\" and send an email to   as it means there's a bug in the conversion.", 
            "title": "13 Remote Debugging"
        }, 
        {
            "location": "/#14-local-debugging", 
            "text": "If you receive an error and you need some help of us, do following steps:    Go in your application to Shared Components   Component Settings   APEX Office Print (AOP) [Plug-in] and set Debug to Local.    Run your report again. A JSON file will now be downloaded instead of the report. This JSON is what is sent to the AOP server component behind the scenes.    Investigate the received JSON:  -)  JSON is valid, and valid output : this is how it should be.  -)  JSON is invalid : this is probably due to your version of APEX. If you are below APEX 5.1.2, you need a patch linked to apex_json.  -)  JSON is valid, but invalid Office file (Word, Excel, Powerpoint) : this means that AOP couldn't merge your data with the template you provided. If the template and requested output is the same format (e.g. your template is in Word and you request a Word document); check your template again if all substitution strings are correct. If you believe everything is ok, contact  .  -)  JSON is valid, but invalid PDF (or other output format) : if the template and output format are different, a conversion is going on handled by LibreOffice or MS Office. Either the conversion goes wrong, or most likely the initial file before the conversion was already wrong. To debug further, set the output format to the same format as your template and run your report again. If the output is invalid, follow previous steps (see JSON is valid, but invalid Office file). If the output is ok, send an email to   as it means there's a bug in the conversion.    If you didn't find a solution yourself, please send the JSON file to support@apexofficeprint.com", 
            "title": "14 Local Debugging"
        }, 
        {
            "location": "/#15-debugging-connections-to-aop-server", 
            "text": "Open a first command prompt or shell and run AOP in verbose mode:  ./APEXOfficePrintLinux64 \u2014-verbose  Copy the  test.json  file to your server where AOP is running in /tmp folder  In another command prompt or shell go to /tmp folder and run (If you are in windows environment you can download curl from  https://curl.haxx.se/download.html#Win64 ):  curl -X POST -H 'Content-Type: application/json' -d @test.json http://127.0.0.1:8010/   output.docx  This should show the below output and have created an output.docx file    % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  164k  100 68310  100   97k   335k   492k --:--:-- --:--:-- --:--:--  494k  Check the first shell, AOP should have printed:  Prinjob received.\nSending back response.\nPrinjob completed.  Try to run the same curl command but with your server name  curl -X POST -H 'Content-Type: application/json' -d @test.json http:// your server name :8010/   output.docx  Same as before for output.  Go to the database server copy the test.json in the /tmp folder and run the curl command again  curl -X POST -H 'Content-Type: application/json' -d @test.json http:// your server name :8010/   output.docx  This should do the same as before.  Instead of using curl you can also use a RESTClient like Postman. You will have to add the header 'Content-Type: application/json' and give the data from the test.json into the body section.   Go into APEX   SQL Workshop, and try to connect to the AOP server  select apex_web_service.make_rest_request('http:// your server name :8010/', 'GET') from dual  Try to generate a first document, adjust the below script to your settings and run  declare\n  l_return          blob;\n  l_output_filename varchar2(100) := 'output';\n\nbegin\n  aop_api_pkg.g_proxy_override := null; -- set the proxy if you use that\n\n  l_return := aop_api_pkg.plsql_call_to_aop (\n                p_data_type       =  'SQL',\n                p_data_source     =  q'[\n                  select\n                    'file1' as  filename ,\n                    cursor(\n                      select 'hello world' as  string \n                        from dual\n                    ) as  data \n                  from dual\n                ]',\n                p_template_type   =  null,\n                p_template_source =  null,\n                p_output_type     =  'docx',\n                p_output_filename =  l_output_filename,\n                p_aop_url         =  'http:// your server name :8010/', -- change to the AOP server\n                p_api_key         =  '',\n                p_app_id          =  232); -- change to the AOP sample app number\n  sys.htp.p(dbms_lob.getlength(l_return));\nend;  In the shell where AOP is running you should see the incoming connection.  Hopefully the below steps give you more insight where your connection is failing so you can correct accordingly.", 
            "title": "15 Debugging connections to AOP Server"
        }, 
        {
            "location": "/#16-faq", 
            "text": "-)  Does AOP have to go on its own server, the database server or the application (ORDS) server?  You can choose. Having AOP on the same server as the database machine is most performant and easiest as you don\u2019t have network connections to other servers. If you install AOP on it\u2019s own server you can size and monitor that server better. AOP on the Application server is another option, as long as the database can connect to the AOP server component, the AOP server doesn't need to be accessible from the outside (clients).\nSo it\u2019s whatever you are most comfortable with.  -)  Is there anything special we have to do with AOP to get it to work with SSL?  You can add a reverse proxy for the SSL or you can specify the https certificate when starting the AOP server itself.\nMost people don\u2019t do SSL as it\u2019s only the database that needs to access the AOP server component, so typically you don\u2019t even pass the network where others are. However AOP can start in SSL mode if the SSL certificate and its key are provided via --https_key and --https_cert argument.  -)  Where do I get the SSL certificate of API server?  If you are using HTTPS (we always recommend you to do this) for connecting with the API server, you might get a SSL certification validation error:  ORA-29273: HTTP request failed ORA-06512: at \"SYS.UTL_HTTP\", line 1130 ORA-29024: Certificate validation failure  \nIn this case you will have to load the SSL certificate of the root certification authority, in our case that of GoDaddy, into your oracle wallet. You can get this certificate by visiting https://apexofficeprint.com/ and looking at the certificate infomation. Example firefox:  It could be that you will have to change the url to https://www.apexrnd.be/aop/  -)  How resource intensive is it?  Does it eat up a lot of CPU, RAM, or hard drive space?  It depends how many prints you do\u2026 AOP initially consumes about 400MB RAM, but depending the prints it can go up to 4GB (a limit we put). In case you have larger documents, we recommend downloading the high memory version which can consume up to 16GB.\nCPU is not much compared to the specs these days and hard drive space is about 500MB.\nThe executable is about 500MB and we might create some temporary files (during pdf conversion) and a log and error file.  -)  Do I have to install LibreOffice when we need Word and Excel output only?  No - LibreOffice or MS Office is only used when you want to convert from one format to another.\nSo Word-Word or Excel-Excel is working without. But if you want to do for example Word- PDF you need LibreOffice or MS Office or another converter you prefer.  -)  Can AOP print directly to a printer  AOP 3.1 and above includes the ability to print directly to an IP Printer, as long as it's available from the server AOP is running on. If you want to print to a local printer, check the Sample app how to print to an inline region, by adding a little bit of JavaScript to the dynamic action you can let the browser come up with a print window automatically.  -)  Can you repeat the Table header in Word and Excel?  Yes, this is a setting in Office.\nWhen you right click on your header row in Word, you can go to Table Properties - Row and check the \"Repeat as header row at the top of every page\". An example is given on page 113 of sample application.  -)  Does AOP support Pivots in Excel  Yes, you can use the transpose function in Excel to pivot your data. AOP can also loop vertically by using the {:tag}.  -)  why is there a difference between an output in Word and PDF  When going from Word to PDF, we use an external converter: MS Office or LibreOffice. It might be that if your template was build on your desktop in MS Office (Word), but your server is using LibreOffice (Linux) a font is different or there are minimal changes. The easiest way to find out what the difference is, is to open the template in LibreOffice on your Desktop and see why LibreOffice is treating it different. In most use cases it works just fine going from one to the other, but sometimes it's in the details.  -)  Can I install the APEX Plug-in somewhere so all my apps have access ot it?  You can make the aop_api_pkg a public synonym for aop_api18_pkg PL/SQL package in case you only want the package in a global schema. The Oracle APEX plug-in itself you would still need to import in every APEX application you want to use it in, but the plug-in can point to the public package.  -)  Can I use dynamic page break in Word?  Yes. In some cases you might want to start a new page for every record for example for certificates. You can put the page break inside a conditional expression. You can use the rownum function to generate the id for every record and check if that is equals to the record length. An example is shown in page 119 of our sample application. Given the data:  select\n  'file1' as  filename ,\n  cursor(\n    select\n      cursor(\n          select\n          rownum as  customerIndex ,\n          c.cust_first_name as  cust_first_name ,\n          c.cust_last_name as  cust_last_name \n          from demo_customers c\n      ) as  customers \n      from dual\n) as  data \nfrom dual  You can use the following tag to insert page break for every record except for the last.  {#customerIndex!=customers.length}\n\u2003-------------page break ------------\n{/customerIndex!=customers.length}  Please note that if you wish to output to pdf, the same can be achieved by using the Powerpoint template and {!slides_loop} tag. In this case there is no need to use the rownum function.  -)  Can I adjust the width and height of interactive report/grid export in Word?  If you are exporting interacitve grid, you can adjust the columns width as you like (due to meta data issue you will also have to change the width a bit for all columns.). The ratio is then automatically taken into account.   In interactive report, you can use the following in html expression.   span data-aop-width-weight= 2 /span #COLUMN_NAME#  The default weight for each column is 1. Lets say you have 4 columns and you provide this html expression in the first colum. This will double the size of the first column in comparision to the remaining 3.  The following formula is used to calculate the percentage of width a column gets:   (weight of column)/(total weight provided for all the columns) * 100.", 
            "title": "16 FAQ"
        }, 
        {
            "location": "/#17-example-templates", 
            "text": "Below we illustrate some example templates and the generated output.", 
            "title": "17 Example Templates"
        }, 
        {
            "location": "/#example-1", 
            "text": "This is the input template:   This is the result after AOP has processed the template and the given data:", 
            "title": "Example 1"
        }, 
        {
            "location": "/#example-2", 
            "text": "This is the input template:   This is the result after AOP has processed the template and the given data:", 
            "title": "Example 2"
        }, 
        {
            "location": "/#example-3", 
            "text": "This is the input template:   This is the result after AOP has processed the template and the given data:", 
            "title": "Example 3"
        }, 
        {
            "location": "/#example-4", 
            "text": "This is the input template:   This is the result after AOP has processed the template and the given data:", 
            "title": "Example 4"
        }, 
        {
            "location": "/#copyright", 
            "text": "Copyright \u00a9 2015-2018,  APEX R D  All rights reserved.  Authors: Dimitri Gielis, Sunil Tandan and Lino Schildenfeld  This software and related documentation are provided under a license agreement containing restrictions on use and disclosure that are protected by intellectual property laws. Except as expressly permitted in your license agreement or allowed by law, you may not use, copy, reproduce, translate, broadcast, modify, license, transmit, distribute, exhibit, perform, publish, or display any part, in any form, or by any means. Reverse engineering, disassembly, or de-compilation of this software, unless required by law for interoperability, is prohibited. The information contained herein is subject to change without notice and is not warranted to be error-free. If you find any errors, please report them to us in writing.", 
            "title": "Copyright"
        }
    ]
}